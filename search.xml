<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leveldb-study</title>
      <link href="/posts/a6e0.html"/>
      <url>/posts/a6e0.html</url>
      
        <content type="html"><![CDATA[<p>2020年11月我学习了leveldb，google开发的一个高效KV数据库</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++-example</title>
      <link href="/posts/9071.html"/>
      <url>/posts/9071.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++-study</title>
      <link href="/posts/241f.html"/>
      <url>/posts/241f.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完美解决Tensorflow不支持AVX2指令集问题|指令集加速</title>
      <link href="/posts/6e6c.html"/>
      <url>/posts/6e6c.html</url>
      
        <content type="html"><![CDATA[<p> 在pycharm中安装tensorflow后<br>    <img src="https://img-blog.csdnimg.cn/20200712190018795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行如下测试代码：</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfx <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">)</span>y <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">)</span>f <span class="token operator">=</span> x<span class="token operator">*</span>x<span class="token operator">*</span>y <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre><p>发现会报一行错误<img src="https://img-blog.csdnimg.cn/20200712190733701.png" alt="在这里插入图片描述"><br><code>Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2</code>大概意思是安装的tensorflow版本不支持cpu的AVX2编译<br>可能是因为安装时使用的pip install tensorflow ，这样默认会下载X86_64的SIMD版本。<br>查找解决办法后，有以下两种办法：</p><h4 id="1-忽略屏蔽这个警告"><a href="#1-忽略屏蔽这个警告" class="headerlink" title="1.忽略屏蔽这个警告"></a>1.忽略屏蔽这个警告</h4><p>在代码最前面添加如下两行代码</p><pre><code>import osos.environ["TF_CPP_MIN_LOG_LEVEL"]='2' # 只显示 warning 和 Error</code></pre><h4 id="2-彻底解决，换成支持cpu用AVX2编译的TensorFlow版本。"><a href="#2-彻底解决，换成支持cpu用AVX2编译的TensorFlow版本。" class="headerlink" title="2.彻底解决，换成支持cpu用AVX2编译的TensorFlow版本。"></a>2.彻底解决，换成支持cpu用AVX2编译的TensorFlow版本。</h4><p>首先卸载原来安装的tensorflow版本<br><code>pip uninstall tensorflow</code><br>在这里下载对应版本的tensorflow：<a href="https://github.com/fo40225/tensorflow-windows-wheel" target="_blank" rel="noopener">https://github.com/fo40225/tensorflow-windows-wheel</a>，比如我需要的是CPU+AVX2+Python3.6，那么我就在下面的列表中选择这个：<br><img src="https://img-blog.csdnimg.cn/20200712220316853.png" alt="在这里插入图片描述"></p><table><thead><tr><th>Path</th><th>Compiler</th><th>CUDA/cuDNN</th><th>SIMD</th><th>Notes</th></tr></thead><tbody><tr><td>2.2.0\py37\CPU+GPU\cuda102cudnn76sse2</td><td>VS2019 16.5</td><td>10.2.89_441.22/7.6.5.32</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>2.2.0\py37\CPU+GPU\cuda102cudnn76avx2</td><td>VS2019 16.5</td><td>10.2.89_441.22/7.6.5.32</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>2.1.0\py37\CPU+GPU\cuda102cudnn76sse2</td><td>VS2019 16.4</td><td>10.2.89_441.22/7.6.5.32</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>2.1.0\py37\CPU+GPU\cuda102cudnn76avx2</td><td>VS2019 16.4</td><td>10.2.89_441.22/7.6.5.32</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>2.0.0\py37\CPU\sse2</td><td>VS2019 16.3</td><td>No</td><td>x86_64</td><td>Python 3.7</td></tr><tr><td>2.0.0\py37\CPU\avx2</td><td>VS2019 16.3</td><td>No</td><td>AVX2</td><td>Python 3.7</td></tr><tr><td>2.0.0\py37\GPU\cuda101cudnn76sse2</td><td>VS2019 16.3</td><td>10.1.243_426.00/7.6.4.38</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>2.0.0\py37\GPU\cuda101cudnn76avx2</td><td>VS2019 16.3</td><td>10.1.243_426.00/7.6.4.38</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.15.0\py37\CPU+GPU\cuda101cudnn76sse2</td><td>VS2019 16.3</td><td>10.1.243_426.00/7.6.4.38</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>1.15.0\py37\CPU+GPU\cuda101cudnn76avx2</td><td>VS2019 16.3</td><td>10.1.243_426.00/7.6.4.38</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.14.0\py37\CPU\sse2</td><td>VS2019 16.1</td><td>No</td><td>x86_64</td><td>Python 3.7</td></tr><tr><td>1.14.0\py37\CPU\avx2</td><td>VS2019 16.1</td><td>No</td><td>AVX2</td><td>Python 3.7</td></tr><tr><td>1.14.0\py37\GPU\cuda101cudnn76sse2</td><td>VS2019 16.1</td><td>10.1.168_425.25/7.6.0.64</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>1.14.0\py37\GPU\cuda101cudnn76avx2</td><td>VS2019 16.1</td><td>10.1.168_425.25/7.6.0.64</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.13.1\py37\CPU\sse2</td><td>VS2017 15.9</td><td>No</td><td>x86_64</td><td>Python 3.7</td></tr><tr><td>1.13.1\py37\CPU\avx2</td><td>VS2017 15.9</td><td>No</td><td>AVX2</td><td>Python 3.7</td></tr><tr><td>1.13.1\py37\GPU\cuda101cudnn75sse2</td><td>VS2017 15.9</td><td>10.1.105_418.96/7.5.0.56</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>1.13.1\py37\GPU\cuda101cudnn75avx2</td><td>VS2017 15.9</td><td>10.1.105_418.96/7.5.0.56</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.12.0\py36\CPU\sse2</td><td>VS2017 15.8</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.12.0\py36\CPU\avx2</td><td>VS2017 15.8</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.12.0\py36\GPU\cuda100cudnn73sse2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.1.20</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.12.0\py36\GPU\cuda100cudnn73avx2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.1.20</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.12.0\py37\CPU\sse2</td><td>VS2017 15.8</td><td>No</td><td>x86_64</td><td>Python 3.7</td></tr><tr><td>1.12.0\py37\CPU\avx2</td><td>VS2017 15.8</td><td>No</td><td>AVX2</td><td>Python 3.7</td></tr><tr><td>1.12.0\py37\GPU\cuda100cudnn73sse2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.1.20</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>1.12.0\py37\GPU\cuda100cudnn73avx2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.1.20</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.11.0\py36\CPU\sse2</td><td>VS2017 15.8</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.11.0\py36\CPU\avx2</td><td>VS2017 15.8</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.11.0\py36\GPU\cuda100cudnn73sse2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.0.29</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.11.0\py36\GPU\cuda100cudnn73avx2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.0.29</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.11.0\py37\CPU\sse2</td><td>VS2017 15.8</td><td>No</td><td>x86_64</td><td>Python 3.7</td></tr><tr><td>1.11.0\py37\CPU\avx2</td><td>VS2017 15.8</td><td>No</td><td>AVX2</td><td>Python 3.7</td></tr><tr><td>1.11.0\py37\GPU\cuda100cudnn73sse2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.0.29</td><td>x86_64</td><td>Python 3.7/Compute 3.0</td></tr><tr><td>1.11.0\py37\GPU\cuda100cudnn73avx2</td><td>VS2017 15.8</td><td>10.0.130_411.31/7.3.0.29</td><td>AVX2</td><td>Python 3.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0,7.5</td></tr><tr><td>1.10.0\py36\CPU\sse2</td><td>VS2017 15.8</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.10.0\py36\CPU\avx2</td><td>VS2017 15.8</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.10.0\py36\GPU\cuda92cudnn72sse2</td><td>VS2017 15.8</td><td>9.2.148.1/7.2.1.38</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.10.0\py36\GPU\cuda92cudnn72avx2</td><td>VS2017 15.8</td><td>9.2.148.1/7.2.1.38</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.10.0\py27\CPU\sse2</td><td>VS2017 15.8</td><td>No</td><td>x86_64</td><td>Python 2.7</td></tr><tr><td>1.10.0\py27\CPU\avx2</td><td>VS2017 15.8</td><td>No</td><td>AVX2</td><td>Python 2.7</td></tr><tr><td>1.10.0\py27\GPU\cuda92cudnn72sse2</td><td>VS2017 15.8</td><td>9.2.148.1/7.2.1.38</td><td>x86_64</td><td>Python 2.7/Compute 3.0</td></tr><tr><td>1.10.0\py27\GPU\cuda92cudnn72avx2</td><td>VS2017 15.8</td><td>9.2.148.1/7.2.1.38</td><td>AVX2</td><td>Python 2.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.9.0\py36\CPU\sse2</td><td>VS2017 15.7</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.9.0\py36\CPU\avx2</td><td>VS2017 15.7</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.9.0\py36\GPU\cuda92cudnn71sse2</td><td>VS2017 15.7</td><td>9.2.148/7.1.4</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.9.0\py36\GPU\cuda92cudnn71avx2</td><td>VS2017 15.7</td><td>9.2.148/7.1.4</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.9.0\py27\CPU\sse2</td><td>VS2017 15.7</td><td>No</td><td>x86_64</td><td>Python 2.7</td></tr><tr><td>1.9.0\py27\CPU\avx2</td><td>VS2017 15.7</td><td>No</td><td>AVX2</td><td>Python 2.7</td></tr><tr><td>1.9.0\py27\GPU\cuda92cudnn71sse2</td><td>VS2017 15.7</td><td>9.2.148/7.1.4</td><td>x86_64</td><td>Python 2.7/Compute 3.0</td></tr><tr><td>1.9.0\py27\GPU\cuda92cudnn71avx2</td><td>VS2017 15.7</td><td>9.2.148/7.1.4</td><td>AVX2</td><td>Python 2.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.8.0\py36\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.8.0\py36\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.8.0\py36\GPU\cuda91cudnn71sse2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.3</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.8.0\py36\GPU\cuda91cudnn71avx2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.3</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.8.0\py27\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 2.7</td></tr><tr><td>1.8.0\py27\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 2.7</td></tr><tr><td>1.8.0\py27\GPU\cuda91cudnn71sse2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.3</td><td>x86_64</td><td>Python 2.7/Compute 3.0</td></tr><tr><td>1.8.0\py27\GPU\cuda91cudnn71avx2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.3</td><td>AVX2</td><td>Python 2.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.7.0\py36\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.7.0\py36\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.7.0\py36\GPU\cuda91cudnn71sse2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.2</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.7.0\py36\GPU\cuda91cudnn71avx2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.2</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.7.0\py27\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 2.7</td></tr><tr><td>1.7.0\py27\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 2.7</td></tr><tr><td>1.7.0\py27\GPU\cuda91cudnn71sse2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.2</td><td>x86_64</td><td>Python 2.7/Compute 3.0</td></tr><tr><td>1.7.0\py27\GPU\cuda91cudnn71avx2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.2</td><td>AVX2</td><td>Python 2.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.6.0\py36\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.6.0\py36\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.6.0\py36\GPU\cuda91cudnn71sse2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.1</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.6.0\py36\GPU\cuda91cudnn71avx2</td><td>VS2017 15.4</td><td>9.1.85.3/7.1.1</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.6.0\py27\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 2.7</td></tr><tr><td>1.6.0\py27\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 2.7</td></tr><tr><td>1.6.0\py27\GPU\cuda91cudnn71sse2</td><td>VS2017 15.4</td><td>9.1.85.2/7.1.1</td><td>x86_64</td><td>Python 2.7/Compute 3.0</td></tr><tr><td>1.6.0\py27\GPU\cuda91cudnn71avx2</td><td>VS2017 15.4</td><td>9.1.85.2/7.1.1</td><td>AVX2</td><td>Python 2.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.5.0\py36\CPU\avx</td><td>VS2017 15.4</td><td>No</td><td>AVX</td><td>Python 3.6</td></tr><tr><td>1.5.0\py36\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.5.0\py36\GPU\cuda91cudnn7avx2</td><td>VS2017 15.4</td><td>9.1.85/7.0.5</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.5.0\py27\CPU\sse2</td><td>VS2017 15.4</td><td>No</td><td>x86_64</td><td>Python 2.7</td></tr><tr><td>1.5.0\py27\CPU\avx</td><td>VS2017 15.4</td><td>No</td><td>AVX</td><td>Python 2.7</td></tr><tr><td>1.5.0\py27\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 2.7</td></tr><tr><td>1.5.0\py27\GPU\cuda91cudnn7sse2</td><td>VS2017 15.4</td><td>9.1.85/7.0.5</td><td>x86_64</td><td>Python 2.7/Compute 3.0</td></tr><tr><td>1.5.0\py27\GPU\cuda91cudnn7avx2</td><td>VS2017 15.4</td><td>9.1.85/7.0.5</td><td>AVX2</td><td>Python 2.7/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.4.0\py36\CPU\avx</td><td>VS2017 15.4</td><td>No</td><td>AVX</td><td>Python 3.6</td></tr><tr><td>1.4.0\py36\CPU\avx2</td><td>VS2017 15.4</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.4.0\py36\GPU\cuda91cudnn7avx2</td><td>VS2017 15.4</td><td>9.1.85/7.0.5</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1,7.0</td></tr><tr><td>1.3.0\py36\CPU\avx</td><td>VS2015 Update 3</td><td>No</td><td>AVX</td><td>Python 3.6</td></tr><tr><td>1.3.0\py36\CPU\avx2</td><td>VS2015 Update 3</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.3.0\py36\GPU\cuda8cudnn6avx2</td><td>VS2015 Update 3</td><td>8.0.61.2/6.0.21</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1</td></tr><tr><td>1.2.1\py36\CPU\avx</td><td>VS2015 Update 3</td><td>No</td><td>AVX</td><td>Python 3.6</td></tr><tr><td>1.2.1\py36\CPU\avx2</td><td>VS2015 Update 3</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.2.1\py36\GPU\cuda8cudnn6avx2</td><td>VS2015 Update 3</td><td>8.0.61.2/6.0.21</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1</td></tr><tr><td>1.1.0\py36\CPU\avx</td><td>VS2015 Update 3</td><td>No</td><td>AVX</td><td>Python 3.6</td></tr><tr><td>1.1.0\py36\CPU\avx2</td><td>VS2015 Update 3</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.1.0\py36\GPU\cuda8cudnn6avx2</td><td>VS2015 Update 3</td><td>8.0.61.2/6.0.21</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1</td></tr><tr><td>1.0.0\py36\CPU\sse2</td><td>VS2015 Update 3</td><td>No</td><td>x86_64</td><td>Python 3.6</td></tr><tr><td>1.0.0\py36\CPU\avx</td><td>VS2015 Update 3</td><td>No</td><td>AVX</td><td>Python 3.6</td></tr><tr><td>1.0.0\py36\CPU\avx2</td><td>VS2015 Update 3</td><td>No</td><td>AVX2</td><td>Python 3.6</td></tr><tr><td>1.0.0\py36\GPU\cuda8cudnn51sse2</td><td>VS2015 Update 3</td><td>8.0.61.2/5.1.10</td><td>x86_64</td><td>Python 3.6/Compute 3.0</td></tr><tr><td>1.0.0\py36\GPU\cuda8cudnn51avx2</td><td>VS2015 Update 3</td><td>8.0.61.2/5.1.10</td><td>AVX2</td><td>Python 3.6/Compute 3.0,3.5,5.0,5.2,6.1</td></tr><tr><td>0.12.0\py35\CPU\avx</td><td>VS2015 Update 3</td><td>No</td><td>AVX</td><td>Python 3.5</td></tr><tr><td>0.12.0\py35\CPU\avx2</td><td>VS2015 Update 3</td><td>No</td><td>AVX2</td><td>Python 3.5</td></tr><tr><td>0.12.0\py35\GPU\cuda8cudnn51avx2</td><td>VS2015 Update 3</td><td>8.0.61.2/5.1.10</td><td>AVX2</td><td>Python 3.5/Compute 3.0,3.5,5.0,5.2,6.1</td></tr></tbody></table><p>找到对应的.whl文件<br><img src="https://img-blog.csdnimg.cn/20200712220439134.png" alt="在这里插入图片描述"><br>下载该文件，我用google浏览器下载一直显示无法访问<br><img src="https://img-blog.csdnimg.cn/20200712220536927.png" alt="在这里插入图片描述"><br>后来选用Edge浏览器打开就好啦，直接就下载成功了。<br>此处放上<strong>tensorflow-1.12.0-cp36-cp36m-win_amd64.whl</strong>的下载链接：<br>链接：<a href="https://pan.baidu.com/s/1CvKUtmM1zHyJyJk87eFEUA" target="_blank" rel="noopener">https://pan.baidu.com/s/1CvKUtmM1zHyJyJk87eFEUA</a><br>提取码：o85f<br>然后用activate 进入自己创建的虚拟环境<br><img src="https://img-blog.csdnimg.cn/20200712220832684.png" alt="在这里插入图片描述"><br>运行<code>pip install tensorflow-1.12.0-cp36-cp36m-win_amd64.whl</code>命令安装<br><img src="https://img-blog.csdnimg.cn/20200712221831560.png" alt="在这里插入图片描述"><br>最后用<code>conda list</code>命令看安装了那些包<br><img src="https://img-blog.csdnimg.cn/20200712221924711.png" alt="在这里插入图片描述"><br>然后再次运行代码，就不会报AVX2的错误啦<br><img src="https://img-blog.csdnimg.cn/20200712230627530.png" alt="在这里插入图片描述"></p><ul><li>参考链接：<a href="https://blog.csdn.net/beyond9305/article/details/95896135" target="_blank" rel="noopener">https://blog.csdn.net/beyond9305/article/details/95896135</a></li><li><a href="https://www.jb51.net/article/179405.htm" target="_blank" rel="noopener">https://www.jb51.net/article/179405.htm</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> tensorflow AVX2 pycharm 指令集加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Classification分类器|机器学习实战-基于Scikit-Learn和TensorFlow</title>
      <link href="/posts/f8eb.html"/>
      <url>/posts/f8eb.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>Classification</strong></p><h2 id="监督学习任务（分类）"><a href="#监督学习任务（分类）" class="headerlink" title="监督学习任务（分类）"></a>监督学习任务（分类）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># To support both python 2 and python 3</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token punctuation">,</span> print_function<span class="token punctuation">,</span> unicode_literals<span class="token comment" spellcheck="true"># Common imports</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># to make this notebook's output stable across runs</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># To plot pretty figures</span><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.labelsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'xtick.labelsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'ytick.labelsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token comment" spellcheck="true"># Where to save the figures</span>PROJECT_ROOT_DIR <span class="token operator">=</span> <span class="token string">"."</span>CHAPTER_ID <span class="token operator">=</span> <span class="token string">"classification"</span><span class="token keyword">def</span> <span class="token function">save_fig</span><span class="token punctuation">(</span>fig_id<span class="token punctuation">,</span> tight_layout<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>PROJECT_ROOT_DIR<span class="token punctuation">,</span> <span class="token string">"images"</span><span class="token punctuation">,</span> CHAPTER_ID<span class="token punctuation">,</span> fig_id <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Saving figure"</span><span class="token punctuation">,</span> fig_id<span class="token punctuation">)</span>    <span class="token keyword">if</span> tight_layout<span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>path<span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'png'</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span></code></pre><h1 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> fetch_openmlmnist <span class="token operator">=</span> fetch_openml<span class="token punctuation">(</span><span class="token string">'mnist_784'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获得mnist数据集</span>mnist</code></pre><pre><code>{'data': array([[0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        ...,        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.]]), 'target': array(['5', '0', '4', ..., '4', '5', '6'], dtype=object), 'frame': None, 'categories': {},</code></pre><pre class=" language-python"><code class="language-python">X<span class="token punctuation">,</span> y <span class="token operator">=</span> mnist<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mnist<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#共70000张图片，每张图片有784个特征，28x28像素，每个特征代表一个像素点的强度</span>X<span class="token punctuation">.</span>shape<span class="token comment" spellcheck="true">#查看各个维度的维数</span></code></pre><pre><code>(70000, 784)</code></pre><pre class=" language-python"><code class="language-python">y<span class="token punctuation">.</span>shape</code></pre><pre><code>(70000,)</code></pre><pre class=" language-python"><code class="language-python"><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span></code></pre><pre><code>784</code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#先来看看数据集中的一个数字， 你只需要随手抓取一个实例的特征向量，将其重新形成一个28×28数组，然后使用Matplotlib的</span><span class="token comment" spellcheck="true">#imshow（）函数将其显示出来：</span>some_digit <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token number">36000</span><span class="token punctuation">]</span>some_digit_image <span class="token operator">=</span> some_digit<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>some_digit_image<span class="token punctuation">,</span> cmap <span class="token operator">=</span> matplotlib<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>binary<span class="token punctuation">,</span>           interpolation<span class="token operator">=</span><span class="token string">"nearest"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"some_digit_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure some_digit_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/2020071208521182.png" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_digit</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    image <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cmap <span class="token operator">=</span> matplotlib<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>binary<span class="token punctuation">,</span>               interpolation<span class="token operator">=</span><span class="token string">"nearest"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># EXTRA</span><span class="token keyword">def</span> <span class="token function">plot_digits</span><span class="token punctuation">(</span>instances<span class="token punctuation">,</span> images_per_row<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> <span class="token number">28</span>    images_per_row <span class="token operator">=</span> min<span class="token punctuation">(</span>len<span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">,</span> images_per_row<span class="token punctuation">)</span>    images <span class="token operator">=</span> <span class="token punctuation">[</span>instance<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>size<span class="token punctuation">,</span>size<span class="token punctuation">)</span> <span class="token keyword">for</span> instance <span class="token keyword">in</span> instances<span class="token punctuation">]</span>    n_rows <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>instances<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> images_per_row <span class="token operator">+</span> <span class="token number">1</span>    row_images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    n_empty <span class="token operator">=</span> n_rows <span class="token operator">*</span> images_per_row <span class="token operator">-</span> len<span class="token punctuation">(</span>instances<span class="token punctuation">)</span>    images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size <span class="token operator">*</span> n_empty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_rows<span class="token punctuation">)</span><span class="token punctuation">:</span>        rimages <span class="token operator">=</span> images<span class="token punctuation">[</span>row <span class="token operator">*</span> images_per_row <span class="token punctuation">:</span> <span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> images_per_row<span class="token punctuation">]</span>        row_images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>rimages<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>row_images<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cmap <span class="token operator">=</span> matplotlib<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>binary<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>example_images <span class="token operator">=</span> np<span class="token punctuation">.</span>r_<span class="token punctuation">[</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">12000</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">13000</span><span class="token punctuation">:</span><span class="token number">30600</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">30600</span><span class="token punctuation">:</span><span class="token number">60000</span><span class="token punctuation">:</span><span class="token number">590</span><span class="token punctuation">]</span><span class="token punctuation">]</span>plot_digits<span class="token punctuation">(</span>example_images<span class="token punctuation">,</span> images_per_row<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"more_digits_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure more_digits_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712090509325.png" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">y<span class="token punctuation">[</span><span class="token number">36000</span><span class="token punctuation">]</span></code></pre><pre><code>'9'</code></pre><pre class=" language-python"><code class="language-python">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">60000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">60000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">60000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token number">60000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建一个测试集，分成训练集</span><span class="token comment" spellcheck="true">#（前6万张图像）和测试集（最后1万张图像）</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npshuffle_index <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span>X_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> X_train<span class="token punctuation">[</span>shuffle_index<span class="token punctuation">]</span><span class="token punctuation">,</span> y_train<span class="token punctuation">[</span>shuffle_index<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>(60000, 784)</code></pre><h1 id="Binary-classifier二分类"><a href="#Binary-classifier二分类" class="headerlink" title="Binary classifier二分类"></a>Binary classifier二分类</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#训练一个二元分类器</span>y_train <span class="token operator">=</span> y_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将充满false的数组强制转换为int8</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_train_5<span class="token punctuation">)</span>y_train_5 <span class="token operator">=</span> <span class="token punctuation">(</span>y_train <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>y_test_5 <span class="token operator">=</span> <span class="token punctuation">(</span>y_test <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><pre><code>[False False  True ... False False False]</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> SGDClassifier<span class="token comment" spellcheck="true">#挑选一个分类器并开始训练，SGDClassifier在训练时是完全随机的。</span>sgd_clf <span class="token operator">=</span> SGDClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>sgd_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">)</span></code></pre><pre><code>SGDClassifier(random_state=42)</code></pre><pre class=" language-python"><code class="language-python">sgd_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>array([False])</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#交叉验证是评估模型的好办法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score<span class="token comment" spellcheck="true">##用cross_val_score（） 函数来评估SGDClassifier模型， 采用K-fold交叉验证法， 3个折叠。</span><span class="token comment" spellcheck="true">#K-fold交叉验证的意思是将训练集分解成K个折叠（在本例中， 为3折） ， 然后每次留其中1个折叠进行预测， 剩余的折叠用来训练</span>cross_val_score<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span></code></pre><pre><code>array([0.9334, 0.9644, 0.9568])</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> StratifiedKFold<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>base <span class="token keyword">import</span> cloneskfolds <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token keyword">for</span> train_index<span class="token punctuation">,</span> test_index <span class="token keyword">in</span> skfolds<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">)</span><span class="token punctuation">:</span>    clone_clf <span class="token operator">=</span> clone<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">)</span>    X_train_folds <span class="token operator">=</span> X_train<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>    y_train_folds <span class="token operator">=</span> <span class="token punctuation">(</span>y_train_5<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    X_test_fold <span class="token operator">=</span> X_train<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>    y_test_fold <span class="token operator">=</span> <span class="token punctuation">(</span>y_train_5<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    clone_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_folds<span class="token punctuation">,</span> y_train_folds<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> clone_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test_fold<span class="token punctuation">)</span>    n_correct <span class="token operator">=</span> sum<span class="token punctuation">(</span>y_pred <span class="token operator">==</span> y_test_fold<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n_correct <span class="token operator">/</span> len<span class="token punctuation">(</span>y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>D:\Anaconda3\envs\learn\lib\site-packages\sklearn\model_selection\_split.py:297: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.  FutureWarning0.93340.96440.9568</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseEstimator<span class="token keyword">class</span> <span class="token class-name">Never5Classifier</span><span class="token punctuation">(</span>BaseEstimator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>bool<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">never_5_clf <span class="token operator">=</span> Never5Classifier<span class="token punctuation">(</span><span class="token punctuation">)</span>cross_val_score<span class="token punctuation">(</span>never_5_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#准确率超过90%，这是因为只有大约10%的图像是数字9，所以如果你猜一张图不是9， 90%的时间你都是正确的</span><span class="token comment" spellcheck="true">#说明准确率通常无法成为分类器的首要性能指标</span></code></pre><pre><code>array([0.90855, 0.9093 , 0.9111 ])</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_predicty_train_pred <span class="token operator">=</span> cross_val_predict<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrixconfusion_matrix<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span></code></pre><pre><code>array([[53124,  1455],       [ 949,  4472]], dtype=int64)</code></pre><pre class=" language-python"><code class="language-python">y_train_perfect_predictions <span class="token operator">=</span> y_train_5<span class="token triple-quoted-string string">'''混淆矩阵中的行表示实际类别， 列表示预测类别。 本例中第一行表示所有“非5”（负类） 的图片中： 53065张被正确地分为“非5”类别（真负类） ， 1455张被错误地分类成了“5”（假正类） ； 第二行表示所有“5”（正类） 的图片中： 949张被错误地分为“非5”类别（假负类） ， 4472张被正确地分在了“5”这一类别（真正类） 。 一个完美的分类器只有真正类和真负类， 所以它的混淆矩阵只会在其对角线（左上到右下） 上有非零值：'''</span></code></pre><pre class=" language-python"><code class="language-python">confusion_matrix<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_perfect_predictions<span class="token punctuation">)</span></code></pre><pre><code>array([[54579,     0],       [    0,  5421]], dtype=int64)</code></pre><p><strong>正类预测的准确度也可称为分类器的精度</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20200712101652169.png" alt="在这里插入图片描述"><br><strong>TP是真正类的数量， FP是假正类的数量。</strong></p></blockquote><blockquote><p>精度通常与另一个指标一起使用，这个指标就是召回率（recall），也称为灵敏度（sensitivity）或者真正类率（TPR）：它是分类器正确检测到的正类实例的比率<br><img src="https://img-blog.csdnimg.cn/20200712102437447.png" alt="在这里插入图片描述"></p></blockquote><p>FN是假负类的数量。</p><blockquote><p>图解混淆矩阵<img src="https://img-blog.csdnimg.cn/20200712102620453.png" alt="在这里插入图片描述"></p></blockquote><h5 id="精度和召回率"><a href="#精度和召回率" class="headerlink" title="精度和召回率"></a>精度和召回率</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> precision_score<span class="token punctuation">,</span> recall_scoreprecision_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#TP/(TP+FP)    4472/ (4472+ 1455)</span><span class="token comment" spellcheck="true">#array([[53124,  1455],     TN   FP</span> <span class="token comment" spellcheck="true">#          [ 949,  4472]]   FN    TP</span></code></pre><pre><code>0.754513244474439</code></pre><pre class=" language-python"><code class="language-python">recall_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#TP/(TP+FN)  4472/(4472+949)</span></code></pre><pre><code>0.8249400479616307</code></pre><p>因此我们可以很方便地将精度和召回率组合成一个单一的指标，称为F1分数。 当你需要一个简单的方法来比较两种分类器时， 这是个非常不错的指标。 F1分数是精度和召回率的谐波平均值 。 正常的平均值平等对待所有的值， 而谐波平均值会给予较低的值更高的权重。 因此， 只有当召回率和精度都很高时， 分类器才能得到较高的F1分数</p><blockquote><p>F1分数<br><img src="https://img-blog.csdnimg.cn/20200712104926562.png" alt="在这里插入图片描述"></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> f1_scoref1_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4472/ (4472+ (949+ 1455)/2)</span></code></pre><pre><code>0.7881565033486078</code></pre><pre class=" language-python"><code class="language-python"><span class="token number">4472</span><span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">4472</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">949</span><span class="token operator">+</span> <span class="token number">1455</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><pre><code>0.7881565033486078</code></pre><h4 id="精度-召回率权衡"><a href="#精度-召回率权衡" class="headerlink" title="精度/召回率权衡"></a>精度/召回率权衡</h4><p>Scikit-Learn不允许直接设置阈值，但是可以访问它用于预测的决策分数。不是调用分类器的predict（）方法，而是调用decision_function（）方法，这个方法返回每个实例的分数，然后就可以根据这些分数，使用任意阈值进行预测了：</p><pre class=" language-python"><code class="language-python">y_scores <span class="token operator">=</span> sgd_clf<span class="token punctuation">.</span>decision_function<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span>y_scores</code></pre><pre><code>array([ 161855.74572176])</code></pre><pre class=" language-python"><code class="language-python">threshold <span class="token operator">=</span> <span class="token number">0</span>y_some_digit_pred <span class="token operator">=</span> <span class="token punctuation">(</span>y_scores <span class="token operator">></span> threshold<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">y_some_digit_pred</code></pre><p>   array([ True], dtype=bool)<br>SGDClassifier分类器使用的阈值是0， 所以前面的代码返回结果<br>与predict（） 方法一样（也就是True） 。 我们来试试提升阈值：</p><pre class=" language-python"><code class="language-python">threshold <span class="token operator">=</span> <span class="token number">200000</span>y_some_digit_pred <span class="token operator">=</span> <span class="token punctuation">(</span>y_scores <span class="token operator">></span> threshold<span class="token punctuation">)</span>y_some_digit_pred</code></pre><pre><code>array([False], dtype=bool)</code></pre><p>这证明了提高阈值确实可以降低召回率。 这张图确实是5， 当阈值为0时， 分类器可以检测到该图， 但是当阈值提高到200000时， 就错过了这张图。</p><ul><li>那么要如何决定使用什么阈值呢？ 首先， 使用cross_val_predict（） 函数获取训练集中所有实例的分数， 但是这次需要它返回的是决策分数而不是预测结果：<pre class=" language-python"><code class="language-python">y_scores <span class="token operator">=</span> cross_val_predict<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                           method<span class="token operator">=</span><span class="token string">"decision_function"</span><span class="token punctuation">)</span></code></pre></li></ul><p>Note: there is an <a href="https://github.com/scikit-learn/scikit-learn/issues/9589" target="_blank" rel="noopener">issue</a> introduced in Scikit-Learn 0.19.0 where the result of <code>cross_val_predict()</code> is incorrect in the binary classification case when using <code>method="decision_function"</code>, as in the code above. The resulting array has an extra first dimension full of 0s. We need to add this small hack for now to work around this issue:</p><pre class=" language-python"><code class="language-python">y_scores<span class="token punctuation">.</span>shape</code></pre><pre><code>(60000, 2)</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># hack to work around issue #9589 introduced in Scikit-Learn 0.19.0</span><span class="token keyword">if</span> y_scores<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    y_scores <span class="token operator">=</span> y_scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>有了这些分数， 可以使用precision_recall_curve（） 函数来计算<br>所有可能的阈值的精度和召回率：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> precision_recall_curveprecisions<span class="token punctuation">,</span> recalls<span class="token punctuation">,</span> thresholds <span class="token operator">=</span> precision_recall_curve<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_scores<span class="token punctuation">)</span></code></pre><p>最后， 使用Matplotlib绘制精度和召回率相对于阈值的函数图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_precision_recall_vs_threshold</span><span class="token punctuation">(</span>precisions<span class="token punctuation">,</span> recalls<span class="token punctuation">,</span> thresholds<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>thresholds<span class="token punctuation">,</span> precisions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"b--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Precision"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>thresholds<span class="token punctuation">,</span> recalls<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"g-"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Recall"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Threshold"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"upper left"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plot_precision_recall_vs_threshold<span class="token punctuation">(</span>precisions<span class="token punctuation">,</span> recalls<span class="token punctuation">,</span> thresholds<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">700000</span><span class="token punctuation">,</span> <span class="token number">700000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"precision_recall_vs_threshold_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure precision_recall_vs_threshold_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712114715852.png" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span>y_train_pred <span class="token operator">==</span> <span class="token punctuation">(</span>y_scores <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>True</code></pre><pre class=" language-python"><code class="language-python">y_train_pred_90 <span class="token operator">=</span> <span class="token punctuation">(</span>y_scores <span class="token operator">></span> <span class="token number">70000</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">precision_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred_90<span class="token punctuation">)</span></code></pre><pre><code>0.86592051164915484</code></pre><pre class=" language-python"><code class="language-python">recall_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred_90<span class="token punctuation">)</span></code></pre><pre><code>0.69931746910164172</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_precision_vs_recall</span><span class="token punctuation">(</span>precisions<span class="token punctuation">,</span> recalls<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>recalls<span class="token punctuation">,</span> precisions<span class="token punctuation">,</span> <span class="token string">"b-"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Recall"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Precision"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plot_precision_vs_recall<span class="token punctuation">(</span>precisions<span class="token punctuation">,</span> recalls<span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"precision_vs_recall_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure precision_vs_recall_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712141839897.png" alt="在这里插入图片描述"></p><h1 id="ROC-曲线"><a href="#ROC-曲线" class="headerlink" title="ROC 曲线"></a>ROC 曲线</h1><p>ROC叫受试者工作特征曲线。它与精度/召回率曲线非常相似，但绘制的不<br>是精度和召回率，而是真正类率（召回率的另一名称）和假正类率（<code>FPR</code>）。 FPR是被错误分为正类的负类实例比率。它等于1减去真负类率<code>（TNR）</code>，后者是被正确分类为负类的负类实例比率，也称为特异度。因此， ROC曲线绘制的是灵敏度和（1-<code>特异度</code>）的关系。</p><pre><code>要绘制ROC曲线，首先需要使用roc_curve（）函数计算多种阈值的TPR和FPR：</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> roc_curvefpr<span class="token punctuation">,</span> tpr<span class="token punctuation">,</span> thresholds <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_scores<span class="token punctuation">)</span></code></pre><pre><code>然后，使用Matplotlib绘制FPR对TPR的曲线。</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_roc_curve</span><span class="token punctuation">(</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">,</span> label<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'False Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'True Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plot_roc_curve<span class="token punctuation">(</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"roc_curve_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure roc_curve_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712142233693.png" alt="在这里插入图片描述"><br><strong>召回率（TPR） 越高， 分类器产生的假正类（FPR） 就越多。 虚线表示纯随机分类器的ROC曲线；一个优秀的分类器应该离这条线越远越好（向左上角） 。</strong></p><hr><p>　　<br>　　有一种比较分类器的方法是测量曲线下面积（AUC） 。 完美的分类器的ROC AUC等于1， 而纯随机分类器的ROC AUC等于0.5。Scikit-Learn提供计算ROC AUC的函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> roc_auc_scoreroc_auc_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_scores<span class="token punctuation">)</span></code></pre><pre><code>0.96244965559671547</code></pre><p>由于ROC曲线与精度/召回率（或PR） 曲线非常相似，有时候我们会选择使用哪种曲线，有一个经验法则是， 当正类非常少见或者你更关注假正类而不是假负类时， 你应该选择PR曲线， 反之则是ROC曲线。PR曲线可以暗示分类器还有改进的空间（曲线更接近右上角）。</p><p><strong>下面训练一个RandomForestClassifier分类器，并比较它和SGDClassifier分类器的ROC曲线和ROC AUC分数。</strong>    </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifierforest_clf <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>y_probas_forest <span class="token operator">=</span> cross_val_predict<span class="token punctuation">(</span>forest_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                                    method<span class="token operator">=</span><span class="token string">"predict_proba"</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">y_scores_forest <span class="token operator">=</span> y_probas_forest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># score = proba of positive class</span>fpr_forest<span class="token punctuation">,</span> tpr_forest<span class="token punctuation">,</span> thresholds_forest <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span>y_scores_forest<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">,</span> <span class="token string">"b:"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"SGD"</span><span class="token punctuation">)</span>plot_roc_curve<span class="token punctuation">(</span>fpr_forest<span class="token punctuation">,</span> tpr_forest<span class="token punctuation">,</span> <span class="token string">"Random Forest"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"lower right"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"roc_curve_comparison_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure roc_curve_comparison_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712144550778.png" alt="在这里插入图片描述"><br>如上图所示， RandomForestClassifier的ROC曲线看起来比SGDClassifier好很多： 它离左上角更接近。 因此它的ROC AUC分数也高得多：</p><pre class=" language-python"><code class="language-python">roc_auc_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_scores_forest<span class="token punctuation">)</span></code></pre><pre><code>0.99312433660038291</code></pre><pre class=" language-python"><code class="language-python">y_train_pred_forest <span class="token operator">=</span> cross_val_predict<span class="token punctuation">(</span>forest_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train_5<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>precision_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred_forest<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#精度</span></code></pre><pre><code>0.98529734474434938</code></pre><pre class=" language-python"><code class="language-python">recall_score<span class="token punctuation">(</span>y_train_5<span class="token punctuation">,</span> y_train_pred_forest<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#召回率</span></code></pre><pre><code>0.82826046854823832再测一测精度和召回率的分数： 98.5%的精度和82.8%的召回率， 也还不错！</code></pre><h1 id="Multiclass-classification多类别分类器"><a href="#Multiclass-classification多类别分类器" class="headerlink" title="Multiclass classification多类别分类器"></a>Multiclass classification多类别分类器</h1><p>二元分类器在两个类别中区分，而多类别分类器（也称为多项分类器）可以区分两个以上的类别。</p><p>Scikit-Learn可以检测到你尝试使用二元分类算法进行多类别分类任务，它会自动运行OvA（SVM分类器除外，它会使用OvO）。我们用SGDClassifier试试：</p><pre class=" language-python"><code class="language-python">sgd_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>sgd_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>array([ 5.])</code></pre><p>可以调用decision_function（ ） 方法，Scikit-Learns实际上训练了10个二元分类器，获得它们对图片的决策分数， 然后选择了分数最高的类别。</p><pre class=" language-python"><code class="language-python">some_digit_scores <span class="token operator">=</span> sgd_clf<span class="token punctuation">.</span>decision_function<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span>some_digit_scores</code></pre><pre><code>array([[-311402.62954431, -363517.28355739, -446449.5306454 ,        -183226.61023518, -414337.15339485,  161855.74572176,        -452576.39616343, -471957.14962573, -518542.33997148,        -536774.63961222]])</code></pre><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>some_digit_scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最好分是对应数字5这个类别</span></code></pre><pre><code>5</code></pre><pre class=" language-python"><code class="language-python">sgd_clf<span class="token punctuation">.</span>classes_</code></pre><pre><code>array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])</code></pre><pre class=" language-python"><code class="language-python">sgd_clf<span class="token punctuation">.</span>classes_<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#当训练分类器时， 目标类别的列表会存储在classes_这个属性中， 按值的大小排序。</span></code></pre><pre><code>5.0</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>multiclass <span class="token keyword">import</span> OneVsOneClassifierovo_clf <span class="token operator">=</span> OneVsOneClassifier<span class="token punctuation">(</span>SGDClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ovo_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>ovo_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>array([ 5.])</code></pre><pre class=" language-python"><code class="language-python">len<span class="token punctuation">(</span>ovo_clf<span class="token punctuation">.</span>estimators_<span class="token punctuation">)</span></code></pre><pre><code>45</code></pre><pre class=" language-python"><code class="language-python">forest_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>forest_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>array([ 5.])</code></pre><pre class=" language-python"><code class="language-python">forest_clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>array([[ 0.1,  0. ,  0. ,  0.1,  0. ,  0.8,  0. ,  0. ,  0. ,  0. ]])</code></pre><pre class=" language-python"><code class="language-python">cross_val_score<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span></code></pre><pre><code>array([ 0.84063187,  0.84899245,  0.86652998])</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScalerscaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token punctuation">)</span>cross_val_score<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">,</span> X_train_scaled<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span></code></pre><pre><code>array([ 0.91011798,  0.90874544,  0.906636  ])</code></pre><h4 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h4><p>一般机器学习项目包含：探索数据准备的选项， 尝试多个模型， 列出最佳模型并用GridSearchCV对其超参数进行微调， 尽可能自动化。假设当前已经找到了一个由潜力的模型，现在想进一步微调参数。<br><strong>首先， 看看混淆矩阵。 就像之前做的， 使用cross_val_predict（）函数进行预测， 然后调用confusion_matrix（） 函数：</strong></p><pre class=" language-python"><code class="language-python">y_train_pred <span class="token operator">=</span> cross_val_predict<span class="token punctuation">(</span>sgd_clf<span class="token punctuation">,</span> X_train_scaled<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>conf_mx <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span>conf_mx</code></pre><pre><code>array([[5725,    3,   24,    9,   10,   49,   50,   10,   39,    4],       [   2, 6493,   43,   25,    7,   40,    5,   10,  109,    8],       [  51,   41, 5321,  104,   89,   26,   87,   60,  166,   13],       [  47,   46,  141, 5342,    1,  231,   40,   50,  141,   92],       [  19,   29,   41,   10, 5366,    9,   56,   37,   86,  189],       [  73,   45,   36,  193,   64, 4582,  111,   30,  193,   94],       [  29,   34,   44,    2,   42,   85, 5627,   10,   45,    0],       [  25,   24,   74,   32,   54,   12,    6, 5787,   15,  236],       [  52,  161,   73,  156,   10,  163,   61,   25, 5027,  123],       [  43,   35,   26,   92,  178,   28,    2,  223,   82, 5240]])</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_confusion_matrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""If you prefer color and a colorbar"""</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    cax <span class="token operator">=</span> ax<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>cax<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>conf_mx<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"confusion_matrix_plot"</span><span class="token punctuation">,</span> tight_layout<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure confusion_matrix_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712154942119.png" alt="在这里插入图片描述"><br>混淆矩阵看起来很不错，因为大多数图片都在主对角线上，这说明它们被正确分类。</p><p>让我们把焦点放在错误上。首先，你需要将混淆矩阵中的每个值除以相应类别中的图片数量，这样你比较的就是错误率而不是错误的绝对值（后者对图片数量较多的类别不公平）：</p><pre class=" language-python"><code class="language-python">row_sums <span class="token operator">=</span> conf_mx<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>norm_conf_mx <span class="token operator">=</span> conf_mx <span class="token operator">/</span> row_sums</code></pre><p>用0填充对角线，只保留错误，重新绘制结果：</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>fill_diagonal<span class="token punctuation">(</span>norm_conf_mx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>norm_conf_mx<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"confusion_matrix_errors_plot"</span><span class="token punctuation">,</span> tight_layout<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure confusion_matrix_errors_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712155723349.png" alt="在这里插入图片描述"><br>　　现在可以清晰地看到分类器产生的错误种类了。 记住， 每行代表实际类别， 而每列表示预测类别。 第8列和第9列整体看起来非常亮，说明有许多图片被错误地分类为数字8或数字9了。 同样， 类别8和类别9的行看起来也偏亮， 说明数字8和数字9经常会跟其他数字混淆。相反， 一些行很暗， 比如行1， 这意味着大多数数字1都被正确地分类（有一些与数字8弄混， 但仅此而已） 。 注意， 错误不是完全对称的， 比如， 数字5被错误分类为数字8的数量比数字8被错误分类为数字5的数量要更多。<br>　　分析混淆矩阵通常可以帮助你深入了解如何改进分类器。 通过上面那张图来看， 你的精力可以花在改进数字8和数字9的分类， 以及修正数字3和数字5的混淆上。</p><blockquote><p>分析单个的错误也可以为分类器提供洞察： 它在做什么？ 它为什<br>么失败？ 但这通常更加困难和耗时。 例如， 我们来看看数字3和数字5<br>的例子：</p></blockquote><pre class=" language-python"><code class="language-python">cl_a<span class="token punctuation">,</span> cl_b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span>X_aa <span class="token operator">=</span> X_train<span class="token punctuation">[</span><span class="token punctuation">(</span>y_train <span class="token operator">==</span> cl_a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_train_pred <span class="token operator">==</span> cl_a<span class="token punctuation">)</span><span class="token punctuation">]</span>X_ab <span class="token operator">=</span> X_train<span class="token punctuation">[</span><span class="token punctuation">(</span>y_train <span class="token operator">==</span> cl_a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_train_pred <span class="token operator">==</span> cl_b<span class="token punctuation">)</span><span class="token punctuation">]</span>X_ba <span class="token operator">=</span> X_train<span class="token punctuation">[</span><span class="token punctuation">(</span>y_train <span class="token operator">==</span> cl_b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_train_pred <span class="token operator">==</span> cl_a<span class="token punctuation">)</span><span class="token punctuation">]</span>X_bb <span class="token operator">=</span> X_train<span class="token punctuation">[</span><span class="token punctuation">(</span>y_train <span class="token operator">==</span> cl_b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_train_pred <span class="token operator">==</span> cl_b<span class="token punctuation">)</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plot_digits<span class="token punctuation">(</span>X_aa<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> images_per_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plot_digits<span class="token punctuation">(</span>X_ab<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> images_per_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plot_digits<span class="token punctuation">(</span>X_ba<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> images_per_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plot_digits<span class="token punctuation">(</span>X_bb<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> images_per_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"error_analysis_digits_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure error_analysis_digits_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712155734642.png" alt="在这里插入图片描述"><br>　　左侧的两个5×5矩阵显示了被分类为数字3的图片，右侧的两个5×5矩阵显示了被分类为数字5的图片。分类器弄错的数字（即左下方和右上方的矩阵）里，确实有一些写得非常糟糕，即便是人类也很难做出区分（例如，第8行第1列的数字5看起来真的很像数字3）。然而，对我们来说，大多数错误分类的图片看起来还是非常明显的错误，我们很难理解分类器为什么会弄错。 原因在于，我们使用的简单的SGDClassifier模型是一个线性模型。它所做的就是为每个像素分配一个各个类别的权重，当它看到新的图像时，将加权后的像素强度汇总，从而得到一个分数进行分类。而数字3和数字5只在一部分像素位上有区别，所以分类器很容易将其弄混。<br>数字3和数字5之间的主要区别是在于连接顶线和下方弧线的中间那段小线条的位置。如果你写的数字3将连接点略往左移，分类器就可能将其分类为数字5，反之亦然。换言之，这个分类器对图像移位和旋转非常敏感。因此，减少数字3和数字5混淆的方法之一，就是对<code>图片进行预处理</code>， 确保它们位于中心位置并且没有旋转。 这也同样有助于减少其他错误。</p><h1 id="Multilabel-classification多标签分类"><a href="#Multilabel-classification多标签分类" class="headerlink" title="Multilabel classification多标签分类"></a>Multilabel classification多标签分类</h1><p>　　<br>　　&nbsp; &nbsp; 到目前为止，每个实例都只会被分在一个类别里。而在某些情况下，你希望分类器为每个实例产出多个类别。例如，人脸识别的分类器：如果在一张照片里识别出多个人怎么办？当然，应该为识别出来的每个人都附上一个标签。假设分类器经过训练，已经可以识别出三张脸——爱丽丝、鲍勃和查理，那么当看到一张爱丽丝和查理的照片时，它应该输出[1， 0， 1]（意思是“是爱丽丝，不是鲍勃，是查理”）这种输出多个二元标签的分类系统称为多标签分类系统。<br>来看一个例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifiery_train_large <span class="token operator">=</span> <span class="token punctuation">(</span>y_train <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span>y_train_odd <span class="token operator">=</span> <span class="token punctuation">(</span>y_train <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>y_multilabel <span class="token operator">=</span> np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>y_train_large<span class="token punctuation">,</span> y_train_odd<span class="token punctuation">]</span>knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_multilabel<span class="token punctuation">)</span></code></pre><p>这段代码会创建一个y_multilabel数组，其中包含两个数字图片的目标标签：第一个表示数字是否是大数（7、 8、 9），第二个表示是否为奇数。下一行创建一个KNeighborsClassifier实例（它支持多标签分类，不是所有的分类器都支持），然后使用多个目标数组对它进行训练。现在用它做一个预测，注意它输出的两个标签：</p><pre><code>KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',           metric_params=None, n_jobs=1, n_neighbors=5, p=2,           weights='uniform')</code></pre><pre class=" language-python"><code class="language-python">knn_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>some_digit<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>array([[False,  True]], dtype=bool)</code></pre><p><strong>结果是正确的！数字5确实不大（False），为奇数（True）。</strong><br>评估多标签分类器的方法很多，如何选择正确的度量指标取决于你的项目。比如方法之一是测量每个标签的F1分数（或者是之前讨论过的任何其他二元分类器指标），然后简单地平均。下面这段代码计算所有标签的平均F1分数：</p><pre class=" language-python"><code class="language-python">y_train_knn_pred <span class="token operator">=</span> cross_val_predict<span class="token punctuation">(</span>knn_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_multilabel<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>f1_score<span class="token punctuation">(</span>y_multilabel<span class="token punctuation">,</span> y_train_knn_pred<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">"macro"</span><span class="token punctuation">)</span></code></pre><pre><code>0.97709078477525002</code></pre><p>这里假设了所有的标签都同等重要， 但实际可能不是这样。 特别是， 如果训练的照片里爱丽丝比鲍勃和查理要多很多， 你可能想给区分爱丽丝的分类器更高的权重。 一个简单的办法是给每个标签设置一个等于其自身支持的权重（也就是具有该目标标签的实例的数量） 。只需要在上面的代码中设置average=”weighted”即可。</p><h1 id="Multioutput-classification多输出-多类别分类"><a href="#Multioutput-classification多输出-多类别分类" class="headerlink" title="Multioutput classification多输出-多类别分类"></a>Multioutput classification多输出-多类别分类</h1><p>举个例子：为了说明这一点，构建一个系统去除图片中的噪声。给它输入一张有噪声的图片，它将（希望）输出一张干净的数字图片，跟其他MNIST图片一样，以像素强度的一个数组作为呈现方式。请注意，这个分类器的输出是多个标签（一个像素点一个标签），每个标签可以有多个值（像素强度范围为0到225）。所以这是个多输出分类器系统的例子</p><blockquote><p>还先从创建训练集和测试集开始，使用NumPy的randint（）函数为MNIST图片的像素强度增加噪声。目标是将图片还原为原始图片：</p></blockquote><pre class=" language-python"><code class="language-python">noise <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X_train_mod <span class="token operator">=</span> X_train <span class="token operator">+</span> noisenoise <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X_test_mod <span class="token operator">=</span> X_test <span class="token operator">+</span> noisey_train_mod <span class="token operator">=</span> X_trainy_test_mod <span class="token operator">=</span> X_test</code></pre><pre class=" language-python"><code class="language-python">some_index <span class="token operator">=</span> <span class="token number">5500</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plot_digit<span class="token punctuation">(</span>X_test_mod<span class="token punctuation">[</span>some_index<span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plot_digit<span class="token punctuation">(</span>y_test_mod<span class="token punctuation">[</span>some_index<span class="token punctuation">]</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"noisy_digit_example_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure noisy_digit_example_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712155747653.png" alt="在这里插入图片描述"><br>左边是有噪声的输入图片， 右边是干净的目标图片。 现在通过训练分类器， 清洗这张图片：</p><pre class=" language-python"><code class="language-python">knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_mod<span class="token punctuation">,</span> y_train_mod<span class="token punctuation">)</span>clean_digit <span class="token operator">=</span> knn_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>X_test_mod<span class="token punctuation">[</span>some_index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plot_digit<span class="token punctuation">(</span>clean_digit<span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"cleaned_digit_example_plot"</span><span class="token punctuation">)</span></code></pre><pre><code>Saving figure cleaned_digit_example_plot</code></pre><p><img src="https://img-blog.csdnimg.cn/20200712155756178.png" alt="在这里插入图片描述"></p><p>看起来这张图片离目标足够接近了。<br>`阅读《机器学习实战-基于Scikit-Learn和TensorFlow》这本书第三章，上述笔记基本参考此书。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础学习</title>
      <link href="/posts/fb35.html"/>
      <url>/posts/fb35.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h3><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><p>python中单行注释以<code>#</code>开头，多行注释可以用多个<code>#</code>号，或者采用<code>'''</code>和<code>"""</code></p><h6 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h6><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <code>{ }</code></p><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p>python中单引号和双引号使用完全相同。<br>使用三引号(‘’’或”””)可以指定一个多行字符串。<br>转义符 ‘'<br>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n会显示，并不是换行。这里的r指raw，即raw string原始字符串<br>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。<br>字符串可以用 + 运算符连接在一起，用 * 运算符重复。<br>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。<br><img src="https://img-blog.csdnimg.cn/2020061716105559.png" alt="在这里插入图片描述"><br>Python中的字符串不能改变。<br>Python 没有单独的字符类型，都为字符串，一个字符就是长度为 1 的字符串。<br>字符串的截取的语法格式如下：<code>变量[头下标:尾下标:步长]</code></p><h6 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h6><p><img src="https://img-blog.csdnimg.cn/20200617161333659.png" alt="在这里插入图片描述"></p><h6 id="print输出"><a href="#print输出" class="headerlink" title="print输出"></a>print输出</h6><p>print默认输出是换行的，如果想要不换行需要在变量末尾加上end=” “</p><h6 id="import与from…import"><a href="#import与from…import" class="headerlink" title="import与from…import"></a>import与from…import</h6><p>在 python 用<code>import</code>或者<code>from...import</code>来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为：<code>import somemodule</code></p><p>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></p><p>从某个模块中导入多个函数,格式为：<code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p><h4 id="python基本数据类型"><a href="#python基本数据类型" class="headerlink" title="python基本数据类型"></a>python基本数据类型</h4><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><h5 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h5><p>python3中有6个标准的数据类型</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）<h6 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h6>支持int，float，bool，complex（复数）<br>其中内置的type()函数可以用来查询变量所指的对象类型。<br><img src="https://img-blog.csdnimg.cn/20200617173243637.png" alt="在这里插入图片描述"><br>数值运算：</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># 加法</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4.3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token comment" spellcheck="true"># 减法</span><span class="token number">2.3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span>  <span class="token comment" spellcheck="true"># 乘法</span><span class="token number">21</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># 除法，得到一个浮点数</span><span class="token number">0.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># 除法，得到一个整数</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 取余</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 乘方</span><span class="token number">32</span></code></pre><p>需要注意：一个变量可以通过赋值指向不同类型的对象，数值的除法包含两个运算符：<code>/</code>返回一个浮点数，<code>//</code>返回一个整数。</p><h6 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h6><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>Python中的字符串用单引号<code>'</code>或双引号<code>"</code>括起来，同时使用反斜杠<code>\</code>转义特殊字符。<br>python的字串列表有2种取值顺序:</p><ul><li>从左到右索引默认0开始的，最大范围是字符串长度少1</li><li>从右到左索引默认-1开始的，最大范围是字符串开头</li></ul><p>逆序输出字符串：<br><img src="https://img-blog.csdnimg.cn/20200617173956563.png" alt="在这里插入图片描述"><br>从字符串中截取一串字符：使用 <code>[头下标:尾下标]</code> 来截取相应的字符串<br><img src="https://img-blog.csdnimg.cn/20200709114150810.png" alt="在这里插入图片描述"><br><code>[头下标:尾下标]</code>获取的子字符串包含头下标的字符，但不包含尾下标的字符。</p><h6 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h6><p>List（列表） 是 Python 中使用最频繁的数据类型。<br>list是一种有序的集合，可以随时添加和删除其中的元素。<br>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。<br><img src="https://img-blog.csdnimg.cn/2020070911494114.png" alt="在这里插入图片描述"><br>list是一个可变的有序表，所以，可以往list中追加元素到末尾：<br><img src="https://img-blog.csdnimg.cn/20200709160154717.png" alt="在这里插入图片描述"><br>也可以把元素插入到指定的位置，比如索引号为1的位置：<br><img src="https://img-blog.csdnimg.cn/20200709160843260.png" alt="在这里插入图片描述"><br>要删除list末尾的元素，用pop()方法：<br><img src="https://img-blog.csdnimg.cn/20200709161001775.png" alt="在这里插入图片描述"><br>要删除指定位置的元素，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：<br><img src="https://img-blog.csdnimg.cn/20200709161112490.png" alt="在这里插入图片描述"></p><h6 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h6><p>元组类似于列表（list，不同之处在于元组的元素不能修改。<br>元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。<br>当元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：<img src="https://img-blog.csdnimg.cn/20200709123915509.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200709123942486.png" alt="在这里插入图片描述"><br>元组内置函数：</p><ul><li>len(tuple)：计算元组元素个数。<br><img src="https://img-blog.csdnimg.cn/20200709142004375.png" alt="在这里插入图片描述"></li><li>max(tuple)：返回元组中元素最大值。<br><img src="https://img-blog.csdnimg.cn/20200709142057162.png" alt="在这里插入图片描述"></li><li>min(tuple)：返回元组中元素最小值。<br><img src="https://img-blog.csdnimg.cn/20200709142124386.png" alt="在这里插入图片描述"></li><li>tuple(iterable) 将可迭代系列转换为元组。<br><img src="https://img-blog.csdnimg.cn/20200709142158426.png" alt="在这里插入图片描述"></li></ul><h6 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h6><p>字典是另一种可变容器模型，且可存储任意类型对象。<br>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br>字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示：</p><blockquote><p>d = {key1 : value1, key2 : value2 }</p></blockquote><p>给定一个名字，要查找对应的成绩。用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下<br><img src="https://img-blog.csdnimg.cn/20200709193930995.png" alt="在这里插入图片描述"><br>注意，dict内部存放的顺序和key放入的顺序是没有关系的。<br>和list比较，dict有以下几个特点：</p><ul><li>1、查找和插入的速度极快，不会随着key的增加而变慢；</li><li>2、需要占用大量的内存，内存浪费多。<br>所以，dict是用空间来换取时间的一种方法。dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是<strong>不可变对象</strong>。<br>　　这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。<br>　　要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</li></ul><h6 id="set"><a href="#set" class="headerlink" title="set"></a>set</h6><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>重复的元素在set中会被自动过滤：<br><img src="https://img-blog.csdnimg.cn/20200709194518825.png" alt="在这里插入图片描述"><br>通过<code>add(key)</code>方法可以添加元素到set中，通过<code>remove(key)</code>方法可以删除元素：<br><img src="https://img-blog.csdnimg.cn/20200709194857284.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200709194929443.png" alt="在这里插入图片描述"><br>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p><h5 id="计算机系统通用的字符编码工作方式："><a href="#计算机系统通用的字符编码工作方式：" class="headerlink" title="计算机系统通用的字符编码工作方式："></a>计算机系统通用的字符编码工作方式：</h5><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。<br>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：<br><img src="https://img-blog.csdnimg.cn/20200709152320730.png" alt="在这里插入图片描述"><br>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：<img src="https://img-blog.csdnimg.cn/20200709152340373.png" alt="在这里插入图片描述"><br>所以当看到很多网页的源码上会有类似<meta charset="UTF-8">的信息，表示该网页正是用的UTF-8编码。</p><p>Python 3的字符串使用<code>Unicode</code>，直接支持多语言。</p><p>当<code>str</code>和<code>bytes</code>互相转换时，需要指定编码。最常用的编码是<code>UTF-8</code><br>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。</p><p>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：<br><img src="https://img-blog.csdnimg.cn/20200709153108903.png" alt="在这里插入图片描述"><br>如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：<br><img src="https://img-blog.csdnimg.cn/20200709153321117.png" alt="在这里插入图片描述"></p><h5 id="谈谈input"><a href="#谈谈input" class="headerlink" title="谈谈input"></a>谈谈input</h5><p>很多时候我们会用<code>input()</code>读取用户的输入，<br><img src="https://img-blog.csdnimg.cn/20200709163056119.png" alt="在这里插入图片描述"><br>结果报错，这是因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：<br><img src="https://img-blog.csdnimg.cn/20200709163145237.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的向量与矩阵的范数总结[L0、L1、L2范数]</title>
      <link href="/posts/f5c7.html"/>
      <url>/posts/f5c7.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="向量的范数"><a href="#向量的范数" class="headerlink" title="向量的范数"></a>向量的范数</h3><p>首先定义一个向量为：x=[-5，6，8, -10]<br>1-范数： </p><p><img src="https://img-blog.csdnimg.cn/20200709103835497.png" alt="在这里插入图片描述">，即向量的各个元素的绝对值之和，matlab调用函数norm(x, 1) 。则上述x的1-范数结果是29</p><p>2-范数：</p><p><img src="https://img-blog.csdnimg.cn/2020070910384724.png" alt="在这里插入图片描述">，Euclid范数（欧几里得范数，常用计算向量长度），即向量元素绝对值的平方和再开方，matlab调用函数norm(x, 2)。</p><p><img src="https://img-blog.csdnimg.cn/20200709103901379.png" alt="在这里插入图片描述">-范数：</p><p><img src="https://img-blog.csdnimg.cn/20200709104135615.png" alt="在这里插入图片描述">，即所有向量元素绝对值中的最大值，matlab调用函数norm(x, inf)。</p><p><img src="https://img-blog.csdnimg.cn/20200709104145984.png" alt="在这里插入图片描述">-范数：</p><p><img src="https://img-blog.csdnimg.cn/20200709104150937.png" alt="在这里插入图片描述">，即所有向量元素绝对值中的最小值，matlab调用函数norm(x, -inf)。</p><p>p-范数：</p><p><img src="https://img-blog.csdnimg.cn/20200709104154540.png" alt="在这里插入图片描述">，即向量元素绝对值的p次方和的1/p次幂，matlab调用函数norm(x, p)。</p><h3 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h3><p>矩阵的1范数<br><img src="https://img-blog.csdnimg.cn/20200709104912722.png" alt="在这里插入图片描述">列和范数，即所有矩阵列向量绝对值之和的最大值，矩阵的每一列上的元素绝对值先求和，再从中取个最大的（列和最大）。matlab调用函数norm(A, 1)。</p><p>矩阵的2范数：<br>矩阵的2范数即：矩阵$A^{T} A$的最大特征值开平方根。</p><p>矩阵的无穷范数：<br>矩阵的每一行上的元素绝对值先求和，再从中取个最大的（行和最大）</p><h4 id="L0范数和L1范数"><a href="#L0范数和L1范数" class="headerlink" title="L0范数和L1范数"></a>L0范数和L1范数</h4><p>L0范数是指向量中非零元素的个数。如果用L0规则化一个参数矩阵W，就是希望W中大部分元素是零，实现稀疏。</p><p>L1范数是指向量中各个元素的绝对值之和，也叫”系数规则算子（Lasso regularization）“。L1范数也可以实现稀疏，通过将无用特征对应的参数W置为零实现。</p><p>L0和L1都可以实现稀疏化，不过一般选用L1而不用L0，原因包括：1）L0范数很难优化求解（NP难）；2）L1是L0的最优凸近似，比L0更容易优化求解。（这一段解释过于数学化，姑且当做结论记住）<br>稀疏化的好处是是什么？<br>1）特征选择<br>​实现特征的自动选择，去除无用特征。稀疏化可以去掉这些无用特征，将特征对应的权重置为零。<br>2）可解释性（interpretability）​<br>例如判断某种病的患病率时，最初有1000个特征，建模后参数经过稀疏化，最终只有5个特征的参数是非零的，那么就可以说影响患病率的主要就是这5个特征。</p><h4 id="L2范数"><a href="#L2范数" class="headerlink" title="L2范数"></a>L2范数</h4><p>L2范数​​是指向量各元素的平方和然后开方，用在回归模型中也称为岭回归（Ridge regression）。<br>L2避免过拟合的原理是：让L2范数的规则项||W||2 尽可能小，可以使得W每个元素都很小，接近于零，但是与L1不同的是，不会等于0；这样得到的模型抗干扰能力强，参数很小时，即使样本数据x发生很大的变化，模型预测值y的变化也会很有限。</p><p>参考链接：<a href="https://www.cnblogs.com/MengYan-LongYou/p/4050862.html" target="_blank" rel="noopener">https://www.cnblogs.com/MengYan-LongYou/p/4050862.html</a></p><p>  　　　　 <a href="https://blog.csdn.net/Michael__Corleone/article/details/75213123" target="_blank" rel="noopener">https://blog.csdn.net/Michael__Corleone/article/details/75213123</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 范数 矩阵算子范数 矩阵范数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端到端的机器学习项目，预测房价</title>
      <link href="/posts/7b80.html"/>
      <url>/posts/7b80.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="端到端的机器学习项目"><a href="#端到端的机器学习项目" class="headerlink" title="端到端的机器学习项目"></a>端到端的机器学习项目</h3><p>主要步骤：<br>1.观察大局。<br>2.获得数据。<br>3.从数据探索和可视化中获得洞见。<br>4.机器学习算法的数据准备。<br>5.选择和训练模型。<br>6.微调模型。<br>7.展示解决方案。<br>8.启动、监控和维护系统。</p><h4 id="使用的数据集"><a href="#使用的数据集" class="headerlink" title="使用的数据集"></a>使用的数据集</h4><p>选用StatLib库中选择了加州住房价格的数据集，该数据集基于1990年加州人口普查的数据。<br>链接：<a href="https://pan.baidu.com/s/10N6CHN9yxMvG1HHPL6yX2g" target="_blank" rel="noopener">https://pan.baidu.com/s/10N6CHN9yxMvG1HHPL6yX2g</a><br>提取码：xpzs</p><h4 id="观察大局"><a href="#观察大局" class="headerlink" title="观察大局"></a>观察大局</h4><p>首先要做的事是使用加州人口普查的数据建立起加州的房价模型。 数据中有许多指标， 诸如每个街区的人口数量、 收入中位数、 房价中位数等。 街区是美国人口普查局发布样本数据的最小地理单位（一个街区通常人口数为600～3000人） 。 这里， 我们将其简称为“区域”。</p><h4 id="获得数据"><a href="#获得数据" class="headerlink" title="获得数据"></a>获得数据</h4><p>所有数据——一个以逗号来分割之的CSV文档housing.csv<br>首先使用pandas来加载数据</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdHOUSING_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"datasets"</span><span class="token punctuation">,</span> <span class="token string">"housing"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_housing_data</span><span class="token punctuation">(</span>housing_path<span class="token operator">=</span>HOUSING_PATH<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>housing_path<span class="token punctuation">,</span> <span class="token string">"housing.csv"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>csv_path<span class="token punctuation">)</span></code></pre><p>此函数会返回一个包含所有数据的Pandas DataFrame对象。<br>用DataFrame的head()方法查看数据集的前五行<br><img src="https://img-blog.csdnimg.cn/20200705171239900.png" alt="在这里插入图片描述"><br>每一行代表一个区， 总共有10个属性（上图中可以看到8个）longitude， latitude， housing_median_age， total_rooms，total_bed rooms， population， households， median_income，median_house_value以及ocean_proximity。<br>之后通过info()方法可以快速获取数据集的简单描述，比如总函数，每个属性的类型和非空值的数量。<br><img src="https://img-blog.csdnimg.cn/20200705171438778.png" alt="在这里插入图片描述"><br>数据集中包含20640个实例， total_bedrooms这个属性只有20433个非空值，这意味着有207个区域缺失这个特征。我们后面需要考虑到这一点。<br>所有属性的字段都是数字，除了ocean_proximity，其类型是object。之前通过head()方法查看前五行，发现该列中的值是重复的，表明它有可能是一个分类属性，采用value_counts()方法查看由多少种分类存在，每种类别下分别有多少个区域。<br><img src="https://img-blog.csdnimg.cn/20200705175541729.png" alt="在这里插入图片描述"><br>利用describe()方法可以显示数值属性的摘要。<br><img src="https://img-blog.csdnimg.cn/20200705180526902.png" alt="在这里插入图片描述"><br>count：非空值计数<br>mean：平均值<br>std：标准差<br>min：最小值<br>25%、50%、75%：表示一组观测值中给定百分比的观测值都低于该值。例如， 对于housing_median_age的值， 25%的区域低于18， 50%的区域低于29， 以及75%的区域低于<br>37。 </p><p>另外一种快速了解数据类型的方法是绘制每个数值属性的直方图。直方图用来显示给定范围（横轴）的实例数量（纵轴）。</p><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline <span class="token comment" spellcheck="true"># only in a Jupyter notebook</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plthousing<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="创建测试集"><a href="#创建测试集" class="headerlink" title="创建测试集"></a>创建测试集</h5><p>理论上创建测试机非常简单：只需要随机选择一些实例，通常是数据集的20%，然后将它们放在一边。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#np.random.seed(42)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># For illustration only. Sklearn has train_test_split()</span><span class="token keyword">def</span> <span class="token function">split_train_test</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> test_ratio<span class="token punctuation">)</span><span class="token punctuation">:</span>    shuffled_indices <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_set_size <span class="token operator">=</span> int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">*</span> test_ratio<span class="token punctuation">)</span>    test_indices <span class="token operator">=</span> shuffled_indices<span class="token punctuation">[</span><span class="token punctuation">:</span>test_set_size<span class="token punctuation">]</span>    train_indices <span class="token operator">=</span> shuffled_indices<span class="token punctuation">[</span>test_set_size<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_indices<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_indices<span class="token punctuation">]</span>train_set<span class="token punctuation">,</span> test_set <span class="token operator">=</span> split_train_test<span class="token punctuation">(</span>housing<span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"train +"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span></code></pre><p>如果这样，再运行一遍，又会产生一个不同的数据集。通常的解决方案是在第一次运行程序后随即保存测试机，之后只是加载它而已。另一种方法是在调用np.random.permutation()之前设置一个随机数生成器的种子np.random.seed(42)，从而让它始终生成相同的随机索引。<br>但是，这两种解决方案在下一次获取更新的数据时都会中断。常见的解决办法是每个实例都使用一个标识符（identifier）来决定是否进入测试集（假定每个实例都有一个唯一且不变的标识符）。举例来说，你可以计算每个实例标识符的hash值，只取hash的最后一个字节，如果该值小于等于51（约256的20%），则将该实例放入测试集。这样可以确保测试集在多个运行里都是一致的，即便更新数据集也仍然一致。新实例的20%将被放入新的测试集，而之前训练集中的实例也不会被放入新测试集。实现方式如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">test_set_check</span><span class="token punctuation">(</span>identifier<span class="token punctuation">,</span> test_ratio<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hash<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">(</span>identifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token operator">*</span> test_ratio<span class="token keyword">def</span> <span class="token function">split_train_test_by_id</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> test_ratio<span class="token punctuation">,</span> id_column<span class="token punctuation">,</span> hash<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">)</span><span class="token punctuation">:</span>    ids <span class="token operator">=</span> data<span class="token punctuation">[</span>id_column<span class="token punctuation">]</span>    in_test_set <span class="token operator">=</span> ids<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> id_<span class="token punctuation">:</span> test_set_check<span class="token punctuation">(</span>id_<span class="token punctuation">,</span> test_ratio<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token operator">~</span>in_test_set<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>in_test_set<span class="token punctuation">]</span></code></pre><p>这里housing数据集没有标识符列，最简单的办法是使用行索引作为ID：</p><pre class=" language-python"><code class="language-python">housing_with_id <span class="token operator">=</span> housing<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># adds an `index` column</span>train_set<span class="token punctuation">,</span> test_set <span class="token operator">=</span> split_train_test_by_id<span class="token punctuation">(</span>housing_with_id<span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token string">"index"</span><span class="token punctuation">)</span></code></pre><p>同时Scikit-Learn提供了一些函数， 可以通过多种方式将数据集分成多个子集。 最简单的函数是<code>train_test_split</code>， 它与前面定义的函数<code>split_train_test</code>几乎相同， 除了几个额外特征。 首先， 它也有<code>random_state</code>参数， 让你可以像之前提到过的那样设置随机生成器种子； 其次， 你可以把行数相同的多个数据集一次性发送给它， 它会根据相同的索引将其拆分（例如， 当你有一个单独的DataFrame用于标记时， 这就非常有用） ：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splittrain_set<span class="token punctuation">,</span> test_set <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>housing<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></code></pre><h4 id="从数据探索和可视化中获得洞见"><a href="#从数据探索和可视化中获得洞见" class="headerlink" title="从数据探索和可视化中获得洞见"></a>从数据探索和可视化中获得洞见</h4><p>在这个问题中，由于存在地理位置信息（经纬度），因此可建立一个各区域的分布图便于数据可视化。</p><pre class=" language-python"><code class="language-python">housing <span class="token operator">=</span> strat_train_set<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>housing<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">"scatter"</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">"longitude"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"latitude"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"better_visualization_plot"</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200705212727930.png" alt="在这里插入图片描述"><br>现在，再来看看房价。每个圆的半径大小代表了每个地区的人口数量（选项s） ， 颜色代表价格（选项c） 。 我们使用一个名叫jet的预定义颜色表（选项cmap） 来进行可视化， 颜色范围从蓝（低） 到红（高） ： </p><pre class=" language-python"><code class="language-python">housing<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">"scatter"</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">"longitude"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"latitude"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span>s<span class="token operator">=</span>housing<span class="token punctuation">[</span><span class="token string">"population"</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"population"</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">"median_house_value"</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">"jet"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colorbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200705212957701.png" alt="在这里插入图片描述">　　这张图片告诉你房屋价格与地理位置（例如靠海）和人口密度息息相关，这点你可能早已知晓。一个通常很有用的方法是，使用聚类算法来检测主群体，然后再为各个聚类中心添加一个新的衡量邻近距离的特征。</p><h5 id="寻找相关性"><a href="#寻找相关性" class="headerlink" title="寻找相关性"></a>寻找相关性</h5><p>由于数据集不大，你可以使用corr（）方法轻松计算出每对属性之间的标准相关系数<br>得到每个属性与房屋中位数的相关性分别是：<br><img src="https://img-blog.csdnimg.cn/20200710213325531.png" alt="在这里插入图片描述"><br>相关系数的范围从-1变化到1。 越接近1， 表示有越强的正相关； 当系数接近于-1， 则表示有强烈的负相关； 注意看纬度和房价中位数之间呈现出轻微的负相关（也就是说， 越往北走， 房价倾向于下降） 。 最后， 系数靠近0则说明二者之间没有线性相关性。</p><h4 id="机器学习算法的数据准备"><a href="#机器学习算法的数据准备" class="headerlink" title="机器学习算法的数据准备"></a>机器学习算法的数据准备</h4><p>让我们先回到一个干净的数据集（再次复制strat_train_set），然后将预测器和标签分开，因为这里我们不一定对它们使用相同的转换方式（需要注意drop（）会创建一个数据副本，但是不影响strat_train_set）：</p><pre class=" language-python"><code class="language-python">housing <span class="token operator">=</span> strat_train_set<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"median_house_value"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。默认删除行，axis=1表示删除列</span>housing_labels <span class="token operator">=</span> strat_train_set<span class="token punctuation">[</span><span class="token string">"median_house_value"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#拷贝median_house_value作为label</span></code></pre><h5 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h5><p>针对前面提到的total_bedrooms属性有部分值缺失，可以采用以下选择：</p><ul><li>放弃这些响应的地区</li><li>放弃这个属性</li><li>将缺失的值设置为某个值（0、平均数或者中位数等都可以）</li></ul><pre class=" language-python"><code class="language-python">housing<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"total_bedrooms"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># option 1 dropna删除指定列中包含缺失值的行</span>housing<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"total_bedrooms"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># option 2</span>median <span class="token operator">=</span> housing<span class="token punctuation">[</span><span class="token string">"total_bedrooms"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#计算中位值</span>housing<span class="token punctuation">[</span><span class="token string">"total_bedrooms"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>median<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># option 3 </span></code></pre><p>Scikit-Learn提供了一个非常容易上手的教程来处理缺失值：imputer。<br>下面是其使用方法：首先，需要创建一个Imputer实例，指定用该属性的中位数替换它的每个缺失值：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> Imputerimputer <span class="token operator">=</span> Imputer<span class="token punctuation">(</span>strategy<span class="token operator">=</span><span class="token string">"median"</span><span class="token punctuation">)</span></code></pre><p>由于中位数值只能在数值属性上计算， 所以我们需要创建一个没有文本属性的数据副本ocean_proximity：</p><pre class=" language-python"><code class="language-python">housing_num <span class="token operator">=</span> housing<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"ocean_proximity"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>使用fit（） 方法将imputer实例适配到训练集:</p><pre class=" language-python"><code class="language-python">imputer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_num<span class="token punctuation">)</span></code></pre><p><code>imputer</code>计算出了每个属性的中位数，并将结果保存在了实例变量<code>statistics_</code>中。只有属性<code>total_bedrooms</code>有缺失值，但是我们要确保一旦系统运行起来，新的数据中没有缺失值，所以安全的做法是将<code>imputer</code>应用到每个数值：<br><img src="https://img-blog.csdnimg.cn/20200711115357697.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200711115426798.png" alt="在这里插入图片描述"><br>现在，你就可以使用这个“训练过的”<code>imputer</code>来对训练集进行转换，通过将缺失值替换为中位数：</p><pre class=" language-python"><code class="language-python">X <span class="token operator">=</span> imputer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>housing_num<span class="token punctuation">)</span></code></pre><p>结果是一个普通的Numpy数组，包含有转换后的特征。如果你想将其放回到Pandas DataFrame中，也很简单：<br><code>housing_tr = pd.DataFrame(X, columns=housing_num.columns)</code></p><h4 id="选择和训练模型"><a href="#选择和训练模型" class="headerlink" title="选择和训练模型"></a>选择和训练模型</h4><pre><code>现在是时候选择机器学习模型并展开训练</code></pre><h5 id="在训练集上训练和评估"><a href="#在训练集上训练和评估" class="headerlink" title="在训练集上训练和评估"></a>在训练集上训练和评估</h5><p>先训练一个线性回归模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionlin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">)</span></code></pre><p>完成后,现在就有了一个可用的线性回归模型。用一些训练集中的实例做以下验证：<br><img src="https://img-blog.csdnimg.cn/20200711124948118.png" alt="在这里插入图片描述"><br>比较预测值与标签值，看准确率如何。还可以使用Scikit-Learn的<code>mean_squared_error</code>函数，计算该线性回归模型的RMSE均方根误差。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_errorhousing_predictions <span class="token operator">=</span> lin_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">)</span>lin_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>housing_labels<span class="token punctuation">,</span> housing_predictions<span class="token punctuation">)</span>lin_rmse <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lin_mse<span class="token punctuation">)</span>lin_rmse</code></pre><p><img src="https://img-blog.csdnimg.cn/20200711125130124.png" alt="在这里插入图片描述"><br>再来训练一个<code>DecisionTreeRegressor</code>决策树模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressortree_reg <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>tree_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">)</span></code></pre><p>训练完成后可以用训练集来评估一下</p><pre class=" language-python"><code class="language-python">housing_predictions <span class="token operator">=</span> tree_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">)</span>tree_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>housing_labels<span class="token punctuation">,</span> housing_predictions<span class="token punctuation">)</span>tree_rmse <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>tree_mse<span class="token punctuation">)</span>tree_rmse</code></pre><p><img src="https://img-blog.csdnimg.cn/20200711130058345.png" alt="在这里插入图片描述"><br>均方误差为0，可能是由于模型对数据严重过拟合了。</p><p>尝试最后一个模型：<code>RandomForestRegressor</code>      　　随机森林的工作原理是通过对特征的随机子集进行许多个决策树的训练，然后对其预测取平均。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressorforest_reg <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>forest_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">)</span>housing_predictions <span class="token operator">=</span> forest_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">)</span>forest_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>housing_labels<span class="token punctuation">,</span> housing_predictions<span class="token punctuation">)</span>forest_rmse <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>forest_mse<span class="token punctuation">)</span>forest_rmse</code></pre><p><img src="https://img-blog.csdnimg.cn/20200711130901980.png" alt="在这里插入图片描述"></p><h4 id="微调模型"><a href="#微调模型" class="headerlink" title="微调模型"></a>微调模型</h4><h6 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h6><p>一种微调的方法是手动调整超参数，找到一组很好的超参数值组合。<br>还可以可以用Scikit-Learn的<code>GridSearchCV</code>来替你进行探索。你所要做的只是告诉<code>GridSearchCV</code>你要进行实验的超参数是什么，以及需要尝试的值，<code>GridSearchCV</code>将会使用交叉验证来评估超参数值的所有可能的组合。例如，下面这段代码搜索<code>RandomForestRegressor</code>的超参数值的最佳组合：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCVparam_grid <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'max_features'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'bootstrap'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'max_features'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>forest_reg <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>forest_reg<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                           scoring<span class="token operator">=</span><span class="token string">'neg_mean_squared_error'</span><span class="token punctuation">)</span>grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">)</span></code></pre><blockquote><p>当你不能确定超参数该有什么值，一个简单的方法是尝试连续的10的次方（如果想要一个粒度更小的搜寻，可以用更小的数，就像在这个例子中对超参数n_estimators做的）。</p></blockquote><p><code>param_grid</code>告诉Scikit-Learn首先评估所有的列在第一个<code>dict</code>中的<code>n_estimators</code>和<code>max_features</code>的3 × 4 = 12种组合（不用担心这些超参数的含义，会在第7章中解释）。然后尝试第二个<code>dict中</code>超参数的2 × 3 = 6种组合，这次会将超参数bootstrap设为False而不是True（后者是该超参数的默认值）。</p><p>总之，网格搜索会探索12 + 6 = 18种<code>RandomForestRegressor</code>的超参数组合，会训练每个模型五次（因为用的是五折交叉验证）。换句话说，训练总共有18 × 5 = 90轮！折将要花费大量时间，完成后，你就能获得参数的最佳组合，如下所示：<br><img src="https://img-blog.csdnimg.cn/20200711142653582.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200711141939362.png" alt="在这里插入图片描述"></p><h4 id="随机搜索"><a href="#随机搜索" class="headerlink" title="随机搜索"></a>随机搜索</h4><p>当探索相对较少的组合时，就像前面的例子，网格搜索还可以。但是当超参数的搜索空间很大时，最好使用<code>RandomizedSearchCV</code>。这个类的使用方法和类<code>GridSearchCV</code>很相似，但它不是尝试所有可能的组合，而是通过选择每个超参数的一个随机值的特定数量的随机组合。这个方法有两个优点：</p><ul><li><p>如果你让随机搜索运行，比如1000次，它会探索每个超参数的1000个不同的值（而不是像网格搜索那样，只搜索每个超参数的几个值）。</p></li><li><p>你可以方便地通过设定搜索次数，控制超参数搜索的计算量。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP入门-情感分析|paddle</title>
      <link href="/posts/a21b.html"/>
      <url>/posts/a21b.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre><code>### 任务介绍：在自然语言处理中，情感分析一般指判断一段文本所表达的情绪状态，属于文本分类问题。情绪：正面/负面</code></pre><h4 id="数据集介绍："><a href="#数据集介绍：" class="headerlink" title="数据集介绍："></a>数据集介绍：</h4><pre><code>IMDB数据集包含来自互联网的50000条严重两极分化的评论，该数据被分为用于训练的25000条评论和用于测试的25000条评论，训练集和测试集都包含50%的正面评价和50%的负面评价。该数据集已经经过预处理：评论（单词序列）已经被转换为整数序列，其中每个整数代表字典中的某个单词。</code></pre><h1 id="1、准备数据"><a href="#1、准备数据" class="headerlink" title="1、准备数据:"></a><strong>1、准备数据:</strong></h1><p>创建数据读取器train_reader 和test_reader</p><h1 id="2、配置网络"><a href="#2、配置网络" class="headerlink" title="2、配置网络"></a><strong>2、配置网络</strong></h1><p>定义网络</p><p>定义损失函数</p><p>定义优化算法</p><h1 id="3、训练网络"><a href="#3、训练网络" class="headerlink" title="3、训练网络"></a><strong>3、训练网络</strong></h1><h1 id="4、模型评估"><a href="#4、模型评估" class="headerlink" title="4、模型评估"></a><strong>4、模型评估</strong></h1><h1 id="5、模型预测"><a href="#5、模型预测" class="headerlink" title="5、模型预测"></a><strong>5、模型预测</strong></h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入必要的包</span><span class="token keyword">import</span> paddle<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>imdb <span class="token keyword">as</span> imdb<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os</code></pre><pre class=" language-python"><code class="language-python">!mkdir <span class="token operator">-</span>p <span class="token operator">/</span>home<span class="token operator">/</span>aistudio<span class="token operator">/</span><span class="token punctuation">.</span>cache<span class="token operator">/</span>paddle<span class="token operator">/</span>dataset<span class="token operator">/</span>imdb<span class="token operator">/</span>!cp <span class="token operator">/</span>home<span class="token operator">/</span>aistudio<span class="token operator">/</span>data<span class="token operator">/</span>data69<span class="token operator">/</span>aclImdb_v1<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">/</span>home<span class="token operator">/</span>aistudio<span class="token operator">/</span><span class="token punctuation">.</span>cache<span class="token operator">/</span>paddle<span class="token operator">/</span>dataset<span class="token operator">/</span>imdb<span class="token operator">/</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取数据字典</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加载数据字典中..."</span><span class="token punctuation">)</span>word_dict <span class="token operator">=</span> imdb<span class="token punctuation">.</span>word_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这个数据集是一个常用的数据集，已经被paddle封装到底层代码里面了</span><span class="token comment" spellcheck="true"># 获取数据字典长度</span>dict_dim <span class="token operator">=</span> len<span class="token punctuation">(</span>word_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span></code></pre><pre><code>加载数据字典中...完成</code></pre><p>数据是以数据标签的方式表示一个句子。</p><p>所以每个句子都是以一串整数来表示的，每个数字都是对应一个单词。</p><p>数据集就会有一个数据集字典，这个字典是训练数据中出现单词对应的数字标签。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取训练和预测数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加载训练数据中..."</span><span class="token punctuation">)</span>train_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>imdb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>word_dict<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                  <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加载测试数据中..."</span><span class="token punctuation">)</span>test_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>imdb<span class="token punctuation">.</span>test<span class="token punctuation">(</span>word_dict<span class="token punctuation">)</span><span class="token punctuation">,</span>                            batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span></code></pre><pre><code>加载训练数据中...加载测试数据中...完成</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS84NTEyYTVjZjkzN2M0YzkxOTM0ZGNhYzcwYzkzYzg3YTdkY2Y0ZDJhNTJhNzRjZTM5ZDdmYTc3Y2E1MDQ3NzFj?x-oss-process=image/format,png" alt=""></p><ul><li>遗忘门：用来控制记忆消失程度。 </li><li>输入门：决定了当前时刻的输入信息，有多少信息将添加到记忆信息流中，与遗忘门计算公式几乎一致，输入门同样通过一个激活函数来实现。</li><li>记忆状态：计算当前输入与过去的记忆所具有的信息总量。</li><li>输出门：控制着有多少记忆信息将被用于下一阶段的更新中。<br>在防止梯度消失的问题上，LSTM效果比RNN要好，<br>随着任务难度的加深，文本序列长度的增加，模型后面一部分可能会丢失原始的信息，就出现了RNN的变体LSTM和GRU。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义长短期记忆网络</span><span class="token keyword">def</span> <span class="token function">lstm_net</span><span class="token punctuation">(</span>ipt<span class="token punctuation">,</span> input_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 以数据的IDs作为输入</span>    emb <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token operator">=</span>ipt<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">[</span>input_dim<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span> is_sparse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第一个全连接层</span>    fc1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>input<span class="token operator">=</span>emb<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 进行一个长短期记忆操作</span>    lstm1<span class="token punctuation">,</span> _ <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dynamic_lstm<span class="token punctuation">(</span>input<span class="token operator">=</span>fc1<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#返回：隐藏状态（hidden state），LSTM的神经元状态</span>                                         size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#size=4*hidden_size</span>    <span class="token comment" spellcheck="true"># 第一个最大序列池操作</span>    fc2 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>sequence_pool<span class="token punctuation">(</span>input<span class="token operator">=</span>fc1<span class="token punctuation">,</span> pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个最大序列池操作</span>    lstm2 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>sequence_pool<span class="token punctuation">(</span>input<span class="token operator">=</span>lstm1<span class="token punctuation">,</span> pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以softmax作为全连接的输出层，大小为2,也就是正负面</span>    out <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>input<span class="token operator">=</span><span class="token punctuation">[</span>fc2<span class="token punctuation">,</span> lstm2<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#二分类，1x2的概率分布</span>    <span class="token keyword">return</span> out</code></pre><p>这里可以先定义一个输入层，这样要注意的是我们使用的数据属于序列数据，所以我们可以设置lod_level为1，当该参数不为0时，表示输入的数据为序列数据，默认lod_level的值是0.</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义输入数据， lod_level不为0指定输入数据为序列数据</span>words <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'words'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> lod_level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'label'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#label：正向或者负向</span><span class="token comment" spellcheck="true"># 获取长短期记忆网络</span>model <span class="token operator">=</span> lstm_net<span class="token punctuation">(</span>words<span class="token punctuation">,</span> dict_dim<span class="token punctuation">)</span></code></pre><p>接着定义损失函数，这里同样是一个分类任务，所以使用的损失函数也是交叉熵损失函数。这里也可以使用fluid.layers.accuracy()接口定义一个输出分类准确率的函数，可以方便在训练的时候，输出测试时的分类准确率，观察模型收敛的情况。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取损失函数和准确率</span>cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>input<span class="token operator">=</span>model<span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span>avg_cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>input<span class="token operator">=</span>model<span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取预测程序</span>test_program <span class="token operator">=</span> fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span>for_test<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>然后是定义优化方法，这里使用的时Adagrad优化方法，Adagrad优化方法多用于处理稀疏数据，设置学习率为0.002。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义优化方法</span>optimizer <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>AdagradOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.002</span><span class="token punctuation">)</span>opt <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_cost<span class="token punctuation">)</span></code></pre><p>如果读取有GPU环境，可以尝试使用GPU来训练，使用方式是使用fluid.CUDAPlace(0)来创建。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义使用CPU还是GPU，使用CPU时use_cuda = False,使用GPU时use_cuda = True</span>use_cuda <span class="token operator">=</span> <span class="token boolean">True</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">if</span> use_cuda <span class="token keyword">else</span> fluid<span class="token punctuation">.</span>CPUPlace<span class="token punctuation">(</span><span class="token punctuation">)</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行参数初始化</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>[]</code></pre><p>定义数据数据的维度，数据的顺序是一条句子数据对应一个标签。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义输入数据的维度</span><span class="token comment" spellcheck="true"># 定义数据数据的维度，数据的顺序是一条句子数据对应一个标签</span>feeder <span class="token operator">=</span> fluid<span class="token punctuation">.</span>DataFeeder<span class="token punctuation">(</span>place<span class="token operator">=</span>place<span class="token punctuation">,</span> feed_list<span class="token operator">=</span><span class="token punctuation">[</span>words<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>现在就可以开始训练了，这里设置训练的循环是2次，大家可以根据情况设置更多的训练轮数。我们在训练中，每40个Batch打印一层训练信息和进行一次测试，测试是使用测试集进行预测并输出损失值和准确率，测试完成之后，对之前预测的结果进行求平均值。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 开始训练</span><span class="token keyword">for</span> pass_id <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行训练</span>    train_cost <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true">#遍历train_reader迭代器</span>        train_cost <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#运行主程序</span>                             feed<span class="token operator">=</span>feeder<span class="token punctuation">.</span>feed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">#喂入一个batch的数据</span>                             fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>avg_cost<span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#fetch均方误差</span>        <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#每40次batch打印一次训练、进行一次测试</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Pass:%d, Batch:%d, Cost:%0.5f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span> batch_id<span class="token punctuation">,</span> train_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 进行测试</span>    test_costs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#测试的损失值</span>    test_accs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#测试的准确率</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test_cost<span class="token punctuation">,</span> test_acc <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>test_program<span class="token punctuation">,</span>                                            feed<span class="token operator">=</span>feeder<span class="token punctuation">.</span>feed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>avg_cost<span class="token punctuation">,</span> acc<span class="token punctuation">]</span><span class="token punctuation">)</span>        test_costs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        test_accs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算平均预测损失在和准确率</span>    test_cost <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">(</span>test_costs<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>test_costs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_acc <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">(</span>test_accs<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>test_accs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test:%d, Cost:%0.5f, ACC:%0.5f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span> test_cost<span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#保存模型</span>model_save_dir <span class="token operator">=</span> <span class="token string">"/home/aistudio/work/emotionclassify.inference.model"</span><span class="token comment" spellcheck="true"># 如果保存路径不存在就创建</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'save models to %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span><span class="token punctuation">)</span>fluid<span class="token punctuation">.</span>io<span class="token punctuation">.</span>save_inference_model<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#保存推理model的路径</span>                                  <span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">#推理（inference）需要 feed 的数据</span>                                  <span class="token punctuation">[</span>model<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">#保存推理（inference）结果的 Variables</span>                                  exe<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#exe 保存 inference model</span></code></pre><pre><code>Pass:0, Batch:0, Cost:0.73125Pass:0, Batch:40, Cost:0.06795Pass:0, Batch:80, Cost:0.00722Pass:0, Batch:120, Cost:0.80844Pass:0, Batch:160, Cost:0.22205Test:0, Cost:1.12195, ACC:0.50171Pass:1, Batch:0, Cost:2.13347Pass:1, Batch:40, Cost:0.48804Pass:1, Batch:80, Cost:0.21535Pass:1, Batch:120, Cost:0.81571Pass:1, Batch:160, Cost:0.33186Test:1, Cost:0.83362, ACC:0.50191Pass:2, Batch:0, Cost:1.40742Pass:2, Batch:40, Cost:0.55047Pass:2, Batch:80, Cost:0.27269Pass:2, Batch:120, Cost:0.74456Pass:2, Batch:160, Cost:0.35957Test:2, Cost:0.71608, ACC:0.50769Pass:3, Batch:0, Cost:1.12344Pass:3, Batch:40, Cost:0.55675Pass:3, Batch:80, Cost:0.30137Pass:3, Batch:120, Cost:0.67230Pass:3, Batch:160, Cost:0.35690Test:3, Cost:0.63739, ACC:0.54560Pass:4, Batch:0, Cost:0.98897Pass:4, Batch:40, Cost:0.55052Pass:4, Batch:80, Cost:0.29672Pass:4, Batch:120, Cost:0.59823Pass:4, Batch:160, Cost:0.35738Test:4, Cost:0.57975, ACC:0.61902Pass:5, Batch:0, Cost:0.80312Pass:5, Batch:40, Cost:0.50581Pass:5, Batch:80, Cost:0.27092Pass:5, Batch:120, Cost:0.55160Pass:5, Batch:160, Cost:0.32211Test:5, Cost:0.53265, ACC:0.69416Pass:6, Batch:0, Cost:0.70552Pass:6, Batch:40, Cost:0.49984Pass:6, Batch:80, Cost:0.27171Pass:6, Batch:120, Cost:0.52073Pass:6, Batch:160, Cost:0.31178Test:6, Cost:0.49651, ACC:0.74736Pass:7, Batch:0, Cost:0.69794Pass:7, Batch:40, Cost:0.50185Pass:7, Batch:80, Cost:0.27300Pass:7, Batch:120, Cost:0.46273Pass:7, Batch:160, Cost:0.35845Test:7, Cost:0.46813, ACC:0.78116Pass:8, Batch:0, Cost:0.61882Pass:8, Batch:40, Cost:0.45831Pass:8, Batch:80, Cost:0.27965Pass:8, Batch:120, Cost:0.44373Pass:8, Batch:160, Cost:0.30215Test:8, Cost:0.44874, ACC:0.80029Pass:9, Batch:0, Cost:0.60523Pass:9, Batch:40, Cost:0.47129Pass:9, Batch:80, Cost:0.22142Pass:9, Batch:120, Cost:0.39324Pass:9, Batch:160, Cost:0.26854Test:9, Cost:0.43634, ACC:0.80823save models to /home/aistudio/work/emotionclassify.inference.model['save_infer_model/scale_0']</code></pre><p>我们先定义三个句子，第一句是中性的，第二句偏向正面，第三句偏向负面。然后把这些句子读取到一个列表中。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义预测数据</span>reviews_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'read the book forget the movie'</span><span class="token punctuation">,</span> <span class="token string">'this is a great movie'</span><span class="token punctuation">,</span> <span class="token string">'this is very bad'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#第一句是中性，第二句是正向，第三局是负向</span><span class="token comment" spellcheck="true"># 把每个句子拆成一个个单词</span>reviews <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> reviews_str<span class="token punctuation">]</span></code></pre><p>然后把句子转换成编码，根据数据集的字典，把句子中的单词转换成对应标签。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取结束符号的标签</span>UNK <span class="token operator">=</span> word_dict<span class="token punctuation">[</span><span class="token string">'&lt;unk>'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取每句话对应的标签</span>lod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> c <span class="token keyword">in</span> reviews<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 需要把单词进行字符串编码转换</span>    lod<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>word_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>words<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UNK<span class="token punctuation">)</span> <span class="token keyword">for</span> words <span class="token keyword">in</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>获取输入数据的维度和大小。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取每句话的单词数量</span>base_shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> lod<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>将要预测的数据转换成张量，准备开始预测。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成预测数据</span>tensor_words <span class="token operator">=</span> fluid<span class="token punctuation">.</span>create_lod_tensor<span class="token punctuation">(</span>lod<span class="token punctuation">,</span> base_shape<span class="token punctuation">,</span> place<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">infer_exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建推测用的executor</span>inference_scope <span class="token operator">=</span> fluid<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Scope<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#Scope指定作用域</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> fluid<span class="token punctuation">.</span>scope_guard<span class="token punctuation">(</span>inference_scope<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#修改全局/默认作用域（scope）, 运行时中的所有变量都将分配给新的scope。</span>    <span class="token comment" spellcheck="true">#从指定目录中加载 推理model(inference model)</span>    <span class="token punctuation">[</span>inference_program<span class="token punctuation">,</span>                                            <span class="token comment" spellcheck="true">#推理的program</span>     feed_target_names<span class="token punctuation">,</span>                                            <span class="token comment" spellcheck="true">#str列表，包含需要在推理program中提供数据的变量名称</span>     fetch_targets<span class="token punctuation">]</span> <span class="token operator">=</span> fluid<span class="token punctuation">.</span>io<span class="token punctuation">.</span>load_inference_model<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#fetch_targets: 推断结果，model_save_dir:模型训练路径 </span>                                                        infer_exe<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#infer_exe: 运行 inference model的 executor</span>    results <span class="token operator">=</span> infer_exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>inference_program<span class="token punctuation">,</span>                                 <span class="token comment" spellcheck="true">#运行预测程序</span>                            feed<span class="token operator">=</span><span class="token punctuation">{</span>feed_target_names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tensor_words<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#喂入要预测的x值</span>                            fetch_list<span class="token operator">=</span>fetch_targets<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true">#得到推测结果 </span>    <span class="token comment" spellcheck="true"># 打印每句话的正负面概率</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\'%s\'的预测结果为：正面概率为：%0.5f，负面概率为：%0.5f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>reviews_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>'read the book forget the movie'的预测结果为：正面概率为：0.54671，负面概率为：0.45329'this is a great movie'的预测结果为：正面概率为：0.62144，负面概率为：0.37856'this is very bad'的预测结果为：正面概率为：0.37344，负面概率为：0.62656</code></pre><p>预测结果显示这个模型的预测较为准确，输出结果符合人类观察的预期；可以继续调整网络参数、结构，使其能够更好的对文本进行情感分类。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 机器学习 paddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP入门-文本分类|paddle</title>
      <link href="/posts/ac4f.html"/>
      <url>/posts/ac4f.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="文本分类：自然语言处理领域中的一个经典问题，文本分类是利用电脑对文本按照一定的分类体系进行自动分类标记。"><a href="#文本分类：自然语言处理领域中的一个经典问题，文本分类是利用电脑对文本按照一定的分类体系进行自动分类标记。" class="headerlink" title="文本分类：自然语言处理领域中的一个经典问题，文本分类是利用电脑对文本按照一定的分类体系进行自动分类标记。"></a>文本分类：自然语言处理领域中的一个经典问题，文本分类是利用电脑对文本按照一定的分类体系进行自动分类标记。</h4><blockquote><ul><li>数据来源：从网站上爬取56821条数据中文新闻摘要<ul><li>数据内容：包含10种类别，国际、文化、娱乐、体育、财经、汽车、教育、科技、房产、证券</li></ul></li></ul></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS8xNzg5ZWQ1OTM5ZDI0MTM0YjljZTRkNDVjYTE1ZTBmZGYyMWYyNWFhNDAwYzRmNjg5OGNjNGUwMmFlYTVjNzRl?x-oss-process=image/format,png" alt=""><br>严格意义上来说这个新闻的数据集不是太好，每个类目的新闻数目不是一致的，一个好的数据集对于各个类别分布是比较均匀的。</p><h1 id="1、准备数据"><a href="#1、准备数据" class="headerlink" title="1、准备数据:"></a><strong>1、准备数据:</strong></h1><pre><code>数据进行预处理创建数据集和数据字典创建数据读取器train_reader 和test_reader</code></pre><h1 id="2、配置网络"><a href="#2、配置网络" class="headerlink" title="2、配置网络"></a><strong>2、配置网络</strong></h1><p>定义网络</p><p>定义损失函数：交叉熵损失函数</p><p>定义优化算法：选择优化器，adam，SGD等等</p><h1 id="3、训练网络"><a href="#3、训练网络" class="headerlink" title="3、训练网络"></a><strong>3、训练网络</strong></h1><p>需要对网络进行训练，丢入训练集，去训练我们的模型</p><h1 id="4、模型评估"><a href="#4、模型评估" class="headerlink" title="4、模型评估"></a><strong>4、模型评估</strong></h1><h1 id="5、模型预测"><a href="#5、模型预测" class="headerlink" title="5、模型预测"></a><strong>5、模型预测</strong></h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看当前挂载的数据集目录</span>!ls <span class="token operator">/</span>home<span class="token operator">/</span>aistudio<span class="token operator">/</span>data<span class="token operator">/</span><span class="token comment" spellcheck="true">#将数据移动到 /home/aistudio/data/ 目录下</span>!cp data<span class="token operator">/</span>data6825<span class="token operator">/</span>news_classify_data<span class="token punctuation">.</span>txt data<span class="token operator">/</span></code></pre><pre><code>data6825</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS81NGE4MzIxZWNkMDg0YWU1YjY1OWQ3M2IwYjFlNThiYzFlNDU4MzVkMDdiMjQyZTFhMmZjNWI0NmJiYWU3N2Yx?x-oss-process=image/format,png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入必要的包</span><span class="token keyword">import</span> os  <span class="token comment" spellcheck="true">#系统操作包</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment" spellcheck="true">#计算包</span><span class="token keyword">import</span> shutil<span class="token keyword">import</span> paddle <span class="token comment" spellcheck="true">#paddle的工具包</span><span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建数据集和数据字典</span>data_root_path<span class="token operator">=</span><span class="token string">'/home/aistudio/data/'</span> <span class="token comment" spellcheck="true">#选择数据路径</span><span class="token comment" spellcheck="true">#对我们读取出来的路径创建数据词典</span><span class="token keyword">def</span> <span class="token function">create_data_list</span><span class="token punctuation">(</span>data_root_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>data_root_path <span class="token operator">+</span> <span class="token string">'test_list.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>data_root_path <span class="token operator">+</span> <span class="token string">'train_list.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root_path<span class="token punctuation">,</span> <span class="token string">'dict_txt.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_data<span class="token punctuation">:</span>        dict_txt <span class="token operator">=</span> eval<span class="token punctuation">(</span>f_data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root_path<span class="token punctuation">,</span> <span class="token string">'news_classify_data.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_data<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f_data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        title <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_!_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        l <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_!_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        labs <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root_path<span class="token punctuation">,</span> <span class="token string">'test_list.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_test<span class="token punctuation">:</span>                <span class="token keyword">for</span> s <span class="token keyword">in</span> title<span class="token punctuation">:</span>                    lab <span class="token operator">=</span> str<span class="token punctuation">(</span>dict_txt<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>                    labs <span class="token operator">=</span> labs <span class="token operator">+</span> lab <span class="token operator">+</span> <span class="token string">','</span>                labs <span class="token operator">=</span> labs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                labs <span class="token operator">=</span> labs <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> l <span class="token operator">+</span> <span class="token string">'\n'</span>                f_test<span class="token punctuation">.</span>write<span class="token punctuation">(</span>labs<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root_path<span class="token punctuation">,</span> <span class="token string">'train_list.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_train<span class="token punctuation">:</span>                <span class="token keyword">for</span> s <span class="token keyword">in</span> title<span class="token punctuation">:</span>                    lab <span class="token operator">=</span> str<span class="token punctuation">(</span>dict_txt<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>                    labs <span class="token operator">=</span> labs <span class="token operator">+</span> lab <span class="token operator">+</span> <span class="token string">','</span>                labs <span class="token operator">=</span> labs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                labs <span class="token operator">=</span> labs <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> l <span class="token operator">+</span> <span class="token string">'\n'</span>                f_train<span class="token punctuation">.</span>write<span class="token punctuation">(</span>labs<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据列表生成完成！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把下载得数据生成一个字典</span><span class="token comment" spellcheck="true">#将每一个文本每一个子映射到词典得到一个数字ID，因为输入到模型里面的不是汉字，是一个数字ID</span><span class="token keyword">def</span> <span class="token function">create_dict</span><span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> dict_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    dict_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取已经下载得数据</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把数据生成一个元组</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        title <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_!_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> title<span class="token punctuation">:</span>            dict_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把元组转换成字典，一个字对应一个数字</span>    dict_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> dict_set<span class="token punctuation">:</span>        dict_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 添加未知字符</span>    dict_txt <span class="token operator">=</span> dict<span class="token punctuation">(</span>dict_list<span class="token punctuation">)</span>    end_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"&lt;unk>"</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span>    dict_txt<span class="token punctuation">.</span>update<span class="token punctuation">(</span>end_dict<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把这些字典保存到本地中</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>dict_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>dict_txt<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据字典生成完成！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取字典的长度</span><span class="token keyword">def</span> <span class="token function">get_dict_len</span><span class="token punctuation">(</span>dict_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>dict_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        line <span class="token operator">=</span> eval<span class="token punctuation">(</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>line<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 把生产的数据列表都放在自己的总类别文件夹中</span>    data_root_path <span class="token operator">=</span> <span class="token string">"/home/aistudio/data/"</span>    data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root_path<span class="token punctuation">,</span> <span class="token string">'news_classify_data.txt'</span><span class="token punctuation">)</span>    dict_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root_path<span class="token punctuation">,</span> <span class="token string">"dict_txt.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建数据字典</span>    create_dict<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> dict_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建数据列表</span>    create_data_list<span class="token punctuation">(</span>data_root_path<span class="token punctuation">)</span></code></pre><pre><code>数据字典生成完成！数据列表生成完成！</code></pre><p>创建好的字典：每一个字会对应一个数字ID<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS9lY2FkN2I3MTYzMzM0NjQ4YjE3NDkyOWEwM2M5NjI0Yjg2MGI5MjI0YjhhODRlMDg4MTZjMWU5MTQ2YjA2ZDkz?x-oss-process=image/format,png" alt=""></p><p>创建好的数据列表：文本转化为序列化的表示</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS84NDNkNTE3MjhlMDY0N2E3OWZhODNmYzdjZWRiY2NiZjliOGU1YjlhZGFhYjQyZGI5MGE0MTRkMDAzYTM1ZGQ4?x-oss-process=image/format,png" alt=""><br>每一行代表一句新闻，就是一个样本。</p><p>paddle.reader.xmap_readers():通过多线程方式，通过用户自定义的映射器mapper来映射reader返回的样本（到输出队列)。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建数据读取器train_reader 和test_reader</span><span class="token comment" spellcheck="true"># 训练/测试数据的预处理</span><span class="token keyword">def</span> <span class="token function">data_mapper</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token punctuation">,</span> label <span class="token operator">=</span> sample    data <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span class="token punctuation">,</span> int<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建数据读取器train_reader</span><span class="token keyword">def</span> <span class="token function">train_reader</span><span class="token punctuation">(</span>train_list_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_list_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 打乱数据</span>            np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 开始获取每张图像和标签</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>                data<span class="token punctuation">,</span> label <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> data<span class="token punctuation">,</span> label    <span class="token keyword">return</span> paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>xmap_readers<span class="token punctuation">(</span>data_mapper<span class="token punctuation">,</span> reader<span class="token punctuation">,</span> cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  创建数据读取器test_reader</span><span class="token keyword">def</span> <span class="token function">test_reader</span><span class="token punctuation">(</span>test_list_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>test_list_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>                data<span class="token punctuation">,</span> label <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> data<span class="token punctuation">,</span> label    <span class="token keyword">return</span> paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>xmap_readers<span class="token punctuation">(</span>data_mapper<span class="token punctuation">,</span> reader<span class="token punctuation">,</span> cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span></code></pre><p>至此，数据准备工作已经完成了。 </p><h1 id="卷积神经网络（Convolutional-Neural-Networks-CNN）"><a href="#卷积神经网络（Convolutional-Neural-Networks-CNN）" class="headerlink" title="卷积神经网络（Convolutional Neural Networks, CNN）"></a>卷积神经网络（Convolutional Neural Networks, CNN）</h1><p>输入词向量序列，产生一个特征图（feature map），对特征图采用时间维度上的最大池化（max pooling over time）操作得到此卷积核对应的整句话的特征，最后，将所有卷积核得到的特征拼接起来即为文本的定长向量表示，对于文本分类问题，将其连接至softmax即构建出完整的模型。</p><p>在实际应用中，我们会使用多个卷积核来处理句子，窗口大小相同的卷积核堆叠起来形成一个矩阵，这样可以更高效的完成运算。</p><p>另外，我们也可使用窗口大小不同的卷积核来处理句子.</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS8zNzY2MjYxZjI0YjU0NTE0YjZjYmMwZDMwMjcwYzZhM2YzOGMxZDBhYWY4ZjQ1MGM5N2U4MzAzZWNhNTFmMjA0?x-oss-process=image/format,png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建CNN网络</span><span class="token keyword">def</span> <span class="token function">CNN_net</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>dict_dim<span class="token punctuation">,</span> class_dim<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> emb_dim<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> hid_dim<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>hid_dim2<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        emb <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token operator">=</span>data<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#进模型之前需要得到一个emb词嵌入，得到一个矩阵的编码</span>                                 size<span class="token operator">=</span><span class="token punctuation">[</span>dict_dim<span class="token punctuation">,</span> emb_dim<span class="token punctuation">]</span><span class="token punctuation">)</span>        conv_3 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>nets<span class="token punctuation">.</span>sequence_conv_pool<span class="token punctuation">(</span>                                                 input<span class="token operator">=</span>emb<span class="token punctuation">,</span>                                                 num_filters<span class="token operator">=</span>hid_dim<span class="token punctuation">,</span>                                                 filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#卷积核</span>                                                 act<span class="token operator">=</span><span class="token string">"tanh"</span><span class="token punctuation">,</span>                                                 pool_type<span class="token operator">=</span><span class="token string">"sqrt"</span><span class="token punctuation">)</span>        conv_4 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>nets<span class="token punctuation">.</span>sequence_conv_pool<span class="token punctuation">(</span>                                                 input<span class="token operator">=</span>emb<span class="token punctuation">,</span>                                                 num_filters<span class="token operator">=</span>hid_dim2<span class="token punctuation">,</span>                                                 filter_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                                                 act<span class="token operator">=</span><span class="token string">"tanh"</span><span class="token punctuation">,</span>                                                 pool_type<span class="token operator">=</span><span class="token string">"sqrt"</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>            input<span class="token operator">=</span><span class="token punctuation">[</span>conv_3<span class="token punctuation">,</span> conv_4<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span>class_dim<span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#经过全连接层，将两个cnn的结果拼接起来</span>        <span class="token keyword">return</span> output<span class="token comment" spellcheck="true">#1x10的概率分布的矩阵，10个数，概率最大的数就是当前模型的预测结果</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义输入数据， lod_level不为0指定输入数据为序列数据</span>words <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'words'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> lod_level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#lod_level 处理变长序列，paddle官网的文档中LoDtensor lodlayer的索引 定长的数据不需要考虑这个问题</span>label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'label'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取数据字典长度</span>dict_dim <span class="token operator">=</span> get_dict_len<span class="token punctuation">(</span><span class="token string">'/home/aistudio/data/dict_txt.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取卷积神经网络</span><span class="token comment" spellcheck="true"># model = CNN_net(words, dict_dim, 15)</span><span class="token comment" spellcheck="true"># 获取分类器</span>model <span class="token operator">=</span> CNN_net<span class="token punctuation">(</span>words<span class="token punctuation">,</span> dict_dim<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取损失函数和准确率</span>cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>input<span class="token operator">=</span>model<span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#损失函数</span>avg_cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#每次训练都是一个batch，求一个平均</span>acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>input<span class="token operator">=</span>model<span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取预测程序</span>test_program <span class="token operator">=</span> fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span>for_test<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#clone克隆函数</span><span class="token comment" spellcheck="true"># 定义优化方法</span>optimizer <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>AdagradOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.002</span><span class="token punctuation">)</span>opt <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个执行器，CPU训练速度比较慢</span><span class="token comment" spellcheck="true">#place = fluid.CPUPlace()</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#GPU执行</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行参数初始化</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>[]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取训练数据读取器和测试数据读取器</span>train_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>reader<span class="token operator">=</span>train_reader<span class="token punctuation">(</span><span class="token string">'/home/aistudio/data/train_list.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>test_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>reader<span class="token operator">=</span>test_reader<span class="token punctuation">(</span><span class="token string">'/home/aistudio/data/test_list.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义数据映射器</span>feeder <span class="token operator">=</span> fluid<span class="token punctuation">.</span>DataFeeder<span class="token punctuation">(</span>place<span class="token operator">=</span>place<span class="token punctuation">,</span> feed_list<span class="token operator">=</span><span class="token punctuation">[</span>words<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">EPOCH_NUM<span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">#迭代次数</span>model_save_dir <span class="token operator">=</span> <span class="token string">'/home/aistudio/work/infer_model/'</span><span class="token comment" spellcheck="true"># 开始训练</span><span class="token keyword">for</span> pass_id <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行训练</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_cost<span class="token punctuation">,</span> train_acc <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             feed<span class="token operator">=</span>feeder<span class="token punctuation">.</span>feed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                             fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>avg_cost<span class="token punctuation">,</span> acc<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#每执行100次，打印一次</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Pass:%d, Batch:%d, Cost:%0.5f, Acc:%0.5f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span> batch_id<span class="token punctuation">,</span> train_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 进行测试，读入一批陌生的数据，模型没有见过的数据，</span>    test_costs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    test_accs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test_cost<span class="token punctuation">,</span> test_acc <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>test_program<span class="token punctuation">,</span>                                              feed<span class="token operator">=</span>feeder<span class="token punctuation">.</span>feed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                                              fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>avg_cost<span class="token punctuation">,</span> acc<span class="token punctuation">]</span><span class="token punctuation">)</span>        test_costs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        test_accs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算平均预测损失在和准确率</span>    test_cost <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">(</span>test_costs<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>test_costs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_acc <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">(</span>test_accs<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>test_accs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test:%d, Cost:%0.5f, ACC:%0.5f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span> test_cost<span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存预测模型，可以考虑将这段保存模型的代码放到for循环里面，将每一轮的模型都保存起来</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>     os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span> fluid<span class="token punctuation">.</span>io<span class="token punctuation">.</span>save_inference_model<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">,</span>                             feeded_var_names<span class="token operator">=</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>                             target_vars<span class="token operator">=</span><span class="token punctuation">[</span>model<span class="token punctuation">]</span><span class="token punctuation">,</span>                             executor<span class="token operator">=</span>exe<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练模型保存完成！'</span><span class="token punctuation">)</span> </code></pre><pre><code>Pass:0, Batch:0, Cost:2.30681, Acc:0.09375Pass:0, Batch:100, Cost:0.99743, Acc:0.68750Pass:0, Batch:200, Cost:0.89360, Acc:0.76562Pass:0, Batch:300, Cost:0.92248, Acc:0.70312Test:0, Cost:0.81883, ACC:0.73921Pass:1, Batch:0, Cost:0.90457, Acc:0.67969Pass:1, Batch:100, Cost:0.67305, Acc:0.83594Pass:1, Batch:200, Cost:0.63098, Acc:0.80469Pass:1, Batch:300, Cost:0.76019, Acc:0.77344Test:1, Cost:0.75819, ACC:0.75909Pass:2, Batch:0, Cost:0.73232, Acc:0.76562Pass:2, Batch:100, Cost:0.70476, Acc:0.77344Pass:2, Batch:200, Cost:0.71542, Acc:0.75781Pass:2, Batch:300, Cost:0.63258, Acc:0.78125Test:2, Cost:0.73717, ACC:0.76160Pass:3, Batch:0, Cost:0.56025, Acc:0.82812Pass:3, Batch:100, Cost:0.48580, Acc:0.86719Pass:3, Batch:200, Cost:0.54991, Acc:0.84375Pass:3, Batch:300, Cost:0.67272, Acc:0.78906Test:3, Cost:0.72726, ACC:0.76317Pass:4, Batch:0, Cost:0.53660, Acc:0.82812Pass:4, Batch:100, Cost:0.73550, Acc:0.78906Pass:4, Batch:200, Cost:0.53774, Acc:0.80469Pass:4, Batch:300, Cost:0.46155, Acc:0.85156Test:4, Cost:0.72185, ACC:0.76169Pass:5, Batch:0, Cost:0.65421, Acc:0.78906Pass:5, Batch:100, Cost:0.59889, Acc:0.80469Pass:5, Batch:200, Cost:0.71301, Acc:0.79688Pass:5, Batch:300, Cost:0.69682, Acc:0.81250Test:5, Cost:0.71626, ACC:0.76525Pass:6, Batch:0, Cost:0.72434, Acc:0.75000Pass:6, Batch:100, Cost:0.59109, Acc:0.77344Pass:6, Batch:200, Cost:0.48783, Acc:0.81250Pass:6, Batch:300, Cost:0.57463, Acc:0.81250Test:6, Cost:0.71520, ACC:0.76447Pass:7, Batch:0, Cost:0.50502, Acc:0.84375Pass:7, Batch:100, Cost:0.62133, Acc:0.79688Pass:7, Batch:200, Cost:0.68593, Acc:0.76562Pass:7, Batch:300, Cost:0.55528, Acc:0.80469Test:7, Cost:0.71300, ACC:0.76769Pass:8, Batch:0, Cost:0.60046, Acc:0.76562Pass:8, Batch:100, Cost:0.47617, Acc:0.82812Pass:8, Batch:200, Cost:0.59591, Acc:0.79688Pass:8, Batch:300, Cost:0.66050, Acc:0.76562Test:8, Cost:0.71475, ACC:0.76594Pass:9, Batch:0, Cost:0.40968, Acc:0.84375Pass:9, Batch:100, Cost:0.50980, Acc:0.81250Pass:9, Batch:200, Cost:0.55923, Acc:0.85156Pass:9, Batch:300, Cost:0.42255, Acc:0.87500Test:9, Cost:0.71282, ACC:0.76717Pass:10, Batch:0, Cost:0.44147, Acc:0.88281Pass:10, Batch:100, Cost:0.55140, Acc:0.85938Pass:10, Batch:200, Cost:0.50935, Acc:0.84375Pass:10, Batch:300, Cost:0.56366, Acc:0.83594Test:10, Cost:0.71520, ACC:0.76586Pass:11, Batch:0, Cost:0.55133, Acc:0.79688Pass:11, Batch:100, Cost:0.45308, Acc:0.80469Pass:11, Batch:200, Cost:0.63471, Acc:0.78125Pass:11, Batch:300, Cost:0.52810, Acc:0.80469Test:11, Cost:0.71511, ACC:0.76673Pass:12, Batch:0, Cost:0.51947, Acc:0.83594Pass:12, Batch:100, Cost:0.63086, Acc:0.80469Pass:12, Batch:200, Cost:0.57166, Acc:0.82812Pass:12, Batch:300, Cost:0.59658, Acc:0.75781Test:12, Cost:0.71533, ACC:0.76673Pass:13, Batch:0, Cost:0.34512, Acc:0.89062Pass:13, Batch:100, Cost:0.47249, Acc:0.82812Pass:13, Batch:200, Cost:0.51224, Acc:0.85156Pass:13, Batch:300, Cost:0.45350, Acc:0.84375Test:13, Cost:0.71736, ACC:0.76647Pass:14, Batch:0, Cost:0.45494, Acc:0.85156Pass:14, Batch:100, Cost:0.68085, Acc:0.78125Pass:14, Batch:200, Cost:0.48124, Acc:0.83594Pass:14, Batch:300, Cost:0.47296, Acc:0.85938Test:14, Cost:0.71745, ACC:0.76760Pass:15, Batch:0, Cost:0.73750, Acc:0.77344Pass:15, Batch:100, Cost:0.55038, Acc:0.83594Pass:15, Batch:200, Cost:0.59775, Acc:0.74219Pass:15, Batch:300, Cost:0.47932, Acc:0.82812Test:15, Cost:0.72163, ACC:0.76673Pass:16, Batch:0, Cost:0.31890, Acc:0.90625Pass:16, Batch:100, Cost:0.38017, Acc:0.85156Pass:16, Batch:200, Cost:0.57517, Acc:0.79688Pass:16, Batch:300, Cost:0.44878, Acc:0.87500Test:16, Cost:0.72158, ACC:0.76786Pass:17, Batch:0, Cost:0.43048, Acc:0.88281Pass:17, Batch:100, Cost:0.47145, Acc:0.82031Pass:17, Batch:200, Cost:0.47934, Acc:0.82812Pass:17, Batch:300, Cost:0.36709, Acc:0.89062Test:17, Cost:0.72381, ACC:0.76647Pass:18, Batch:0, Cost:0.35568, Acc:0.88281Pass:18, Batch:100, Cost:0.61057, Acc:0.82031Pass:18, Batch:200, Cost:0.40052, Acc:0.88281Pass:18, Batch:300, Cost:0.45469, Acc:0.83594Test:18, Cost:0.72549, ACC:0.76743Pass:19, Batch:0, Cost:0.41658, Acc:0.86719Pass:19, Batch:100, Cost:0.48703, Acc:0.86719Pass:19, Batch:200, Cost:0.47010, Acc:0.83594Pass:19, Batch:300, Cost:0.35333, Acc:0.84375Test:19, Cost:0.72887, ACC:0.76690训练模型保存完成！</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用训练好的模型进行预测并输出预测结果</span><span class="token comment" spellcheck="true"># 创建执行器</span><span class="token comment" spellcheck="true">#place = fluid.CPUPlace()</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>save_path <span class="token operator">=</span> <span class="token string">'/home/aistudio/work/infer_model/'</span><span class="token comment" spellcheck="true"># 从模型中获取预测程序、输入数据名称列表、分类器</span><span class="token punctuation">[</span>infer_program<span class="token punctuation">,</span> feeded_var_names<span class="token punctuation">,</span> target_var<span class="token punctuation">]</span> <span class="token operator">=</span> fluid<span class="token punctuation">.</span>io<span class="token punctuation">.</span>load_inference_model<span class="token punctuation">(</span>dirname<span class="token operator">=</span>save_path<span class="token punctuation">,</span> executor<span class="token operator">=</span>exe<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取数据</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据字典</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/home/aistudio/data/dict_txt.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_data<span class="token punctuation">:</span>        dict_txt <span class="token operator">=</span> eval<span class="token punctuation">(</span>f_data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dict_txt <span class="token operator">=</span> dict<span class="token punctuation">(</span>dict_txt<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把字符串数据转换成列表数据</span>    keys <span class="token operator">=</span> dict_txt<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 判断是否存在未知字符</span>        <span class="token keyword">if</span> <span class="token operator">not</span> s <span class="token keyword">in</span> keys<span class="token punctuation">:</span>            s <span class="token operator">=</span> <span class="token string">'&lt;unk>'</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>dict_txt<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datadata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取图片数据</span>data1 <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token string">'在获得诺贝尔文学奖7年之后，莫言15日晚间在山西汾阳贾家庄如是说'</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token string">'综合“今日美国”、《世界日报》等当地媒体报道，芝加哥河滨警察局表示，'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data1<span class="token punctuation">)</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取每句话的单词数量</span>base_shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 生成预测数据</span>tensor_words <span class="token operator">=</span> fluid<span class="token punctuation">.</span>create_lod_tensor<span class="token punctuation">(</span>data<span class="token punctuation">,</span> base_shape<span class="token punctuation">,</span> place<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行预测</span>result <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>infer_program<span class="token punctuation">,</span>                 feed<span class="token operator">=</span><span class="token punctuation">{</span>feeded_var_names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tensor_words<span class="token punctuation">}</span><span class="token punctuation">,</span>                 fetch_list<span class="token operator">=</span>target_var<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分类名称</span>names <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'文化'</span><span class="token punctuation">,</span> <span class="token string">'娱乐'</span><span class="token punctuation">,</span> <span class="token string">'体育'</span><span class="token punctuation">,</span> <span class="token string">'财经'</span><span class="token punctuation">,</span><span class="token string">'房产'</span><span class="token punctuation">,</span> <span class="token string">'汽车'</span><span class="token punctuation">,</span> <span class="token string">'教育'</span><span class="token punctuation">,</span> <span class="token string">'科技'</span><span class="token punctuation">,</span> <span class="token string">'国际'</span><span class="token punctuation">,</span> <span class="token string">'证券'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取结果概率最大的label</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lab <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#10个概率值，对其进行排序，选择最大的那个概率，(-1)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预测结果标签为：%d， 名称为：%s， 概率为：%f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>lab<span class="token punctuation">,</span> names<span class="token punctuation">[</span>lab<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>lab<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>预测结果标签为：0， 名称为：文化， 概率为：0.949490预测结果标签为：8， 名称为：国际， 概率为：0.472569</code></pre><pre class=" language-python"><code class="language-python"></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成对抗样本的方法|攻击方法</title>
      <link href="/posts/8a27.html"/>
      <url>/posts/8a27.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="对抗样本"><a href="#对抗样本" class="headerlink" title="对抗样本"></a>对抗样本</h2><h3 id="1-Biggio′s-attack"><a href="#1-Biggio′s-attack" class="headerlink" title="1.Biggio′s attack"></a>1.Biggio′s attack</h3><p>Biggio[22]等人首先针对传统机器学习分类器（如SVM和三层全连接神经网络）的MNIST手写数字识别数据集生成对抗样本。<br>它通过优化判别函数来误导分类器。</p><h3 id="2-Szegedy′s-limited-memory-BFGS-L-BFGS-attack"><a href="#2-Szegedy′s-limited-memory-BFGS-L-BFGS-attack" class="headerlink" title="2. Szegedy′s limited-memory BFGS (L-BFGS) attack"></a>2. Szegedy′s limited-memory BFGS (L-BFGS) attack</h3><p>Szegedy[8]等人首次证明了可以通过对图像添加小量的人类察觉不到的扰动误导深度神经网络图像分类器做出错误的分类。他们首先尝试求解让神经网络做出误分类的最小扰动的方程。作者认为，深度神经网络所具有的强大的非线性表达能力和模型的过拟合是可能产生对抗性样本原因之一。<br><img src="https://img-blog.csdnimg.cn/20200703112535194.png" alt="在这里插入图片描述"><br>其中，x表示原始图像，x’表示添加微小扰动后的图片，x-x’则表示扰动大小，$\left|x-x^{\prime}\right|_{2}^{2}$表示扰动的L2范数，C()是深度神经网络的分类器。<br>Szegedy等人引入损失函数，即寻找最小的损失函数添加项，使得神经网络做出误分类，这就将此问题转化成了凸优化过程。</p><p>$\min c\left|x-x^{\prime}\right|_{2}^{2}+\mathcal{L}\left(\theta, x^{\prime}, t\right), \quad$ s.t. $\quad x^{\prime} \in[0,1]^{m}$<br>L( , , )计算分类器的loss</p><h3 id="3-Fast-gradient-sign-method-FGSM"><a href="#3-Fast-gradient-sign-method-FGSM" class="headerlink" title="3.Fast gradient sign method (FGSM)"></a>3.Fast gradient sign method (FGSM)</h3><p>Goodfellow等人[9]认为高维空间下深度神经网络的线性线性行为是导致该问题（存在对抗样本）的根本原因。提出了一种一步生成法来快速生成对抗样本，可以有效计算对抗扰动。<br><img src="https://img-blog.csdnimg.cn/20200703141115231.png" alt="在这里插入图片描述"><br>$\eta=\varepsilon \operatorname{sgn}\left(\nabla_{x} \mathcal{L}(\theta, x, t)\right)$<br>$x$：原始图像<br>$\eta$：扰动<br>$\varepsilon$：表示控制扰动大小的自定义参数<br>$\mathcal{L}$：损失函数<br>$\operatorname{sgn}$：符号函数<br>FGSM的核心思想是：通过让扰动方向与梯度方向一致，使损失函数值变化最大，进而使分类器分类结果变化最大。sign函数保证了扰动方向与梯度方向一致；对损失函数求偏导。<br>FGSM 算法优点是只需一步迭代就能生成对抗样本，并且可以通过控制参数$\varepsilon$生成任意$L_{\infty}$范数距离的对抗样本；缺点是扰动自身抗干扰能力不强，容易受到其他噪声的影响； 另外，模型损失函数与模型输入并不是完全线性的，这说明该算法生成的对抗样本扰动不是最优扰动。</p><h3 id="4-DeepFool"><a href="#4-DeepFool" class="headerlink" title="4.DeepFool"></a>4.DeepFool</h3><p>Moosavi-Dezfooli 等人 [32] 通过迭代计算的方法生成能够使分类器模型产生误识别的最小规范对抗扰动，将位于分类边界内的图像逐步推到边界外，直到出现错误分类。作者证明他们生成的扰动比 FGSM 更小，同时有相似的欺骗率。<br>Deepfool 算法生成对抗样本过程与使用 L-BFGS 生成对抗样本过程类似，主要区别是： Deepfool 算法每次迭代都计算当前样本和各决策边界的距离，然后选择向最近的决策边界迭代生成扰动。</p><h3 id="5-Jacobian-based-saliency-map-attack（JSMA）"><a href="#5-Jacobian-based-saliency-map-attack（JSMA）" class="headerlink" title="5.Jacobian-based saliency map attack（JSMA）"></a>5.Jacobian-based saliency map attack（JSMA）</h3><p>基于雅可比矩阵的显着性图攻击（JSMA）[33]介绍了一种基于计分函数F的雅可比矩阵的方法。 通过迭代操纵对模型输出影响最大的像素，可以将其视为贪婪攻击算法。<br>对抗攻击文献中通常使用的方法是限制扰动的 L∞或 L2 范数的值以使对抗样本中的扰动无法被人察觉。但 JSMA[33] 提出了限制 L0 范数的方法，即仅改变几个像素的值，而不是扰动整张图像。</p><h3 id="6-Basic-iterative-method-BIM-Projected-gradient-descent-PGD-attack"><a href="#6-Basic-iterative-method-BIM-Projected-gradient-descent-PGD-attack" class="headerlink" title="6.Basic iterative method (BIM)/Projected gradient descent (PGD) attack"></a>6.Basic iterative method (BIM)/Projected gradient descent (PGD) attack</h3><p>针对 FGSM 算法存在的问题， Kurakin 等人[15,31]在 FGSM 算法基础上提出了一种以多步迭代的方式生成对抗样本的方法 BIM。<br>one-step 方法通过一大步运算增大分类器的损失函数而进行图像扰动，因而可以直接将其扩展为通过多个小步增大损失函数的变体，从而我们得到 Basic Iterative Methods（BIM）</p><h3 id="7-Carlini-amp-Wagner′s-attack（CW）"><a href="#7-Carlini-amp-Wagner′s-attack（CW）" class="headerlink" title="7.Carlini &amp; Wagner′s attack（CW）"></a>7.Carlini &amp; Wagner′s attack（CW）</h3><p>Carlini 和 Wagner[36] 提出了三种对抗攻击方法，通过限制 L∞、L2 和 L0 范数使得扰动无法被察觉。实验证明 defensive distillation （防御性蒸馏）完全无法防御这三种攻击。该算法生成的对抗扰动可以从 unsecured 的网络迁移到 secured 的网络上，从而实现黑盒攻击。<br>C&amp;W是一种基于目标函数优化的对抗样本攻击算法，其核心思想是：假设对抗样本是一个变量，那么要使其成功攻击分类器模型，必须满足两个条件， 一是其与原始样本的距离要尽可能的小，二是其能够误导分类器模型对其进行错误分类。</p><h3 id="8-Ground-truth-attack"><a href="#8-Ground-truth-attack" class="headerlink" title="8.Ground truth attack"></a>8.Ground truth attack</h3><p>Carlini等人[35]试图找到可证明的最强攻击，即找到理论上最小失真的对抗样本的方法。<br>该攻击基于Reluplex [36]，Reluplex是一种用于验证神经网络属性的算法。 它将模型参数F和数据（x,y）编码为线性编程系统的主体，然后求解该系统以检查在x’的邻居中是否存在可以欺骗模型的合格样本x’。 如果我们一直减小搜索区域的半径，直到系统确定不存在一个x’会欺骗模型，那么最后发现的对抗样本被称为标注的真实数据的对抗样本，因为事实证明它与x的相似性最小。<br>Ground truth攻击是计算分类器精确鲁棒性（最小扰动）的第一项工作。但是，该方法涉及使用可满足性模理论（SMT）求解器，（一种复杂算法， 用于检验一系列理论的可满足性），这将使其效率变慢并且无法扩展到大型网络。近期的研究工作[37,38]提高了    Ground truth攻击的效率。</p><p><img src="https://img-blog.csdnimg.cn/20200703104729496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="附录（上述提到算法的论文）"><a href="#附录（上述提到算法的论文）" class="headerlink" title="附录（上述提到算法的论文）"></a>附录（上述提到算法的论文）</h3><ul><li>[22]B. Biggio, I. Corona, D. Maiorca, B. Nelson, N. Šrndić, P. Laskov, G. Giacinto, F. Roli. Evasion attacks against machine learning at test time. In Proceedings of European Conference on Machine Learning and Knowledge Discovery in Databases, Springer, Prague, Czech Republic, pp.387–402, 2013. DOI: 10.1007/978-3-642-40994-3_25</li><li>[8]C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. Goodfellow, R. Fergus. Intriguing properties of neural networks. ArXiv: 1312.6199, 2013.</li><li>[9]I. J. Goodfellow, J. Shlens, C. Szegedy. Explaining and harnessing adversarial examples. ArXiv: 1412.6572, 2014.</li><li>[32]S. M. Moosavi-Dezfooli, A. Fawzi, P. Frossard. DeepFool:A simple and accurate method to fool deep neural networks. In Proceedings of IEEE Conference on Computer Vision and Pattern Recognition, IEEE, Las Vegas, USA, pp.2574–2582, 2016. DOI: 10.1109/CVPR.2016.282.</li><li>[33]N. Papernot, P. McDaniel, S. Jha, M. Fredrikson, Z. B.Celik, A. Swami. The limitations of deep learning in adversarial settings. In Proceedings of IEEE European Symposium on Security and Privacy, IEEE, Saarbrucken, Germany, pp.372−387, 2016. DOI: 10.1109/EuroSP. 2016.36.</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kaggle-泰坦尼克号生存者预测比赛|初级入门</title>
      <link href="/posts/d25d.html"/>
      <url>/posts/d25d.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li><p>泰坦尼克号的沉没是历史上最臭名昭著的沉船事件之一。1912年4月15日，泰坦尼克号在处女航中撞上冰山沉没，2224名乘客和船员中1502人遇难。这一耸人听闻的悲剧震惊了国际社会，并导致了更好的船舶安全条例。</p></li><li><p>沉船造成如此巨大人员伤亡的原因之一是没有足够的救生艇来容纳乘客和船员。虽然在沉船事件中幸存下来也有一些运气的因素，但有些人比其他人更有可能幸存下来，比如妇女、儿童和上层阶级。</p></li><li><p>在这个挑战中，我们要求你完成对可能存活下来的人的分析。我们特别要求你们运用机器学习工具来预测哪些乘客在灾难中幸存下来。<br>数据来源：<a href="https://www.kaggle.com/c/titanic/data" target="_blank" rel="noopener">https://www.kaggle.com/c/titanic/data</a></p><h3 id="初探数据"><a href="#初探数据" class="headerlink" title="初探数据"></a>初探数据</h3><p>首先看看数据，长什么样</p></li></ul><p>pandas是常用的python数据处理包，把csv文件读入称dataframe格式，数据分为两部分：训练集和测试集，训练集891行12列，测试集419行11列（无survived列）。<br><img src="https://img-blog.csdnimg.cn/20200626190549962.png" alt="在这里插入图片描述"><br>各列的含义如下：<br>|PassengerId   |乘客ID编号  |<br>|–|–|<br>| Pclass | 乘客等级|<br>|Name   | 姓名 |<br>|Sex   | 性别 |<br>| Age  | 年龄 |<br>| SibSp  |堂兄弟/妹个数  |<br>| Parch  |父母与小孩个数  |<br>| Ticket   |船票信息  |<br>| Fare   |票价  |<br>|Cabin    |客舱  |<br>| Embarked   |登船港口C,Q,S  |</p><h4 id="1-数据初步认识"><a href="#1-数据初步认识" class="headerlink" title="1.数据初步认识"></a>1.数据初步认识</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df_train<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200627073604715.png" alt="在这里插入图片描述"><br>上面的数据告诉我们训练集共有891名乘客，但是他们有些属性不全，比如：</p><ul><li>Age属性只有714名乘客有记录</li><li>Cabin则只有204名乘客有记录<br>可以采用pandans中的describe()方法，对数据中的每一列数进行统计分析。得到数值型数据的一些分布（而有些属性比如姓名是文本型，登船港口是类目性，这些用describe()方法是看不到的）<br>df_train.describe()<br><img src="https://img-blog.csdnimg.cn/20200627074330643.png" alt="在这里插入图片描述"><br>上面可以得出，大概有38.3%的人获救了，乘客的平均年龄是29.7岁。<h4 id="2-数据初步分析"><a href="#2-数据初步分析" class="headerlink" title="2.数据初步分析"></a>2.数据初步分析</h4>每个乘客都有这么多属性，如何知道哪些属性更有用，又该如何使用呢。所以我们要知道，对数据的认识非常重要！看看单一/多个属性和最后的survived之间有什么样的关系。<br>下面使用统计学与绘图，了解数据之间的相关性，主要在以下方面：</li><li>1.性别与幸存率的关系</li><li>2.乘客社会等级与幸存率的关系</li><li>3.配偶及兄弟姐妹数与幸存率的关系</li><li>4.父母及子女数与幸存率的关系</li><li>5.年龄与幸存率的关系</li><li>6.Embarked登港港口与幸存率的关系</li><li>7.称呼与幸存率的关系</li><li>8.家庭人数与幸存率的关系</li><li>9.不同船舱的乘客与幸存率的关系<h5 id="2-1性别与幸存率的关系"><a href="#2-1性别与幸存率的关系" class="headerlink" title="2.1性别与幸存率的关系"></a>2.1性别与幸存率的关系</h5><img src="https://img-blog.csdnimg.cn/20200627082626924.png" alt="在这里插入图片描述"><h5 id="2-乘客社会等级与幸存率的关系"><a href="#2-乘客社会等级与幸存率的关系" class="headerlink" title="2.乘客社会等级与幸存率的关系"></a>2.乘客社会等级与幸存率的关系</h5></li></ul><pre class=" language-python"><code class="language-python">sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200627082753277.png" alt="在这里插入图片描述"><br>由图看出，乘客社会等级越高，幸存率越高。</p><h5 id="3-配偶及兄弟姐妹数与幸存率的关系"><a href="#3-配偶及兄弟姐妹数与幸存率的关系" class="headerlink" title="3.配偶及兄弟姐妹数与幸存率的关系"></a>3.配偶及兄弟姐妹数与幸存率的关系</h5><pre class=" language-python"><code class="language-python">sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200627082847917.png" alt="在这里插入图片描述"><br>4.父母及子女数与幸存率的关系</p><pre class=" language-python"><code class="language-python">sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'Parch'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020062708292029.png" alt="在这里插入图片描述"><br>父母与子女数适中的乘客幸存率较高</p><h5 id="5-年龄与幸存率的关系"><a href="#5-年龄与幸存率的关系" class="headerlink" title="5.年龄与幸存率的关系"></a>5.年龄与幸存率的关系</h5><pre class=" language-python"><code class="language-python">facet <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train<span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">"Survived"</span><span class="token punctuation">,</span>aspect<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>facet<span class="token punctuation">.</span>map<span class="token punctuation">(</span>sns<span class="token punctuation">.</span>kdeplot<span class="token punctuation">,</span><span class="token string">'Age'</span><span class="token punctuation">,</span>shade<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>facet<span class="token punctuation">.</span>set<span class="token punctuation">(</span>xlim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>facet<span class="token punctuation">.</span>add_legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'density'</span><span class="token punctuation">)</span> </code></pre><p><img src="https://img-blog.csdnimg.cn/20200627084408414.png" alt="在这里插入图片描述"><br>从不同生还情况的密度图可以看出，在年龄15岁的左侧，生还率有明显差别，密度图非交叉区域面积非常大，但在其他年龄段，则差别不是很明显，认为是随机所致，因此可以考虑将年龄偏小的区域分离出来。</p><h5 id="6-Embarked登港港口与幸存率的关系"><a href="#6-Embarked登港港口与幸存率的关系" class="headerlink" title="6.Embarked登港港口与幸存率的关系"></a>6.Embarked登港港口与幸存率的关系</h5><p>登船港口（Embarked）：</p><ul><li>出发地点：S = 英国南安普顿Southampton</li><li>途径地点1：C = 法国 瑟堡市Cherbourg</li><li>途径地点2：Q = 爱尔兰 昆士敦Queenstown<br><img src="https://img-blog.csdnimg.cn/20200627084910905.png" alt="在这里插入图片描述"><br>由图发现C地的生存率更高。</li></ul><p>7.称呼与幸存率的关系<br>定义以下几种头衔类型，</p><ul><li>Officer政府官员</li><li>Royalty王室（皇室）</li><li>Mr已婚男士</li><li>Mrs已婚妇女</li><li>Miss年轻未婚女子</li><li>Master有技能的人/教师<pre class=" language-python"><code class="language-python">all_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>all_data<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> all_data<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Title_Dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Title_Dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Capt'</span><span class="token punctuation">,</span> <span class="token string">'Col'</span><span class="token punctuation">,</span> <span class="token string">'Major'</span><span class="token punctuation">,</span> <span class="token string">'Dr'</span><span class="token punctuation">,</span> <span class="token string">'Rev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Officer'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Title_Dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Don'</span><span class="token punctuation">,</span> <span class="token string">'Sir'</span><span class="token punctuation">,</span> <span class="token string">'the Countess'</span><span class="token punctuation">,</span> <span class="token string">'Dona'</span><span class="token punctuation">,</span> <span class="token string">'Lady'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Royalty'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Title_Dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Mme'</span><span class="token punctuation">,</span> <span class="token string">'Ms'</span><span class="token punctuation">,</span> <span class="token string">'Mrs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Mrs'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Title_Dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Mlle'</span><span class="token punctuation">,</span> <span class="token string">'Miss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Miss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Title_Dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Mr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Mr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Title_Dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Master'</span><span class="token punctuation">,</span><span class="token string">'Jonkheer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Master'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><p>all_data[‘Title’] = all_data[‘Title’].map(Title_Dict)<br>sns.barplot(x=”Title”, y=”Survived”, data=all_data)<br>plt.show()</p><pre><code>![在这里插入图片描述](https://img-blog.csdnimg.cn/20200627085132971.png)8.家庭人数与幸存率的关系这里新增FamilyLabel特征，这个特征等于父母儿童+配偶兄弟姐妹+1，在文中就是 FamilyLabel=Parch+SibSp+1，然后将FamilySize分为三类：```pythonall_data['FamilySize']=all_data['SibSp']+all_data['Parch']+1sns.barplot(x="FamilySize", y="Survived", data=all_data)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200627094509738.png" alt="在这里插入图片描述"></p><h5 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snsplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'Cabin'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span><span class="token string">'Embarked'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>train<span class="token punctuation">[</span>train<span class="token punctuation">.</span>Survived<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Age<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>train<span class="token punctuation">[</span>train<span class="token punctuation">.</span>Survived<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Age<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>train<span class="token punctuation">[</span>train<span class="token punctuation">.</span>Survived<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Fare<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>train<span class="token punctuation">[</span>train<span class="token punctuation">.</span>Survived<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Fare<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><pre class=" language-python"><code class="language-python">train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span><span class="token string">'Parch'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span><span class="token string">'Parch'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>titanic<span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>titanic<span class="token operator">=</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>titanic<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#get_dummies one-hot encoding将离散特征的取值扩展到欧式空间，比如性别本事是一个特征，经过one-hot编码后，就变成了男或女两个特征</span>train<span class="token operator">=</span>titanic<span class="token punctuation">[</span><span class="token punctuation">:</span>len_train<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#前len_train行为训练集</span>test<span class="token operator">=</span>titanic<span class="token punctuation">[</span>len_train<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#后面的为测试集</span><span class="token comment" spellcheck="true"># Lets change type of target</span>train<span class="token punctuation">.</span>Survived<span class="token operator">=</span>train<span class="token punctuation">.</span>Survived<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span>train<span class="token punctuation">.</span>Survived<span class="token punctuation">.</span>dtypextrain<span class="token operator">=</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"Survived"</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>ytrain<span class="token operator">=</span>train<span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span>xtest<span class="token operator">=</span>test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"Survived"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h4 id="模型的构建及训练"><a href="#模型的构建及训练" class="headerlink" title="模型的构建及训练"></a>模型的构建及训练</h4><p>随机森林</p><pre class=" language-python"><code class="language-python">RF<span class="token operator">=</span>RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>PRF<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'n_estimators'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'criterion'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'gini'</span><span class="token punctuation">,</span><span class="token string">'entropy'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>GSRF<span class="token operator">=</span>GridSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>RF<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>PRF<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>scores_rf<span class="token operator">=</span>cross_val_score<span class="token punctuation">(</span>GSRF<span class="token punctuation">,</span>xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">,</span>scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>scores_rf<span class="token punctuation">)</span></code></pre><p>SVC</p><pre class=" language-python"><code class="language-python">svc<span class="token operator">=</span>make_pipeline<span class="token punctuation">(</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SVC<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.0001</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>PSVM<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'svc__C'</span><span class="token punctuation">:</span>r<span class="token punctuation">,</span> <span class="token string">'svc__kernel'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token string">'svc__C'</span><span class="token punctuation">:</span>r<span class="token punctuation">,</span> <span class="token string">'svc__gamma'</span><span class="token punctuation">:</span>r<span class="token punctuation">,</span> <span class="token string">'svc__kernel'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'rbf'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>GSSVM<span class="token operator">=</span>GridSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>svc<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>PSVM<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>scores_svm<span class="token operator">=</span>cross_val_score<span class="token punctuation">(</span>GSSVM<span class="token punctuation">,</span> xtrain<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span><span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span>scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>scores_svm<span class="token punctuation">)</span></code></pre><h4 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> make_pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"input/train.csv"</span><span class="token punctuation">)</span>test<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"input/test.csv"</span><span class="token punctuation">)</span>test2<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"input/test.csv"</span><span class="token punctuation">)</span>titanic<span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>len_train<span class="token operator">=</span>train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#train数据的行数</span><span class="token keyword">print</span><span class="token punctuation">(</span>titanic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>titanic<span class="token punctuation">.</span>dtypes<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#对数据进行排序</span>titanic<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span>titanic<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#查看特定类型的数据行</span>titanic<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span> <span class="token string">'float'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>titanic<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>titanic<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#只显示存在缺失值的属性，如果没有titanic.isnull().sum()>0则不确实的特征属性会显示为0</span>train<span class="token punctuation">.</span>Fare<span class="token operator">=</span>train<span class="token punctuation">.</span>Fare<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">.</span>Fare<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Fare票价的缺失值用平均值填充</span>test<span class="token punctuation">.</span>Fare<span class="token operator">=</span>test<span class="token punctuation">.</span>Fare<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">.</span>Fare<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train<span class="token punctuation">.</span>Cabin<span class="token operator">=</span>train<span class="token punctuation">.</span>Cabin<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">"unknow"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#船舱座位号空的用unknow填充</span>test<span class="token punctuation">.</span>Cabin<span class="token operator">=</span>test<span class="token punctuation">.</span>Cabin<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">"unknow"</span><span class="token punctuation">)</span>train<span class="token punctuation">.</span>Embarked<span class="token operator">=</span>train<span class="token punctuation">.</span>Embarked<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">.</span>Embarked<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#mode为求众数(频数最高的值)</span>test<span class="token punctuation">.</span>Embarked<span class="token operator">=</span>test<span class="token punctuation">.</span>Embarked<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">.</span>Embarked<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>train<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>test<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#对年龄缺失值的补全，先提取姓名中的称谓，判断大致身份，然后根据各不同称谓的平均年龄，对同类</span><span class="token comment" spellcheck="true">#缺失值进行补齐。</span>newtitles<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"Capt"</span><span class="token punctuation">:</span>       <span class="token string">"Officer"</span><span class="token punctuation">,</span>    <span class="token string">"Col"</span><span class="token punctuation">:</span>        <span class="token string">"Officer"</span><span class="token punctuation">,</span>    <span class="token string">"Major"</span><span class="token punctuation">:</span>      <span class="token string">"Officer"</span><span class="token punctuation">,</span>    <span class="token string">"Jonkheer"</span><span class="token punctuation">:</span>   <span class="token string">"Royalty"</span><span class="token punctuation">,</span>    <span class="token string">"Don"</span><span class="token punctuation">:</span>        <span class="token string">"Royalty"</span><span class="token punctuation">,</span>    <span class="token string">"Sir"</span> <span class="token punctuation">:</span>       <span class="token string">"Royalty"</span><span class="token punctuation">,</span>    <span class="token string">"Dr"</span><span class="token punctuation">:</span>         <span class="token string">"Officer"</span><span class="token punctuation">,</span>    <span class="token string">"Rev"</span><span class="token punctuation">:</span>        <span class="token string">"Officer"</span><span class="token punctuation">,</span>    <span class="token string">"the Countess"</span><span class="token punctuation">:</span><span class="token string">"Royalty"</span><span class="token punctuation">,</span>    <span class="token string">"Dona"</span><span class="token punctuation">:</span>       <span class="token string">"Royalty"</span><span class="token punctuation">,</span>    <span class="token string">"Mme"</span><span class="token punctuation">:</span>        <span class="token string">"Mrs"</span><span class="token punctuation">,</span>    <span class="token string">"Mlle"</span><span class="token punctuation">:</span>       <span class="token string">"Miss"</span><span class="token punctuation">,</span>    <span class="token string">"Ms"</span><span class="token punctuation">:</span>         <span class="token string">"Mrs"</span><span class="token punctuation">,</span>    <span class="token string">"Mr"</span> <span class="token punctuation">:</span>        <span class="token string">"Mr"</span><span class="token punctuation">,</span>    <span class="token string">"Mrs"</span> <span class="token punctuation">:</span>       <span class="token string">"Mrs"</span><span class="token punctuation">,</span>    <span class="token string">"Miss"</span> <span class="token punctuation">:</span>      <span class="token string">"Miss"</span><span class="token punctuation">,</span>    <span class="token string">"Master"</span> <span class="token punctuation">:</span>    <span class="token string">"Master"</span><span class="token punctuation">,</span>    <span class="token string">"Lady"</span> <span class="token punctuation">:</span>      <span class="token string">"Royalty"</span><span class="token punctuation">}</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>train<span class="token punctuation">.</span>title<span class="token punctuation">.</span>map<span class="token punctuation">(</span>newtitles<span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>test<span class="token punctuation">.</span>title<span class="token punctuation">.</span>map<span class="token punctuation">(</span>newtitles<span class="token punctuation">)</span>train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Age<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> newage <span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>cols<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Sex<span class="token operator">=</span>cols<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    Age<span class="token operator">=</span>cols<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>Age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> title<span class="token operator">==</span><span class="token string">'Master'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">"male"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">4.57</span>        <span class="token keyword">elif</span> title<span class="token operator">==</span><span class="token string">'Miss'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">'female'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">21.8</span>        <span class="token keyword">elif</span> title<span class="token operator">==</span><span class="token string">'Mr'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">'male'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">32.37</span>        <span class="token keyword">elif</span> title<span class="token operator">==</span><span class="token string">'Mrs'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">'female'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">35.72</span>        <span class="token keyword">elif</span> title<span class="token operator">==</span><span class="token string">'Officer'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">'female'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">49</span>        <span class="token keyword">elif</span> title<span class="token operator">==</span><span class="token string">'Officer'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">'male'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">46.56</span>        <span class="token keyword">elif</span> title<span class="token operator">==</span><span class="token string">'Royalty'</span> <span class="token operator">and</span> Sex<span class="token operator">==</span><span class="token string">'female'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">40.50</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">42.33</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Agetrain<span class="token punctuation">.</span>Age <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>newage<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>Age <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>newage<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#droping features I won't use in model</span><span class="token comment" spellcheck="true">#train.drop(['PassengerId','Name','Ticket','SibSp','Parch','Ticket','Cabin']</span><span class="token comment" spellcheck="true">## 数据准备</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span><span class="token string">'Parch'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span><span class="token string">'Parch'</span><span class="token punctuation">,</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span><span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>titanic<span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>titanic<span class="token operator">=</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>titanic<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#get_dummies one-hot encoding将离散特征的取值扩展到欧式空间，比如性别本事是一个特征，经过one-hot编码后，就变成了男或女两个特征</span>train<span class="token operator">=</span>titanic<span class="token punctuation">[</span><span class="token punctuation">:</span>len_train<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#前len_train行为训练集</span>test<span class="token operator">=</span>titanic<span class="token punctuation">[</span>len_train<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#后面的为测试集</span><span class="token comment" spellcheck="true"># Lets change type of target</span>train<span class="token punctuation">.</span>Survived<span class="token operator">=</span>train<span class="token punctuation">.</span>Survived<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span>train<span class="token punctuation">.</span>Survived<span class="token punctuation">.</span>dtypextrain<span class="token operator">=</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"Survived"</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>ytrain<span class="token operator">=</span>train<span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span>xtest<span class="token operator">=</span>test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"Survived"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>RF<span class="token operator">=</span>RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>PRF<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'n_estimators'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'criterion'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'gini'</span><span class="token punctuation">,</span><span class="token string">'entropy'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>GSRF<span class="token operator">=</span>GridSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>RF<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>PRF<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>scores_rf<span class="token operator">=</span>cross_val_score<span class="token punctuation">(</span>GSRF<span class="token punctuation">,</span>xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">,</span>scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>scores_rf<span class="token punctuation">)</span>svc<span class="token operator">=</span>make_pipeline<span class="token punctuation">(</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SVC<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.0001</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>PSVM<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'svc__C'</span><span class="token punctuation">:</span>r<span class="token punctuation">,</span> <span class="token string">'svc__kernel'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token string">'svc__C'</span><span class="token punctuation">:</span>r<span class="token punctuation">,</span> <span class="token string">'svc__gamma'</span><span class="token punctuation">:</span>r<span class="token punctuation">,</span> <span class="token string">'svc__kernel'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'rbf'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>GSSVM<span class="token operator">=</span>GridSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>svc<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>PSVM<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>scores_svm<span class="token operator">=</span>cross_val_score<span class="token punctuation">(</span>GSSVM<span class="token punctuation">,</span> xtrain<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span><span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span>scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>scores_svm<span class="token punctuation">)</span>model<span class="token operator">=</span>GSSVM<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span>pred<span class="token operator">=</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span>output<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'PassengerId'</span><span class="token punctuation">:</span>test2<span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'Survived'</span><span class="token punctuation">:</span>pred<span class="token punctuation">}</span><span class="token punctuation">)</span>output<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submission.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python kaggle 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python+opencv实现人脸识别|采用现成训练好的模型</title>
      <link href="/posts/63ec.html"/>
      <url>/posts/63ec.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="一、图片人脸检测（opencv）"><a href="#一、图片人脸检测（opencv）" class="headerlink" title="一、图片人脸检测（opencv）"></a>一、图片人脸检测（opencv）</h3><h4 id="1、安装opencv环境"><a href="#1、安装opencv环境" class="headerlink" title="1、安装opencv环境"></a>1、安装opencv环境</h4><p>介绍windows中opencv在python3上的实现，我的系统环境win10+python3.6+opcv3.4.1</p><p>首先去网站下载OpenCV对应的.whl版本压缩包，网址：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a> 本人下载的版本是：opencv_python‑3.4.1‑cp36‑cp36m‑win_amd64.whl 64位系统对应python3.6的，下载到F盘根目录。<br>链接：<a href="https://pan.baidu.com/s/1aXK97tnxFVA15fH7TFi1_Q" target="_blank" rel="noopener">百度云链接</a><br>提取码：j5uy<br>接着用pip命令安装</p><blockquote><p><code>pip install F:\opencv_python-3.4.1-cp36-cp36m-win_amd64.whl</code></p></blockquote><p>当命令行窗口显示：</p><blockquote><p>Processing F:\opencv_python-3.4.1-cp36-cp36m-win_amd64.whl<br>Installing collected packages: opencv-python<br>Successfully installed opencv-python-3.4.1</p></blockquote><p>说明已经安装成功。<br>到此，opencv的环境配置已经弄好了，可以在命令行中运行python，然后import cv2  打印输出opencv的版本号，看能否正常输出。<br><img src="https://img-blog.csdnimg.cn/2020062316223081.png" alt="在这里插入图片描述"></p><h4 id="2、具体实现代码"><a href="#2、具体实现代码" class="headerlink" title="2、具体实现代码"></a>2、具体实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'img/1.png'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取图片</span>gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换灰色</span><span class="token comment" spellcheck="true"># OpenCV人脸识别分类器</span>classifier <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>r<span class="token string">'F:\python-project\opencv-master\haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建人脸检测级联分类器对象实例</span>color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 定义绘制颜色为绿色</span><span class="token comment" spellcheck="true"># 调用识别人脸</span>faceRects <span class="token operator">=</span> classifier<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>    gray<span class="token punctuation">,</span> scaleFactor<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">,</span> minNeighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> minSize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数说明，scaleFactor：图像缩放比例，可理解为相机的X倍镜，minNeighbors：对特征检测点周边多少有效点同时检测，这样可避免因选取的特征检测点太小而导致遗漏</span><span class="token comment" spellcheck="true">#minSize：特征检测点的最小尺寸</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>faceRects<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 大于0则检测到人脸</span>    <span class="token keyword">for</span> faceRect <span class="token keyword">in</span> faceRects<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 单独框出每一张人脸</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token operator">=</span> faceRect        <span class="token comment" spellcheck="true"># 框出人脸</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> h<span class="token punctuation">,</span> y <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 左眼</span>        <span class="token comment" spellcheck="true">#cv2.circle(img, (x + w // 4, y + h // 4 + 30), min(w // 8, h // 8),</span>          <span class="token comment" spellcheck="true">#         color)</span>        <span class="token comment" spellcheck="true">#右眼</span>        <span class="token comment" spellcheck="true">#cv2.circle(img, (x + 3 * w // 4, y + h // 4 + 30), min(w // 8, h // 8),</span>         <span class="token comment" spellcheck="true">#          color)</span>        <span class="token comment" spellcheck="true">#嘴巴</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> w <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> w <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> h <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"image-detection"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示图像</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#表示程序会无限制的等待用户的按键事件</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭所有窗口</span></code></pre><h4 id="3、识别结果"><a href="#3、识别结果" class="headerlink" title="3、识别结果"></a>3、识别结果</h4><p><img src="https://img-blog.csdnimg.cn/20200623192140868.png" alt="在这里插入图片描述"></p><h3 id="二、图片人脸检测（dlib）"><a href="#二、图片人脸检测（dlib）" class="headerlink" title="二、图片人脸检测（dlib）"></a>二、图片人脸检测（dlib）</h3><p>比opencv更加精准的图片人脸检测库Dlib，Dlib可以检测脸部68甚至更多的特征点。</p><h4 id="1、安装dlib"><a href="#1、安装dlib" class="headerlink" title="1、安装dlib"></a>1、安装dlib</h4><p>下载地址：<a href="https://pypi.org/simple/dlib/" target="_blank" rel="noopener">https://pypi.org/simple/dlib/</a><br>我的环境为win10+python3.6.5<br>选择dlib的版本为：<code>dlib-19.8.1-cp36-cp36m-win_amd64.whl</code><br><img src="https://img-blog.csdnimg.cn/2020062318571914.png" alt="在这里插入图片描述"><br>接着用pip命令安装：</p><blockquote><p>pip install dlib-19.8.1-cp36-cp36m-win_amd64.whl</p></blockquote><h4 id="2、训练模型"><a href="#2、训练模型" class="headerlink" title="2、训练模型"></a>2、训练模型</h4><p>下载链接：<a href="https://pan.baidu.com/s/1xai1X_L8JvDfFJyU3f_0Ig" target="_blank" rel="noopener">https://pan.baidu.com/s/1xai1X_L8JvDfFJyU3f_0Ig </a><br>提取码：g24q</p><h4 id="3、具体实现代码"><a href="#3、具体实现代码" class="headerlink" title="3、具体实现代码"></a>3、具体实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> dlibpath <span class="token operator">=</span> <span class="token string">"img/1.png"</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转成灰度图</span><span class="token comment" spellcheck="true">#人脸分类器</span>detector <span class="token operator">=</span> dlib<span class="token punctuation">.</span>get_frontal_face_detector<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取人脸检测器</span>predictor <span class="token operator">=</span> dlib<span class="token punctuation">.</span>shape_predictor<span class="token punctuation">(</span>        <span class="token string">"F:\\python-project\\shape_predictor_68_face_landmarks.dat"</span><span class="token punctuation">)</span>dets <span class="token operator">=</span> detector<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> face <span class="token keyword">in</span> dets<span class="token punctuation">:</span>    shape <span class="token operator">=</span> predictor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> face<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 寻找人脸的68个标定点</span>    <span class="token comment" spellcheck="true"># 遍历所有点，打印出其坐标，并圈出来</span>    <span class="token keyword">for</span> pt <span class="token keyword">in</span> shape<span class="token punctuation">.</span>parts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pt_pos <span class="token operator">=</span> <span class="token punctuation">(</span>pt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> pt_pos<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4、识别结果"><a href="#4、识别结果" class="headerlink" title="4、识别结果"></a>4、识别结果</h4><p><img src="https://img-blog.csdnimg.cn/20200623192047787.png" alt="在这里插入图片描述"><br>参考链接：<a href="https://github.com/vipstone/faceai/blob/master/doc/detectionOpenCV.md" target="_blank" rel="noopener">https://github.com/vipstone/faceai/blob/master/doc/detectionOpenCV.md</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv 人脸识别 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习课程|paddle|入门</title>
      <link href="/posts/7277.html"/>
      <url>/posts/7277.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>强化学习入门路线：</p><ul><li>基础入门：基础概念，基本原理</li><li>理论补充：专业教材，高校课程</li><li>经典算法复现:DQN、DDPG、PPO、A3C</li><li>前沿论文阅读：顶会论文</li></ul><h3 id="什么是强化学习"><a href="#什么是强化学习" class="headerlink" title="什么是强化学习"></a>什么是强化学习</h3><p>简单来说就是让机器像人一样学习：</p><ul><li>对已知环境进行规划</li><li>对未知环境进行探索/试错</li></ul><p>强化学习（英语：<code>Reinforcement learning</code>，简称RL）是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益。<br>核心思想：智能体<code>agent</code>在环境<code>environment</code>中学习，根据环境的状态state（或观测到的<code>observation</code>），执行动作<code>action</code>，并根据环境的反馈<code>reward</code>（奖励）来指导更好的动作。<br>注意：从环境中获取的状态，有时候叫state，有时候叫<code>observation</code>，这两个其实一个代表全局状态，一个代表局部观测值，在多智能体环境里会有差别，但我们刚开始学习遇到的环境还没有那么复杂，可以先把这两个概念划上等号。</p><p><img src="https://img-blog.csdnimg.cn/20200620175111245.png" alt="在这里插入图片描述"><br>这里地球来表示environment环境，大脑表示agent，agent从environment里面去观察导state状态，然后输出action动作来去和environment做交互，会从环境中得到反馈reward来指导自己的action动作是不是正确的。</p><p><img src="https://img-blog.csdnimg.cn/20200620175420753.png" alt="在这里插入图片描述"></p><h3 id="列举强化学习的一些应用"><a href="#列举强化学习的一些应用" class="headerlink" title="列举强化学习的一些应用"></a>列举强化学习的一些应用</h3><p><img src="https://img-blog.csdnimg.cn/20200620175802913.png" alt="在这里插入图片描述"></p><h3 id="强化学习与其他机器学习的关系"><a href="#强化学习与其他机器学习的关系" class="headerlink" title="强化学习与其他机器学习的关系"></a>强化学习与其他机器学习的关系</h3><p><img src="https://img-blog.csdnimg.cn/20200620180038547.png" alt="在这里插入图片描述"></p><ul><li>监督学习（分类、回归；）：（认知：是什么）可理解为输入一个x，输出你想要的y。监督学习的训练数据一般样本和样本之间是独立同分布的，</li><li>非监督学习（聚类）：输入一批x，需要分辨这个x和那个x不一样，</li><li>强化学习（决策：怎么做）：输入的是环境的state，输出是action跟环境去交互。<br>上一个样本可能和下一个样本有联系，上一个样本输出的动作可能会影响下一个样本的状态。序列决策数据</li></ul><h3 id="强化学习的两种学习方案"><a href="#强化学习的两种学习方案" class="headerlink" title="强化学习的两种学习方案"></a>强化学习的两种学习方案</h3><p>1、基于价值 Value-based （每一步 State 给奖励）—— 最终 Agent 获得每一步最优解（确定性策略）</p><ul><li>Sarsa</li><li>Q-learning</li><li>DQN<br><img src="https://img-blog.csdnimg.cn/2020062018221986.png" alt="在这里插入图片描述"><br>2、基于策略 Policy-based （最终给出奖励）—— 最终 Agent 获得每一步的概率分布（随机性策略）</li><li>Policy gradient<br><img src="https://img-blog.csdnimg.cn/20200620182314856.png" alt="在这里插入图片描述"><h4 id="PARL实现DQN训练"><a href="#PARL实现DQN训练" class="headerlink" title="PARL实现DQN训练"></a>PARL实现DQN训练</h4><h5 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h5></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> parl<span class="token keyword">from</span> parl <span class="token keyword">import</span> layers<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> copy<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> gym<span class="token keyword">from</span> parl<span class="token punctuation">.</span>utils <span class="token keyword">import</span> logger</code></pre><h5 id="2、设定一些hyperparameter超参数"><a href="#2、设定一些hyperparameter超参数" class="headerlink" title="2、设定一些hyperparameter超参数"></a>2、设定一些hyperparameter超参数</h5><pre class=" language-python"><code class="language-python">LEARN_FREQ <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 训练频率，不需要每一个step都learn，攒一些新增经验后再learn，提高效率</span>MEMORY_SIZE <span class="token operator">=</span> <span class="token number">20000</span>    <span class="token comment" spellcheck="true"># replay memory的大小，越大越占用内存</span>MEMORY_WARMUP_SIZE <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment" spellcheck="true"># replay_memory 里需要预存一些经验数据，再从里面sample一个batch的经验让agent去learn</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span>   <span class="token comment" spellcheck="true"># 每次给agent learn的数据数量，从replay memory随机里sample一批数据出来</span>GAMMA <span class="token operator">=</span> <span class="token number">0.99</span> <span class="token comment" spellcheck="true"># reward 的衰减因子，一般取 0.9 到 0.999 不等</span>LEARNING_RATE <span class="token operator">=</span> <span class="token number">0.005</span> <span class="token comment" spellcheck="true"># 学习率</span></code></pre><h5 id="3、搭建Model、Algorithm、Agent架构"><a href="#3、搭建Model、Algorithm、Agent架构" class="headerlink" title="3、搭建Model、Algorithm、Agent架构"></a>3、搭建Model、Algorithm、Agent架构</h5><ul><li>Agent把产生的数据传给algorithm，algorithm根据model的模型结构计算出Loss，使用SGD或者其他优化器不断的优化，PARL架构可以很方便的应用在各类深度强化学习问题中。</li><li>Agent直接跟环境来交互</li><li>Model 是一个神经网络模型，输入State输出对于所有 action 估计的Q Values（我们会使用2个神经网络模型，一个是 Current Q Network 一个是 Target Q Network）</li><li>Algorithm 提供Loss Function和Optimization Algorithm，接收Agent的信息，用来优化神经网络</li></ul><h5 id="4、Model"><a href="#4、Model" class="headerlink" title="4、Model"></a>4、Model</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Model用来定义前向(Forward)网络，用户可以自由的定制自己的网络结构。</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        hid1_size <span class="token operator">=</span> <span class="token number">128</span>        hid2_size <span class="token operator">=</span> <span class="token number">128</span>        <span class="token comment" spellcheck="true"># 3层全连接网络</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>size<span class="token operator">=</span>hid1_size<span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>size<span class="token operator">=</span>hid2_size<span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>size<span class="token operator">=</span>act_dim<span class="token punctuation">,</span> act<span class="token operator">=</span>None<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义网络</span>        <span class="token comment" spellcheck="true"># 输入state，输出所有action对应的Q，[Q(s,a1), Q(s,a2), Q(s,a3)...]</span>        h1 <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        h2 <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>h1<span class="token punctuation">)</span>        Q <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>h2<span class="token punctuation">)</span>        <span class="token keyword">return</span> Q</code></pre><h5 id="5、Algorithm"><a href="#5、Algorithm" class="headerlink" title="5、Algorithm"></a>5、Algorithm</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># from parl.algorithms import DQN # 也可以直接从parl库中导入DQN算法</span><span class="token keyword">class</span> <span class="token class-name">DQN</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Algorithm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> act_dim<span class="token operator">=</span>None<span class="token punctuation">,</span> gamma<span class="token operator">=</span>None<span class="token punctuation">,</span> lr<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" DQN algorithm        Args:            model (parl.Model): 定义Q函数的前向网络结构            act_dim (int): action空间的维度，即有几个action            gamma (float): reward的衰减因子            lr (float): learning rate 学习率.        """</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model <span class="token comment" spellcheck="true"># 我们用来获取 current Q 的模型</span>        self<span class="token punctuation">.</span>target_model <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建一个target Q模型，创建的策略是直接从model复制给target</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>act_dim<span class="token punctuation">,</span> int<span class="token punctuation">)</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>gamma<span class="token punctuation">,</span> float<span class="token punctuation">)</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>lr<span class="token punctuation">,</span> float<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>act_dim <span class="token operator">=</span> act_dim <span class="token comment" spellcheck="true"># 把这些参数变成class properties</span>        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> gamma        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 使用 current Q network 获取所有action的 Q values</span>        <span class="token triple-quoted-string string">""" 使用self.model的value网络来获取 [Q(s,a1),Q(s,a2),...]        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_obs<span class="token punctuation">,</span> terminal<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 使用DQN算法更新self.model的value网络        """</span>        <span class="token comment" spellcheck="true"># 从target_model中获取 max Q' 的值，用于计算target_Q</span>        next_pred_value <span class="token operator">=</span> self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>value<span class="token punctuation">(</span>next_obs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取 target Q network 的所有action的 Q values</span>        best_v <span class="token operator">=</span> layers<span class="token punctuation">.</span>reduce_max<span class="token punctuation">(</span>next_pred_value<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取最大的Q值</span>        best_v<span class="token punctuation">.</span>stop_gradient <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># 阻止梯度传递</span>        terminal <span class="token operator">=</span> layers<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>terminal<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把terminal （是否终止）换为一个float32类型的数组，如果终止里面存储1，如果不终止里面存储0</span>        target <span class="token operator">=</span> reward <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> terminal<span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> best_v <span class="token comment" spellcheck="true"># 这里如果终止， 1-terminal 对应的元素为0，就不需要取best_v，不然还是要取best_v</span>        pred_value <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取 current Q network 的所有action的 Q values</span>        <span class="token comment" spellcheck="true"># 接着我们需要获取action对应的Q，这里使用了一个one-hot encoding来做乘法运算，相当于选中了Q values中action对应的那个值</span>        <span class="token comment" spellcheck="true"># 将action转one-hot向量，比如：3 => [0,0,0,1,0]</span>        action_onehot <span class="token operator">=</span> layers<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>act_dim<span class="token punctuation">)</span>        action_onehot <span class="token operator">=</span> layers<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>action_onehot<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下面一行是逐元素相乘，拿到action对应的 Q(s,a)</span>        <span class="token comment" spellcheck="true"># 比如：pred_value = [[2.3, 5.7, 1.2, 3.9, 1.4]], action_onehot = [[0,0,0,1,0]]</span>        <span class="token comment" spellcheck="true">#  ==> pred_action_value = [[3.9]]</span>        pred_action_value <span class="token operator">=</span> layers<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>            layers<span class="token punctuation">.</span>elementwise_mul<span class="token punctuation">(</span>action_onehot<span class="token punctuation">,</span> pred_value<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算 Q(s,a) 与 target_Q的MSE均方差，得到loss</span>        cost <span class="token operator">=</span> layers<span class="token punctuation">.</span>square_error_cost<span class="token punctuation">(</span>pred_action_value<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        cost <span class="token operator">=</span> layers<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Loss 对于每一个样本都是一个数字，为了优化我们求平均数</span>        optimizer <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span>self<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用Adam优化器，Adam是一种优化算法</span>        optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>        <span class="token keyword">return</span> cost    <span class="token keyword">def</span> <span class="token function">sync_target</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 把 self.model 的模型参数值同步到 self.target_model        """</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>sync_weights_to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_model<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这个函数主要是为了更新 Target Q，因为每一段时间我们就需要使用 Current Q Network 更新一次Target Q Network</span></code></pre><h5 id="6、Agent"><a href="#6、Agent" class="headerlink" title="6、Agent"></a>6、Agent</h5><pre class=" language-python"><code class="language-python">Algorithm定义了具体的算法来更新前向网络<span class="token punctuation">(</span>Model<span class="token punctuation">)</span>，也就是通过定义损失函数来更新Model，和算法相关的计算都放在algorithm中。<span class="token keyword">class</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Agent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 algorithm<span class="token punctuation">,</span>                 obs_dim<span class="token punctuation">,</span>                 act_dim<span class="token punctuation">,</span>                 e_greed<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>                 e_greed_decrement<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>obs_dim<span class="token punctuation">,</span> int<span class="token punctuation">)</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>act_dim<span class="token punctuation">,</span> int<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>obs_dim <span class="token operator">=</span> obs_dim        self<span class="token punctuation">.</span>act_dim <span class="token operator">=</span> act_dim        super<span class="token punctuation">(</span>Agent<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>global_step <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>update_target_steps <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment" spellcheck="true"># 每隔200个training steps再把model的参数复制到target_model中</span>        self<span class="token punctuation">.</span>e_greed <span class="token operator">=</span> e_greed  <span class="token comment" spellcheck="true"># 有一定概率随机选取动作，探索</span>        self<span class="token punctuation">.</span>e_greed_decrement <span class="token operator">=</span> e_greed_decrement  <span class="token comment" spellcheck="true"># 随着训练逐步收敛，探索的程度慢慢降低</span>    <span class="token keyword">def</span> <span class="token function">build_program</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pred_program <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Program<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>learn_program <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Program<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> fluid<span class="token punctuation">.</span>program_guard<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pred_program<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 搭建计算图用于 预测动作，定义输入输出变量</span>            obs <span class="token operator">=</span> layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>                name<span class="token operator">=</span><span class="token string">'obs'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>obs_dim<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>value <span class="token operator">=</span> self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token keyword">with</span> fluid<span class="token punctuation">.</span>program_guard<span class="token punctuation">(</span>self<span class="token punctuation">.</span>learn_program<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 搭建计算图用于 更新Q网络，定义输入输出变量</span>            obs <span class="token operator">=</span> layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>                name<span class="token operator">=</span><span class="token string">'obs'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>obs_dim<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>            action <span class="token operator">=</span> layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'act'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int32'</span><span class="token punctuation">)</span>            reward <span class="token operator">=</span> layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'reward'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>            next_obs <span class="token operator">=</span> layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>                name<span class="token operator">=</span><span class="token string">'next_obs'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>obs_dim<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>            terminal <span class="token operator">=</span> layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'terminal'</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'bool'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cost <span class="token operator">=</span> self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_obs<span class="token punctuation">,</span> terminal<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        sample <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生0~1之间的小数</span>        <span class="token keyword">if</span> sample <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>e_greed<span class="token punctuation">:</span>            act <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>self<span class="token punctuation">.</span>act_dim<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 探索：每个动作都有概率被选择</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            act <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选择最优动作</span>        self<span class="token punctuation">.</span>e_greed <span class="token operator">=</span> max<span class="token punctuation">(</span>            <span class="token number">0.01</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>e_greed <span class="token operator">-</span> self<span class="token punctuation">.</span>e_greed_decrement<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随着训练逐步收敛，探索的程度慢慢降低</span>        <span class="token keyword">return</span> act    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 选择最优动作</span>        obs <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        pred_Q <span class="token operator">=</span> self<span class="token punctuation">.</span>fluid_executor<span class="token punctuation">.</span>run<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>pred_program<span class="token punctuation">,</span>            feed<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'obs'</span><span class="token punctuation">:</span> obs<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        pred_Q <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>pred_Q<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        act <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred_Q<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选择Q最大的下标，即对应的动作</span>        <span class="token keyword">return</span> act    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">,</span> act<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_obs<span class="token punctuation">,</span> terminal<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 每隔200个training steps同步一次model和target_model的参数</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>global_step <span class="token operator">%</span> self<span class="token punctuation">.</span>update_target_steps <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>sync_target<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>global_step <span class="token operator">+=</span> <span class="token number">1</span>        act <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>act<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        feed <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'obs'</span><span class="token punctuation">:</span> obs<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'act'</span><span class="token punctuation">:</span> act<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'reward'</span><span class="token punctuation">:</span> reward<span class="token punctuation">,</span>            <span class="token string">'next_obs'</span><span class="token punctuation">:</span> next_obs<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'terminal'</span><span class="token punctuation">:</span> terminal        <span class="token punctuation">}</span>        cost <span class="token operator">=</span> self<span class="token punctuation">.</span>fluid_executor<span class="token punctuation">.</span>run<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>learn_program<span class="token punctuation">,</span> feed<span class="token operator">=</span>feed<span class="token punctuation">,</span> fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>cost<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 训练一次网络</span>        <span class="token keyword">return</span> cost</code></pre><h5 id="7、ReplayMemory"><a href="#7、ReplayMemory" class="headerlink" title="7、ReplayMemory"></a>7、ReplayMemory</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># replay_memory.py</span><span class="token comment" spellcheck="true"># 经验池，用于存储多条经验，实现经验回放。</span><span class="token keyword">import</span> random<span class="token keyword">import</span> collections<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">ReplayMemory</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> max_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>buffer <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span>max_size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 增加一条经验到经验池中</span>    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>exp<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从经验池中选取N条经验出来</span>    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        mini_batch <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>        obs_batch<span class="token punctuation">,</span> action_batch<span class="token punctuation">,</span> reward_batch<span class="token punctuation">,</span> next_obs_batch<span class="token punctuation">,</span> done_batch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> experience <span class="token keyword">in</span> mini_batch<span class="token punctuation">:</span>            s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_p<span class="token punctuation">,</span> done <span class="token operator">=</span> experience            obs_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            action_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            reward_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>            next_obs_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s_p<span class="token punctuation">)</span>            done_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>done<span class="token punctuation">)</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>obs_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \            np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>action_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>reward_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\            np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>next_obs_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>done_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span></code></pre><h5 id="8、Training-amp-amp-Test（训练-amp-amp-测试）"><a href="#8、Training-amp-amp-Test（训练-amp-amp-测试）" class="headerlink" title="8、Training &amp;&amp; Test（训练&amp;&amp;测试）"></a>8、Training &amp;&amp; Test（训练&amp;&amp;测试）</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练一个episode</span><span class="token keyword">def</span> <span class="token function">run_episode</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> rpm<span class="token punctuation">)</span><span class="token punctuation">:</span>    total_reward <span class="token operator">=</span> <span class="token number">0</span>    obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    step <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        step <span class="token operator">+=</span> <span class="token number">1</span>        action <span class="token operator">=</span> agent<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 采样动作，所有动作都有概率被尝试到</span>        next_obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        rpm<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>obs<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_obs<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># train model</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>rpm<span class="token punctuation">)</span> <span class="token operator">></span> MEMORY_WARMUP_SIZE<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>step <span class="token operator">%</span> LEARN_FREQ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">(</span>batch_obs<span class="token punctuation">,</span> batch_action<span class="token punctuation">,</span> batch_reward<span class="token punctuation">,</span> batch_next_obs<span class="token punctuation">,</span>             batch_done<span class="token punctuation">)</span> <span class="token operator">=</span> rpm<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span>            train_loss <span class="token operator">=</span> agent<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>batch_obs<span class="token punctuation">,</span> batch_action<span class="token punctuation">,</span> batch_reward<span class="token punctuation">,</span>                                     batch_next_obs<span class="token punctuation">,</span>                                     batch_done<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s,a,r,s',done</span>        total_reward <span class="token operator">+=</span> reward        obs <span class="token operator">=</span> next_obs        <span class="token keyword">if</span> done<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> total_reward<span class="token comment" spellcheck="true"># 评估 agent, 跑 5 个episode，总reward求平均</span><span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> render<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    eval_reward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        episode_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> agent<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 预测动作，只选最优动作</span>            obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            episode_reward <span class="token operator">+=</span> reward            <span class="token keyword">if</span> render<span class="token punctuation">:</span>                env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> done<span class="token punctuation">:</span>                <span class="token keyword">break</span>        eval_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>episode_reward<span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>eval_reward<span class="token punctuation">)</span></code></pre><h5 id="9、创建环境和Agent，创建经验池，启动训练，保存模型，运行代码"><a href="#9、创建环境和Agent，创建经验池，启动训练，保存模型，运行代码" class="headerlink" title="9、创建环境和Agent，创建经验池，启动训练，保存模型，运行代码"></a>9、创建环境和Agent，创建经验池，启动训练，保存模型，运行代码</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建环境</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'MountainCar-v0'</span><span class="token punctuation">)</span>action_dim <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n  <span class="token comment" spellcheck="true"># MountainCar-v0: 3</span>obs_shape <span class="token operator">=</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape  <span class="token comment" spellcheck="true"># MountainCar-v0: (2,)</span><span class="token comment" spellcheck="true"># 创建经验池</span>rpm <span class="token operator">=</span> ReplayMemory<span class="token punctuation">(</span>MEMORY_SIZE<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># DQN的经验回放池</span><span class="token comment" spellcheck="true"># 根据parl框架构建agent</span><span class="token comment" spellcheck="true">######################################################################</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#请参考课堂Demo，嵌套Model, DQN, Agent构建 agent</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">######################################################################</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span>act_dim<span class="token operator">=</span>action_dim<span class="token punctuation">)</span>algorithm <span class="token operator">=</span> DQN<span class="token punctuation">(</span>model<span class="token punctuation">,</span> act_dim<span class="token operator">=</span>action_dim<span class="token punctuation">,</span> gamma<span class="token operator">=</span>GAMMA<span class="token punctuation">,</span> lr<span class="token operator">=</span>LEARNING_RATE<span class="token punctuation">)</span>agent <span class="token operator">=</span> Agent<span class="token punctuation">(</span>    algorithm<span class="token punctuation">,</span>    obs_dim<span class="token operator">=</span>obs_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    act_dim<span class="token operator">=</span>action_dim<span class="token punctuation">,</span>    e_greed<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 有一定概率随机选取动作，探索</span>    e_greed_decrement<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随着训练逐步收敛，探索的程度慢慢降低</span><span class="token comment" spellcheck="true"># 加载模型</span><span class="token comment" spellcheck="true"># save_path = './dqn_model.ckpt'</span><span class="token comment" spellcheck="true"># agent.restore(save_path)</span><span class="token comment" spellcheck="true"># 先往经验池里存一些数据，避免最开始训练的时候样本丰富度不够</span><span class="token keyword">while</span> len<span class="token punctuation">(</span>rpm<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MEMORY_WARMUP_SIZE<span class="token punctuation">:</span>    run_episode<span class="token punctuation">(</span>env<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> rpm<span class="token punctuation">)</span>max_episode <span class="token operator">=</span> <span class="token number">2000</span><span class="token comment" spellcheck="true"># 开始训练</span>episode <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> episode <span class="token operator">&lt;</span> max_episode<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 训练max_episode个回合，test部分不计算入episode数量</span>    <span class="token comment" spellcheck="true"># train part</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        total_reward <span class="token operator">=</span> run_episode<span class="token punctuation">(</span>env<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> rpm<span class="token punctuation">)</span>        episode <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># test part</span>    eval_reward <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>env<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> render<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># render=True 查看显示效果</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'episode:{}    e_greed:{}   test_reward:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        episode<span class="token punctuation">,</span> agent<span class="token punctuation">.</span>e_greed<span class="token punctuation">,</span> eval_reward<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练结束，保存模型</span>save_path <span class="token operator">=</span> <span class="token string">'./dqn_model.ckpt'</span>agent<span class="token punctuation">.</span>save<span class="token punctuation">(</span>save_path<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 人工智能 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装dlib遇到的错误:AttributeError:module ‘dlib’ has no attribute ‘get_frontal_face_detector’问题解决</title>
      <link href="/posts/3826.html"/>
      <url>/posts/3826.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>dlib是一个非常好用的跨平台的通用库，但是在安装过程中遇到了许多问题，我在使用Anaconda安装dlib过程中，用pip install 安装，安装成功后，import没有问题<br>如下图，import cv2没有报错。<br><img src="https://img-blog.csdnimg.cn/20200616220032833.png" alt="在这里插入图片描述"><br>但是在pycharm使用里面的函数时出现错误AttributeError: module ‘dlib’ has no attribute ‘get_frontal_face_detecetor’<br><img src="https://img-blog.csdnimg.cn/20200616220141763.png" alt="在这里插入图片描述"><br>找了好久都没找到原因，后来才发现是因为文件名的问题。自己建立的文件名和使用的模块重名了。<br><img src="https://img-blog.csdnimg.cn/20200616220444449.png" alt="在这里插入图片描述"><br>以后得注意，不能犯这种低级错误了。<br>将文件名dlib.py更改为learn.py，再次运行，就不会报错啦。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab对控制系统进行时域和频域联合分析</title>
      <link href="/posts/4d65.html"/>
      <url>/posts/4d65.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="时域频域联合分析"><a href="#时域频域联合分析" class="headerlink" title="时域频域联合分析"></a>时域频域联合分析</h2><p>   这个例子说明如何使用交互式线性系统分析及应用程序并排比较多种类型的响应，包括时域和频域响应。<br>   创建一个想要比较其响应的模型，如比较一个三阶模型G和G与两个不同控制器C1和C2的闭环响应。</p><pre class=" language-c"><code class="language-c">G <span class="token operator">=</span> <span class="token function">zpk</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>z<span class="token punctuation">,</span>p<span class="token punctuation">,</span>kC1 <span class="token operator">=</span> <span class="token function">pid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T1 <span class="token operator">=</span> <span class="token function">feedback</span><span class="token punctuation">(</span>G<span class="token operator">*</span>C1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C2 <span class="token operator">=</span> <span class="token function">pid</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">,</span><span class="token number">7.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T2 <span class="token operator">=</span> <span class="token function">feedback</span><span class="token punctuation">(</span>G<span class="token operator">*</span>C2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　&nbsp; &nbsp; &nbsp; 打开线性系统分析器工具，检查受控对象和闭环系统的响应。</p><pre class=" language-c"><code class="language-c"><span class="token function">linearSystemAnalyzer</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span></code></pre><p>默认情况下，线性系统分析器启动时带有三个系统的阶跃响应图<br> <img src="https://img-blog.csdnimg.cn/20200609192243778.png" alt="在这里插入图片描述"><br>　　在线性系统分析器中，选择Edit &gt; Plot Configurations以打开该绘图配置对话框。选择two-plot配置。在响应类型区域中，选择第二个plot类型的Bode幅频图等。<br> <img src="https://img-blog.csdnimg.cn/20200609192314313.png" alt="在这里插入图片描述"></p><p>　　<br>　在幅频响应图中的任何位置，右键单击选择特征-峰值，得到系统的峰值响应。<br> <img src="https://img-blog.csdnimg.cn/20200609192323409.png" alt="在这里插入图片描述"><br>  　　之后图上出现了指示峰值响应值的标记。水平和垂直的虚线表示这些响应的频率和振幅。单击一个标记查看数据提示中峰值响应的值。<br> <img src="https://img-blog.csdnimg.cn/20200609192335159.png" alt="在这里插入图片描述"><br>　　还可以使用类似的过程从特征菜单中选择其他特征，例如确定时间和上升时间，并查看这些值。<br>　　同时还可以更改线性系统分析器中显示的绘图类型。比如<code>阶跃响应、冲激响应、伯德图、奈奎斯特图</code>等等<br> <img src="https://img-blog.csdnimg.cn/20200609192344694.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 控制 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ |标准模板库STL</title>
      <link href="/posts/988f.html"/>
      <url>/posts/988f.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>vector是线性容器，可叫做“变长数组”，即“长度可根据需要而自动改变的数组”调整存储空间大小。它的元素存储在一块连续的存储空间中，可以使用迭代器iterator和指针的偏移地址访问元素。</p><h5 id="1-vector的定义"><a href="#1-vector的定义" class="headerlink" title="1.vector的定义"></a>1.vector的定义</h5><p>单独定义一个vector：<code>vector&lt;typename&gt; name;</code><br>这个定义相当于是一维数组name[SIZE],不过长度可以根据需要进行变化，比较节省空间。<br>typename可以是任何基本类型，例如int,double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。<br>如果typename是vector，可以按下面这样定义：<br><code>vector&lt;vector&lt;int&gt; &gt; name;</code></p><h5 id="2-vector容器内元素的访问"><a href="#2-vector容器内元素的访问" class="headerlink" title="2.vector容器内元素的访问"></a>2.vector容器内元素的访问</h5><p>（1）通过下标访问<br>和访问普通数组是一样，对一个定义为vector<typename> vec的vector容器来说，直接访问vec[index]（如vec[0]、vec[1]),这里的下标是从0到vec.siz()-1.<br>（2）通过迭代器访问<br>迭代器（iterator）定义：<br><code>vector&lt;typename&gt;::iterator it;</code><br>可以将迭代器理解为一种类似指针的东西。<br>可通过类似下表和指针访问数组的方式来访问容器内的元素：</typename></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//vec.begin()为取vec的首元素地址，it指向这个地址</span><span class="token comment" spellcheck="true">/* 另一种遍历vector中元素的写法：for(vector&lt;int>::iterator it=vec.begin();it!=vec.end();it++)*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>siz</code></pre><p>vec[i]和*(vec.begin()+i)是等价的。</p><h5 id="3-vector常用函数"><a href="#3-vector常用函数" class="headerlink" title="3.vector常用函数"></a>3.vector常用函数</h5><ol><li>push_back(x),在vector后面添加一个元素x。</li><li>pop_back(),删除vector的尾元素。</li><li>size()，获取vector中元素的个数</li><li>clear()，清空vector中的所有元素，时间复杂度为O(N),其中N为vector中元素的个数。</li><li>insert(),插入元素到某个位置中，insert(iterator loc，x)用来向vector的指定位置loc前插入一个元素x。</li><li>erase(),有两种用法:删除单个元素，删除一个区间内的所有元素。erase(it)删除迭代器为it处的元素，earse(first,last)删除[first,last)内的所有元素。<br>empty(),表示判断vector是否为空，如果为空，则返回true.<br>容器的大小和容器的容量是有区别的，大小 是指元素的个数，容量是分配的内存大小，容量一般不小于容器的大小。vector::size()返回容器的大小，vector::capacity()返回容量值。<h6 id="vector的特点如下"><a href="#vector的特点如下" class="headerlink" title="vector的特点如下:"></a><code>vector</code>的特点如下:</h6></li></ol><ul><li>随机访问元素效率很高</li><li>push_back的效率也会很高</li><li>push_front的效率非常低，不建议使用</li><li>vector在末尾添加和删除元素相对较好，而在其他位置添加和删除元素则不及其他顺序容器，在迭代器和引用也没有list支持的好</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li><p>string的定义<br>定义string的方式跟基本数据类型相同，只需要在stirng后面跟上变量名，<code>string str;</code>，初始化可以海子街给string类型的变量赋值。<br><code>string str="abcd";</code></p></li><li><p>string中内容的访问：<br>(1)可以直接通过下标访问，str[i]<br>(2)通过迭代器访问,string::iterator it;</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> string str<span class="token operator">=</span><span class="token string">"abcd"</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">::</span>iterator it<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>string和vector一样，可以直接对迭代器进行加减某个数字，如str.begin()+3</p></li><li><p>常用函数实例</p></li><li><p>两个string可以直接通过+拼接起来。</p></li><li><p>两个string类型可以直接使用==、!=、&lt;、&lt;=、&gt;、&gt;=比较大小，比较规则是字典序。(比较两个字符串对应的ASCII码值)</p></li><li><p>length()/size()，length()返回string的长度，即存放的字符数，时间复杂度为O(1)。</p></li><li><p>insert()</p></li><li><p>erase()<br>两种用法:删除单个元素，删除一个区间内的所有元素。<br>str.erase(it)用于删除单个元素，it为需要删除的元素的迭代器。</p></li></ol><h5 id="string类的构造函数："><a href="#string类的构造函数：" class="headerlink" title="string类的构造函数："></a>string类的构造函数：</h5><hr><pre class=" language-cpp"><code class="language-cpp">string str：生成空字符串string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>：生成字符串为str的复制品string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> strbegin<span class="token punctuation">,</span>strlen<span class="token punctuation">)</span>：将字符串str中从下标strbegin开始、长度为strlen的部分作为字符串初值string <span class="token function">s</span><span class="token punctuation">(</span>cstr<span class="token punctuation">,</span> char_len<span class="token punctuation">)</span>：以C_string类型cstr的前char_len个字符串作为字符串s的初值string <span class="token function">s</span><span class="token punctuation">(</span>num <span class="token punctuation">,</span>c<span class="token punctuation">)</span>：生成num个c字符的字符串string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> stridx<span class="token punctuation">)</span>：将字符串str中从下标stridx开始到字符串结束的位置作为字符串初值eg<span class="token operator">:</span>    string str1<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//生成空字符串</span>    string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//生成"1234456789"的复制品</span>    string <span class="token function">str3</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为"123"</span>    string <span class="token function">str4</span><span class="token punctuation">(</span><span class="token string">"012345"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结果为"01234"</span>    string <span class="token function">str5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//结果为"11111"</span>    string <span class="token function">str6</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//结果为"3456789"</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str1<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//生成空字符串</span>    string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//生成"1234456789"的复制品</span>    string <span class="token function">str3</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为"123"</span>    string <span class="token function">str4</span><span class="token punctuation">(</span><span class="token string">"0123456"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结果为"01234"</span>    string <span class="token function">str5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//结果为"11111"</span>    string <span class="token function">str6</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//结果为"3456789"</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"str2:"</span><span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"str3:"</span><span class="token operator">&lt;&lt;</span>str3<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"str4:"</span><span class="token operator">&lt;&lt;</span>str4<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"str5:"</span><span class="token operator">&lt;&lt;</span>str5<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"str6:"</span><span class="token operator">&lt;&lt;</span>str6<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20200421154845469.png" alt="在这里插入图片描述"></p><h5 id="string的大小和容量"><a href="#string的大小和容量" class="headerlink" title="string的大小和容量"></a>string的大小和容量</h5><blockquote><ol><li>size()和length()：返回string对象的字符个数，它们执行效果相同。</li><li>max_size()：返回string对象最多包含的字符数，超出会抛出length_error异常</li><li>capacity()：重新分配内存之前，string对象能包含的最大字符数</li></ol></blockquote><h5 id="string的大小写转换-tolower-和toupper-函数-或者-STL中的transform算法"><a href="#string的大小写转换-tolower-和toupper-函数-或者-STL中的transform算法" class="headerlink" title="string的大小写转换:tolower()和toupper()函数 或者 STL中的transform算法"></a><font color="red">string的大小写转换:tolower()和toupper()函数 或者 STL中的transform算法</font></h5><p>方法一：使用C语言的函数，进行转换</p><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    string str = "ABCDEFG";    for( int i = 0; i &lt; str.size(); i++ )    {        str[i] = tolower(str[i]);    }    cout&lt;&lt;str&lt;&lt;endl;    return 0;}</code></pre><h5 id="to-string-将数值转换为字符串，返回对应的字符串"><a href="#to-string-将数值转换为字符串，返回对应的字符串" class="headerlink" title="to_string 将数值转换为字符串，返回对应的字符串"></a>to_string 将数值转换为字符串，返回对应的字符串</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>   </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span>     </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  string pi <span class="token operator">=</span> <span class="token string">"pi is "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  string perfect <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is a perfect number"</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> pi <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> perfect <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结果：<br>pi is 3.141593<br>28 is a perfect number</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set，是一个内部自动有序且不含重复元素的容器。set作为一个容器是用来存储同一数据类型的数据类型，并且能从一个数据结合中取出数据，在set中每个元素的值都是唯一的，</p><p>set常用函数实例<br>1.<code>insert(x)</code><br>  可将x插入set容器中，并自动递增排序和去重，时间复杂度为O(logN),其中N为set内的元素个数。<br>2.<code>find()</code><br>find(value)返回set中对应值为value的迭代器，时间复杂度为O(logN)，N为set内的元素个数。<br>3.<code>erase()</code></p><ul><li>删除单个元素:<br>st.erase(it),it为需要删除元素的迭代器，时间复杂度为O(1)。可结合find()函数一起使用<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>  st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先利用find()函数找到100，然后用erase删除它</span>  st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>st.erase(value)，其中value为需要删除元素的值。时间复杂度为O(logN)。</li><li>删除一个区间内的所有元素<br>st.erase(first,last)可以删除一个区间内的所有元素，其中first为所需要删除区间的起始迭代器，last为待删除区间的末尾迭代器的下一个地址，即为删除[first,last].</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除元素30至set末尾之间的元素，即30和40</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.<code>size()</code><br>用来获取set内元素的个数，时间复杂度为O(1)。<br>5. <code>clear()</code><br>清空set内的所有元素，复杂度为O(N),其中N为set内元素的个数</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map本质是一个关联式容器，它提供一对一的hash。里面的数据都是成对出现的：</p><ul><li>每一对中的第一个值称为关键字(key），每个关键字只能在map中出现一次；</li><li>第二个称为该关键字的值(value)。<br><code>map</code>以模板(泛型)方式实现，可以存储任意类型的数据，包括使用者自定义的数据类型。map主要用于资料一对一映射(one-to-one)的情況，map內部的实现自建一颗红黑树(一种非严格意义上的平衡二叉树)，这颗树具有对数据自动排序的功能。在map内部所有的数据都是有序的，后边我们会见识到有序的好处。<br>map可自动简历key-value的一一对应关系，比如一个班级中，每个学生的学号跟他的姓名就存在着一一映射的关系。</li></ul><p>1.插入元素<br>map的插入有3种方式：用insert函数插入pair数据，用insert函数插入value_type数据和用数组方式插入数据。<br>第一种：用insert函数插入pair数据</p><pre><code>map&lt;int, string&gt; mapStudent;mapStudent.insert(pair&lt;int, string&gt;(1,“student_one”));</code></pre><p>第二种：用insert函数插入value_type数据</p><pre><code>map&lt;int, string&gt; mapStudent;mapStudent.insert(map&lt;int, string&gt;::value_type (1,"student_one"));</code></pre><p>用make_pair</p><pre><code>mapStudent.insert(make_pair(1, "student_one"));</code></pre><p>第三种：用数组方式插入数据</p><pre><code>map&lt;int, string&gt; mapStudent;mapStudent[1] = “student_one”;mapStudent[2] = “student_two”;</code></pre><p>以上四种用法，虽然都可以实现数据的插入，但是它们是有区别的，当然了第一种和第二种在效果上是完成一样的，用insert函数插入数据，在数据的插入上涉及到集合的唯一性这个概念，即当map中有这个关键字时，insert操作是不能再插入这个数据的，<font color="red">但是用数组方式就不同了，它可以覆盖以前该关键字对应的值</font>,即：如果当前存在该关键字，则覆盖改关键字的值，否则，以改关键字新建一个key—value;<br>2.查找元素<br>用find函数来定位数据出现位置，它返回的一个迭代器，当所查找的关键字key出现时，它返回数据所在对象的位置，如果沒有，返回迭代器等于end函数返回的迭代器。</p><pre><code>// find 返回迭代器指向当前查找元素的位置否则返回map::end()位置iter = mapStudent.find("123456");if(iter != mapStudent.end())       cout&lt;&lt;"Find, the value is"&lt;&lt;iter-&gt;second&lt;&lt;endl;else   cout&lt;&lt;"Do not Find"&lt;&lt;endl;</code></pre><p>3.删除与清空元素</p><pre><code>//迭代器刪除iter = mapStudent.find("123");mapStudent.erase(iter);//用关键字刪除int n = mapStudent.erase("123"); //如果刪除了会返回1，否则返回0//用迭代器范围刪除 : 把整个map清空mapStudent.erase(mapStudent.begin(), mapStudent.end());//等同于mapStudent.clear()</code></pre><p>4.map的大小<br>在往map里面插入了数据，我们怎么知道当前已经插入了多少数据呢，可以用size函数，用法如下：<br><code>int nSize = mapStudent.size();</code><br>5.map的基本操作函数<br> C++ maps是一种关联式容器，包含“关键字/值”对</p><p><code>begin()</code>         返回指向map头部的迭代器</p><p><code>clear()</code>        删除所有元素</p><p><code>count()</code>        返回指定元素出现的次数</p><p><code>empty()</code>    如果map为空则返回true</p><p><code>end()</code>           返回指向map末尾的迭代器</p><p><code>equal_range()</code>   返回特殊条目的迭代器对</p><p><code>erase()</code>        删除一个元素</p><p><code>find()</code>          查找一个元素</p><p><code>get_allocator()</code> 返回map的配置器</p><p><code>insert()</code>        插入元素</p><p><code>key_comp()</code>     返回比较元素key的函数</p><p><code>lower_bound()</code>  返回键值&gt;=给定元素的第一个位置</p><p><code>max_size()</code>      返回可以容纳的最大元素个数</p><p><code>rbegin()</code>       返回一个指向map尾部的逆向迭代器</p><p><code>rend()</code>         返回一个指向map头部的逆向迭代器</p><p><code>size()</code>          返回map中元素的个数</p><p><code>swap()</code>          交换两个map</p><p><code>upper_bound()</code>    返回键值&gt;给定元素的第一个位置</p><p><code>value_comp()</code>     返回比较元素value的函数</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNN|CNN|百度paddle学习</title>
      <link href="/posts/d902.html"/>
      <url>/posts/d902.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="深度学习三个步骤："><a href="#深度学习三个步骤：" class="headerlink" title="深度学习三个步骤："></a>深度学习三个步骤：</h3><ul><li>建立模型<ul><li>选择什么样的网络结构</li><li>选择多少层，每层选择多少神经元</li></ul></li><li>损失函数<ul><li>选择常用损失函数，平方误差，交叉熵…..</li></ul></li><li>参数学习<ul><li>梯度下降</li><li>反向传播算法</li></ul></li></ul><hr><p>全连接神经网络DNN由于模型结构不够灵活，模型参数太多，通过模型改进，就出现了卷积神经网络CNN。<br>CNN在结构上有三大特性:</p><ol><li><p>局部连接，在我们进行图像识别的时候，不需要对整个图像进行处理，只需要关注图像中某些特殊的区域，一张640x480的图片，可能其中的16x16个像素</p></li><li><p>权重共享</p></li><li><p>下采样，减小图片的尺寸，<br>可以减少网络参数，加快训练速度。<br><img src="https://img-blog.csdnimg.cn/20200407200955527.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200407220711655.png" alt="在这里插入图片描述"><br>Pooling 池化层<br>通过下采样缩减feature map尺度。常用maxpooling和averagepooling.</p><h3 id="卷积神经网络的一般结构"><a href="#卷积神经网络的一般结构" class="headerlink" title="卷积神经网络的一般结构"></a>卷积神经网络的一般结构</h3><ol><li>卷积层+激活层和池化层的组合多次出现，用来提取特征</li><li>多个全连接或特殊的CNN结构作为输出层，用作分类器/检测器/分割器<h4 id="经典的CNN结构"><a href="#经典的CNN结构" class="headerlink" title="经典的CNN结构"></a>经典的CNN结构</h4><img src="https://img-blog.csdnimg.cn/20200407222124164.png" alt="在这里插入图片描述"><h4 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h4><img src="https://img-blog.csdnimg.cn/20200407222315157.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407222331951.png" alt="在这里插入图片描述"><h4 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h4><img src="https://img-blog.csdnimg.cn/20200407222510204.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407222521588.png" alt="在这里插入图片描述"><br>在AlexNet中用到一些非常大的卷积核，比如11x11、5x5的，感受野越大，看到的图片信息就越多，获得的特征会越好。但是随着参数和计算量的增加，如何衡量该使用多大的卷积核呢<br>Methods:学习到使用2个3x3的卷积核的组合比仅使用1个5x5的卷积核效果更佳，并且参数量降低。<br><img src="https://img-blog.csdnimg.cn/20200407222857372.png" alt="在这里插入图片描述"></li></ol></li></ol><p>这几天参加了百度飞桨举办的深度学习7日入门-CV疫情特辑课程，通过几个疫情AI实战案例，轻松入门深度学习。</p><h3 id="Day01-新冠疫情可视化"><a href="#Day01-新冠疫情可视化" class="headerlink" title="Day01 新冠疫情可视化"></a>Day01 新冠疫情可视化</h3><p>利用python爬取丁香园公开的统计数据，根据累计确诊数，使用pyecharts绘制疫情分布图，通过查阅Pycharts api比较容易实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> datetime<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Pie<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token comment" spellcheck="true"># 读原始数据文件</span>today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#20200315</span>datafile <span class="token operator">=</span> <span class="token string">'data/'</span><span class="token operator">+</span> today <span class="token operator">+</span> <span class="token string">'.json'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>datafile<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    json_array <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分析全国实时确诊数据：'confirmedCount'字段</span>china_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> province <span class="token keyword">in</span> json_array<span class="token punctuation">:</span>    china_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>province<span class="token punctuation">[</span><span class="token string">'provinceShortName'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> province<span class="token punctuation">[</span><span class="token string">'confirmedCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>china_data <span class="token operator">=</span> sorted<span class="token punctuation">(</span>china_data<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#reverse=True,表示降序，反之升序</span><span class="token keyword">print</span><span class="token punctuation">(</span>china_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 全国疫情地图</span><span class="token comment" spellcheck="true"># 自定义的每一段的范围，以及每一段的特别的样式。</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> china_data<span class="token punctuation">]</span>counts <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> china_data<span class="token punctuation">]</span>m <span class="token operator">=</span> Pie<span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> zip<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> counts<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#系列配置项,可配置图元样式、文字样式、标签样式、点线样式等</span>m<span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span><span class="token string">"{b}: {c}"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#全局配置项,可配置标题、动画、坐标轴、图例等</span>m<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'全国实时确诊数据'</span><span class="token punctuation">,</span>                                            subtitle<span class="token operator">=</span><span class="token string">'数据来源：丁香园'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  legend_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LegendOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#render（）会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件，也可以传入路径参数，如 m.render("mycharts.html")</span>m<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'/home/aistudio/data/饼状图.html'</span><span class="token punctuation">)</span></code></pre><p><strong>结果图：</strong><br><img src="https://img-blog.csdnimg.cn/2020040808513127.png" alt="在这里插入图片描述"></p><h3 id="Day02手势识别"><a href="#Day02手势识别" class="headerlink" title="Day02手势识别"></a>Day02手势识别</h3><p>属于图像分类任务，根据图像的语义信息将不同类别图像区分开，是计算机视觉中重要的基本问题。手势识别属于图像分类中的一个细分类问题。<br>主要步骤：</p><ol><li>准备数据</li><li>配置网络</li><li>训练网络</li><li>模型评估</li><li>模型预测<br>定义的DNN全连接神经网络：</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义DNN网络</span><span class="token keyword">class</span> <span class="token class-name">MyDNN</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyDNN<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden2 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden3 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden4 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>input<span class="token punctuation">)</span><span class="token punctuation">:</span>          x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#print(input.shape)</span>       x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>       x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>       x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#print(x.shape)</span>       y<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>       <span class="token keyword">return</span> y<span class="token punctuation">;</span></code></pre><p>其中通过查看Paddle API，更改了几种不同的优化器和模型参数，最终accuracy还是达不到90%，还是不太会该如何选取参数。<br>识别结果：<img src="https://img-blog.csdnimg.cn/20200408090753891.png" alt="在这里插入图片描述"></p><h3 id="Day03-车牌识别"><a href="#Day03-车牌识别" class="headerlink" title="Day03-车牌识别"></a>Day03-车牌识别</h3><p>通过对经典的卷积网络模型比如LeNet的解析， 分为多个卷积层，激活层，池化层，然后是全连接层，最后通过Softmax函数将各分类标签通过概率表达出来。学会每一层的维度计算。<br>车牌识别中，需要事先将车牌中每个字符例如’沪’，’C’等切分出来，共形成65个分类，通过深度学习实际上最后预测的是车牌上的每个字符最大概率的预测字符，然后再拼接出来形成最终的识别结果。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义网络</span><span class="token keyword">class</span> <span class="token class-name">MyLeNet</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyLeNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden1_1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden1_2 <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden2_1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden2_2 <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden3 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden4 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>input<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden1_1<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden1_2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden2_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden2_2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y<span class="token operator">=</span>self<span class="token punctuation">.</span>hidden4<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> y</code></pre><h3 id="Day04-口罩分类"><a href="#Day04-口罩分类" class="headerlink" title="Day04-口罩分类"></a>Day04-口罩分类</h3><p>检测在密集人流区域中戴口罩和未戴口罩的所有人脸，同时判断该人是否佩戴口罩。<br>vgg模型配置<br><img src="https://img-blog.csdnimg.cn/2020040809293612.png" alt="在这里插入图片描述"><br>vgg网络定义:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VGGNet</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    VGG网络    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>VGGNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convpool01<span class="token operator">=</span>ConvPool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convpool02<span class="token operator">=</span>ConvPool<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convpool03<span class="token operator">=</span>ConvPool<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convpool04<span class="token operator">=</span>ConvPool<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convpool05<span class="token operator">=</span>ConvPool<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool_5_shape<span class="token operator">=</span><span class="token number">512</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span>        self<span class="token punctuation">.</span>fc01<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pool_5_shape<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc02<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc03<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> label<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""前向计算"""</span>        <span class="token comment" spellcheck="true">#print(inputs.shape)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>convpool01<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(x.shape)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>convpool02<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(x.shape)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>convpool03<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>convpool04<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>convpool05<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc01<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc02<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc03<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> label <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            acc<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>input<span class="token operator">=</span>x<span class="token punctuation">,</span>label<span class="token operator">=</span>label<span class="token punctuation">)</span>            <span class="token keyword">return</span> x<span class="token punctuation">,</span> acc        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x</code></pre><h3 id="人流密度检测问题"><a href="#人流密度检测问题" class="headerlink" title="人流密度检测问题"></a>人流密度检测问题</h3><p>本竞赛所用训练和测试图片均来自一般监控场景，但包括多种视角（如低空、高空、鱼眼等），图中行人的相对尺寸也会有较大差异。部分训练数据参考了公开数据集（如ShanghaiTech [1], UCF-CC-50 [2], WorldExpo’10 [3]，Mall [4] 等）。</p><p>本竞赛的数据标注均在对应json文件中，每张训练图片的标注为以下两种方式之一：</p><p>（1）部分数据对图中行人提供了方框标注（boundingbox），格式为[x, y, w, h][x,y,w,h]；</p><p>（2）部分图对图中行人提供了头部的打点标注，坐标格式为[x, y][x,y]。</p><p>此外部分图片还提供了忽略区（ignore_region）标注，格式为[x_0, y_0, x_1, y_1, …, x_n, y_n]组成的多边形（注意一张图片可能有多个多边形忽略区），图片在忽略区内的部分不参与训练/测试。<br>人流密度检测网络训练使用的CNN模型网络配置如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    网络    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv01_1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool01<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv02_1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool02<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv03_1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool03<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv04_1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv05_1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv06 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>num_filters<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv07 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>num_filters<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv08 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>num_filters<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv09 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>num_filters<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>filter_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>act<span class="token operator">=</span>None<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> label<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""前向计算"""</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv01_1<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>pool01<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv02_1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>pool02<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token operator">=</span>out<span class="token punctuation">,</span>dropout_prob<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv03_1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>pool03<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token operator">=</span>out<span class="token punctuation">,</span>dropout_prob<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv04_1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>            out <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token operator">=</span>out<span class="token punctuation">,</span>dropout_prob<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv05_1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token operator">=</span>out<span class="token punctuation">,</span>dropout_prob<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv06<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv07<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv08<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv09<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out</code></pre><p>通过几天的实践学习，掌握了训练的一般步骤，按照数据处理，配置网络，训练网络，模型评估和模型预测这样的步骤，再就是本地没GPU加速，运用百度paddle提供免费的算力，进行参数调优，但是对如何调整参数获得更好的效果，还是不太会。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm汉化之后无法打开setting设置</title>
      <link href="/posts/d098.html"/>
      <url>/posts/d098.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>我在安装了pycharm汉化包之后，发现pycharm点击设置setting没反应，不能打开。网上找了解决方案：</p><p>一般的问题都是装了中文汉化包resources_cn.jar造成的，解决办法：</p><ol><li><p>更换一个汉化包<br>把这里的两个jar包放到PyCharm安装目录里的lib目录里面即可。同时删掉之前的汉化包。<br>链接：<a href="https://pan.baidu.com/s/1khtnNGAkMkwkGsDjzw0_zA" target="_blank" rel="noopener">https://pan.baidu.com/s/1khtnNGAkMkwkGsDjzw0_zA</a><br>提取码：u1zb</p></li><li><p>将汉化包都删除，只留下原版的resources_en.jar   </p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200402103206811.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习|Andrew Ng|学习笔记</title>
      <link href="/posts/4f0c.html"/>
      <url>/posts/4f0c.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><font color="red">Machine Learning(机器学习)</font>是研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。</p><p>有一个算法叫支持向量机，里面有个巧妙的数学技巧，能让计算机处理无限多个特征。</p><p><font color="red">监督学习</font>：其基本思想是数据集中的每个样本都有相应的“正确答案”，再根据这些样本作出预测。例如垃圾邮件问题。<br><font color="red">无监督学习</font>：在无监督学习中，不同于监督学习的数据的样子（每条数据都有特定的标签，标明零件是正品还是次品），即无监督学习中没有任何的标签或者是有相同的标签或者就是没标签。<br>针对数据集，无监督学习就能判断出数据有两个不同的聚集簇，无监督学习算法可能会把这些数据分成两个不同的簇，所以叫做聚类算法。例如google新闻<br>聚类只是无监督学习中的一种，</p><p>损失函数（代价函数），也被称作平方误差函数，用J(θ_0,θ_1)表示<br><img src="https://img-blog.csdnimg.cn/2020040111102134.png" alt="在这里插入图片描述"><br>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数<br>J(θ_0,θ_1)的最小值。<br>梯度下降背后的思想是：开始时我们随机选择一个参数的组合θ_0,θ_1,………….θ_n计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。我们持续这么做直到找到一个局部最小值（local minimum），因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是全局最小值（global minimum），选择不同的初始参数组合，可能会找到不同的局部最小值。</p><p>同时更新是梯度下降中的一种常用方法。</p><p>假设你将θ_1初始化在局部最低点，结果是局部最优点的导数将等于零，新的θ_1等于原来的θ_1，如果参数已经处于局部最低点，那么梯度下降法更新其实什么都没做，它不会改变参数的值。这也解释了为什么即使学习速率α保持不变时，梯度下降也可以收敛到局部最低点。</p><h4 id="线性回归算法："><a href="#线性回归算法：" class="headerlink" title="线性回归算法："></a>线性回归算法：</h4><p> <img src="https://img-blog.csdnimg.cn/20200401111049338.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200401111055755.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200401111110722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>开始随机选择一系列的参数值，计算所有的预测结果后，再给所有的参数一个新的值，如此循环直到收敛。</p><h3 id="逻辑回归："><a href="#逻辑回归：" class="headerlink" title="逻辑回归："></a>逻辑回归：</h3><p><img src="https://img-blog.csdnimg.cn/20200401111126104.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401111130905.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401111134444.png" alt="在这里插入图片描述"></p><h4 id="逻辑回归的代价函数："><a href="#逻辑回归的代价函数：" class="headerlink" title="逻辑回归的代价函数："></a>逻辑回归的代价函数：</h4><p> <img src="https://img-blog.csdnimg.cn/20200401111259295.png" alt="在这里插入图片描述"><br>根据这个代价函数，为了拟合出参数，我们要找出让J(θ)取得最小值的参数θ<br><img src="https://img-blog.csdnimg.cn/20200401111314716.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401111348623.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401111403574.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200401111416704.png" alt="在这里插入图片描述"><br>线性回归和逻辑回归更新参数的规则看起来基本相同，但由于假设的定义发生了变化，所以逻辑函数的梯度下降，跟线性回归的梯度下降实际上是两个完全不同的东西。<br> <img src="https://img-blog.csdnimg.cn/20200401111435143.png" alt="在这里插入图片描述"></p><h3 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h3><p>线性回归和逻辑回归，它们能够有效地解决许多问题，但是当将它们应用到某些特定的机器学习应用时，会遇到过拟合(over-fitting)的问题，可能会导致它们效果很差，正则化技术可以改善或者减少过度拟合问题。<br> <img src="https://img-blog.csdnimg.cn/20200401111444532.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200401111458493.png" alt="在这里插入图片描述"></p><p>过拟合问题的处理：1.丢弃一些不能帮助我们正确预测的特征。可以是手工选择保留哪些特征，或者使用一些模型选择的算法来帮忙（例如<strong>PCA</strong>）<br>2.正则化。  保留所有的特征，但是减少参数的大小（<strong>magnitude</strong>）</p><p>回归问题中我们的模型是：<img src="https://img-blog.csdnimg.cn/2020040111154276.png" alt="在这里插入图片描述"><br>正是这些高次项导致了过拟合的产生，所以如果我们能让这些高次项的系数接近于 0 的话，就能很好的拟合了。<br>我们要做的就是在一定程度上减小这些参数θ的值，这就是正则化的基本方法。</p><p>特征的直观理解：<br>从本质上讲，神经网络能够通过学习得出其自身的一系列特征。在普通的<font color="red"> 逻辑回归</font>中，我们被限制为使用数据中的原始特征${x_1},{x_2}, \ldots ,{x_n}$，我们虽然可以使用一些二项式项来组合这些特征，但是我们仍然受到这些原始特征的限制。<br>在神经网络中，原始特征只是输入层，在我们上面三层的神经网络例子中，第三层也就是输出层做出的预测利用的是第二层的特征，而非输入层中的原始特征，我们可以认为第二层中的特征是神经网络通过学习后自己得出的一系列用于预测输出变量的新特征。</p><h3 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h3><p>为了计算代价函数的偏导数<img src="https://img-blog.csdnimg.cn/20200401142148249.png" alt="在这里插入图片描述"> ，我们需要采用一种反向传播算法，首先计算最后一层的误差，然后再一层一层反向求出各层的误差，直到倒数第二层。</p><h4 id="使用神经网络时候的步骤："><a href="#使用神经网络时候的步骤：" class="headerlink" title="使用神经网络时候的步骤："></a>使用神经网络时候的步骤：</h4><p>网络结构：第一件要做的事是选择网络结构，即决定选择多少层以及决定每层分别有多<br>少个单元。<br>第一层的单元数即我们训练集的特征数量。<br>最后一层的单元数是我们训练集的结果的类的数量。<br>如果隐藏层数大于 1，确保每个隐藏层的单元个数相同，通常情况下隐藏层单元的个数<br>越多越好。我们真正要决定的是隐藏层的层数和每个中间层的单元数。<br>训练神经网络：</p><ol><li>参数的随机初始化</li><li>利用正向传播方法计算所有的h_θ (x)</li><li>编写计算代价函数J的代码</li><li>利用反向传播方法计算所有偏导数</li><li>利用数值检验方法检验这些偏导数</li><li>使用优化算法来最小化代价函数<h4 id="应用机器学习，决定下一步该做什么"><a href="#应用机器学习，决定下一步该做什么" class="headerlink" title="应用机器学习，决定下一步该做什么"></a>应用机器学习，决定下一步该做什么</h4>　　<br>　　&nbsp; &nbsp;&nbsp;&nbsp; 在开发一个机器学习系统，或者想试着改进一个机器学习系统的性能，应该如何决定接下来应该选择哪条道路？<br>　　为了解释这一问题，我想仍然使用预测房价的学习例子，假如你已经完成了正则化线性回归，也就是最小化代价函数。一种办法是使用更多的训练样本，另一个方法是尝试选用更少的特征集。<br>　　当我们运用训练好了的模型来预测未知数据的时候发现有较大的误差，我们下一步可以做什么？   通常获得更多的训练实例是有效的，但代价较大。</li></ol><p>考虑采用下面的方法:<br>1.尝试减少特征的数量<br>2.尝试获得更多的特征<br>3.尝试增加多项式特征<br>4.尝试减少正则化程度λ<br>5.尝试增加正则化程度λ<br>当你运行一个学习算法时，如果这个算法的表现不理想，那么多半是出现两种情况：要么是偏差比较大，要么是方差比较大。换句话说，出现的情况要么是欠拟合，要么是过拟合问题。<br>将训练集和交叉验证集的代价函数误差与多项式的次数绘制在同一张图表上来分析：<br> <img src="https://img-blog.csdnimg.cn/20200401181606757.png" alt="在这里插入图片描述"><br>上面的曲线是交叉验证集，下面的曲线是训练集。<br>对于训练集，当d较小时，模型拟合程度更低，误差较大；随着d的增长，拟合程度提高，误差减小。<br>对于交叉验证集，当d较小时，模型拟合程度低，误差较大；但是随着d的增长，误差呈现先减小后增大的趋势，转折点是我们的模型开始过拟合训练数据集的时候。<br><img src="https://img-blog.csdnimg.cn/2020040118163087.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color="red">训练集误差和交叉验证集误差近似时：偏差/欠拟合<br>交叉验证集误差远大于训练集误差时：方差/过拟合    </font></p><h4 id="正则化和偏差、方差"><a href="#正则化和偏差、方差" class="headerlink" title="正则化和偏差、方差"></a>正则化和偏差、方差</h4><p>在我们在训练模型的过程中，一般会使用一些正则化方法来防止过拟合。但是我们可能<br>会正则化的程度太高或太小了，选择 λ 的值时也需要思考这些问题。</p><p>将训练集和交叉验证集模型的代价函数误差与 λ 的值绘制在一张图表上：<br> <img src="https://img-blog.csdnimg.cn/20200401181732215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当λ较小时，训练集误差较小（过拟合）而交叉验证集误差较大；<br>随着λ的增加，训练集误差不断增加（欠拟合），而交叉验证集误差则是先减小后<br>增加。</p><h4 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h4><p>学习曲线是一种很好的工具，可以用来判断某一个学习算法是否处于偏差、方差问题。学习曲线是学习算法的一个很好的合理检验。<br>学习曲线是将训练集误差和交叉验证集误差作为训练集实例数量（m）的函数绘制的图表</p><h4 id="逻辑回归算法是分类算法"><a href="#逻辑回归算法是分类算法" class="headerlink" title="逻辑回归算法是分类算法"></a>逻辑回归算法是分类算法</h4><p>适用于标签Y取值离散的情况，如1001。</p><p>梯度下降算法的每次迭代受到学习率的影响，如果学习率α过小，则达到收敛所需的迭<br>代次数会非常高；如果学习率α过大，每次迭代可能不会减小代价函数，可能会越过局部最<br>小值导致无法收敛。</p><h4 id="泛化能力"><a href="#泛化能力" class="headerlink" title="泛化能力"></a>泛化能力</h4><p>  泛化能力就是模型对未知数据的预测能力。在实际当中，我们通常通过测试误差来评价学习方法的泛化能力。</p><h4 id="机器学习中训练集、交叉验证集、测试集的理解"><a href="#机器学习中训练集、交叉验证集、测试集的理解" class="headerlink" title="机器学习中训练集、交叉验证集、测试集的理解"></a>机器学习中训练集、交叉验证集、测试集的理解</h4><p><font color="red">训练集（train set）</font> —— 用于模型拟合的数据样本。<br><font color="red">验证集（development set）</font>—— 是模型训练过程中单独留出的样本集，它可以用于调整模型的超参数和用于对模型的能力进行初步评估。<br>   在神经网络中， 我们用验证数据集去寻找最优的网络深度（number of hidden layers)，或者决定反向传播算法的停止点或者在神经网络中选择隐藏层神经元的数量；<br>在普通的机器学习中常用的交叉验证（Cross Validation) 就是把训练数据集本身再细分成不同的验证数据集去训练模型。<br><font color="red">测试集</font> —— 用来评估模最终模型的泛化能力。但不能作为调参、选择特征等算法相关的选择的依据。<br> <img src="https://img-blog.csdnimg.cn/20200401181903551.png" alt="在这里插入图片描述"><br>关于训练集、验证集、测试集的一个形象的比喻：</p><pre><code>训练集-----------学生的课本；学生 根据课本里的内容来掌握知识。验证集------------作业，通过作业可以知道 不同学生学习情况、进步的速度快慢。测试集-----------考试，考的题是平常都没有见过，考察学生举一反三的能力。</code></pre><p>传统上，一般三者切分的比例是：6：2：2，验证集并不是必须的</p><h4 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h4><p>构建一个学习算法的推荐方法为：</p><ol><li>从一个简单的能快速实现的算法开始，实现该算法并用交叉验证集数据测试这个算法  </li><li>绘制学习曲线，决定是增加更多数据，或者添加更多特征，还是其他选择</li><li>进行误差分析：人工检查交叉验证集中我们算法中产生预测误差的实例，看看这些实例<br>是否有某种系统化的趋势<br>==推荐在交叉验证集上来实施误差分析，而不是在测试集上。==</li></ol><p>单变量线性回归问题：<br>全局最小点是局部下降算法的最大点，<br>SVM（支持向量机）、奇异值分解。</p><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><p>SVM的全称是Support Vector Machine，即支持向量机，主要用于解决模式识别领域中的数据分类问题，属于有监督学习算法的一种。SVM要解决的问题可以用一个经典的二分类问题加以描述。</p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p> <img src="https://img-blog.csdnimg.cn/20200401181941717.png" alt="在这里插入图片描述"><br>主要是拟合一条直线，使尽可能多的点落在直线上。</p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>逻辑回归虽然名字叫做回归，但实际上却是一种分类学习方法。 线性回归完成的是回归拟合任务，而对于分类任务，我们同样需要一条线，但不是去拟合每个数据点，而是把不同类别的样本区分开来。<br>bagging是一种用来提高学习算法准确度的方法</p><h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><p><a href="https://blog.csdn.net/jiaoyangwm/article/details/79525237" target="_blank" rel="noopener">https://blog.csdn.net/jiaoyangwm/article/details/79525237</a></p><pre><code>决策树与随机森林都属于机器学习中监督学习的范畴，主要用于分类问题。</code></pre><p>决策树算法有这几种：ID3、C4.5、CART，基于决策树的算法有bagging、随机森林、GBDT等。决策树是一种利用树形结构进行决策的算法，对于样本数据根据已知条件或叫特征进行分叉，最终建立一棵树，树的叶子结节标识最终决策。新来的数据便可以根据这棵树进行判断。随机森林是一种通过多棵决策树进行优化决策的算法。</p><h4 id="SVM是否属于神经网络"><a href="#SVM是否属于神经网络" class="headerlink" title="SVM是否属于神经网络"></a>SVM是否属于神经网络</h4><p><a href="http://blog.sina.com.cn/s/blog_7ad48fee0100vz2f.html" target="_blank" rel="noopener">参考链接</a><br><img src="https://img-blog.csdnimg.cn/20200401182152994.png" alt="在这里插入图片描述"><br>SVM效果很大程度依赖kernel的设计<br>具体地说，线性SVM的计算部分和一个单层神经网络一样，就是一个矩阵乘积。SVM的关键在于它的Hinge Loss以及maximum margin的想法。其实这个loss也是可以用在神经网络里的（参见object detection的R-CNN方法）。对于处理非线性数据，SVM和神经网络走了两条不同的道路：神经网络通过多个隐层的方法来实现非线性的函数，有一些理论支持（比如说带隐层的神经网络可以模拟任何函数），但是目前而言还不是非常完备；SVM则采用了kernel trick的方法，这个在理论上面比较完备（RKHS，简单地说就是一个泛函的线性空间）。两者各有好坏，神经网络最近的好处是网络设计可以很灵活，但是老被人说跳大神；SVM的理论的确漂亮，但是kernel设计不是那么容易，所以最近没有那么热了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-李宏毅| keras demo | python</title>
      <link href="/posts/33cb.html"/>
      <url>/posts/33cb.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="利用keras实现手写数字辨识"><a href="#利用keras实现手写数字辨识" class="headerlink" title="利用keras实现手写数字辨识"></a>利用keras实现手写数字辨识</h3><p>首先要建一个Network scratch，input是<code>28∗28</code>的dimension，其实就是说这是一张image，image的解析度是<code>28∗28</code>，把它拉成长度是<code>28∗28</code>维的向量。output呢？现在做的是手写数字辨识，所以要决定它是0-9的哪个数字，output就是每一维对应的数字，所以output就是10维。中间假设你要两个layer，每个layer有500个hidden neuro</p><h4 id="创建一个network"><a href="#创建一个network" class="headerlink" title="创建一个network"></a>创建一个network</h4><pre><code>model=Sequential()</code></pre><p>添加第一个hidden layer,  　Dense意思为添加一个全连接网络，Ｃon2d表示添加一个convolution layer卷积层，input_dim表示输入维度，units表示hidden layer的神经元个数，activation表示激活函数，可以为relu，sigmoid，tanh，softmax，hard_sigmoid，linear等</p><pre><code>model.add(Dense(input_dim=28*28,units=500,activation='relu'))</code></pre><p>再添加一个layer</p><pre><code>model.add(Dense(units=500,activation='relu'))</code></pre><p>最后的输出层，由于是数字识别一共10个数字，所以output是10维，units=10,激活函数选择softmax</p><pre><code>model.add(Dense(units=10,activation='softmax'))</code></pre><h4 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h4><p>　　需要定义loss function，选择optimizer，以及评估指标metrics，其实所有的optimizer都是Gradent descent based，只是有不同的方法来决定learning rate，比如Adam，SGD，RMSprop，Adagrad，Adalta，Adamax ，Nadam等，configuration完成之后就可以开始train创建的Network。</p><pre><code>model.compile(loss='categorical crossentropy',optimizer='adam',metrics=['accuracy'])</code></pre><p>　　</p><h4 id="pick-the-best-function"><a href="#pick-the-best-function" class="headerlink" title="pick the best function"></a>pick the best function</h4><p>model.fit方法，开始用Gradent Descent帮你去train你的Network，那么你要给它你的train_data input 和label，这里x_train代表image，y_train代表image的label，关于x_train和y_train的格式，你都要存成numpy array。</p><pre><code>model.fit(x_train,y_train,batch_size=100,epochs=20)</code></pre><h4 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h4><p>接下来要拿train的network来使用，使用有两个不同的情景，这两个不同的情景一个是evaluation，意思就是说你的model在test data 上到底表现得怎样，call evaluate这个函数，然后把x_test，y_test喂给它，就会自动给你计算出Accuracy。它会output一个二维的向量，第一个维度代表了在test set上loss，第二个维度代表了在test set上的accuracy，这两个值是不一样的。loss可能用cross_entropy，Accuraccy是对与不对，即正确率。</p><ul><li>case 1<pre><code>score = model.evaluate(x_test,y_test)print('Total loss on Testiong Set : ',score[0])print('Accuracy of Testiong Set : ',score[1])</code></pre>第二种是做predict，就是系统上线后，没有正确答案的，call predict进行预测</li><li>case 2<pre><code>result = model.predict(x_test)</code></pre><h4 id="快速理解epoch、iteration和batch"><a href="#快速理解epoch、iteration和batch" class="headerlink" title="快速理解epoch、iteration和batch"></a>快速理解epoch、iteration和batch</h4>假设有1000个训练样本，batch_size=20,则iteration就是50，将所有的训练样本在同一个模型中训练5遍<br>batch_size * iteration = 样本数量，epoch=5.<br>所有样本完成一次前向传播+反向传播为一个epoch<blockquote><p>batchsize：简单点说，就是我们一次要将多少个数据扔进模型去训练，这个值介于1和训练样本总个数之间。<br>iteration：迭代的次数（向模型中扔数据的次数）,一个迭代= 同一批batchsize数据的一个正向通过+一个反向通过。<br>Epoch: 训练集中的全部样本都在训练模型中走了一遍，并返回一次（有去有回），为一个epoch。</p></blockquote></li></ul><p>由于这个例子中需要使用MNIST数据集，给出的源码中使用(x_train, y_train), (x_test, y_test) = mnist.load_data()  下载数据集，但是过程中需要翻墙，故我在此先将MNIST数据集的包下载下来，然后稍微修改下代码，完成数据的import.其中，numpy.load() 函数可以读取 .npy .npz 等文件类型，并返回对应的数据类型。<br>1）如果文件类型是 .pny 则返回一个1维数组。<br>2）如果文件类型是 .npz 则返回一个类似字典的数据类型，包含 {filename: array} 键值对。</p><pre class=" language-python"><code class="language-python">path <span class="token operator">=</span> <span class="token string">'C:\\Users\\Administrator\\Desktop\\mnist.npz'</span>    f <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_train'</span><span class="token punctuation">]</span>    x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_test'</span><span class="token punctuation">]</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>下载地址：<a href="https://pan.baidu.com/s/1EQdC4QfNL4OeMeWtJk9DEQ" target="_blank" rel="noopener">mnist数据集</a><br>提取码：gyt8 </p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>core <span class="token keyword">import</span> Dense<span class="token punctuation">,</span>Dropout<span class="token punctuation">,</span>Activation<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD<span class="token punctuation">,</span>Adam<span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> np_utils<span class="token keyword">from</span> keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> <span class="token string">'C:\\Users\\Administrator\\Desktop\\mnist.npz'</span>    f <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_train'</span><span class="token punctuation">]</span>    x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_test'</span><span class="token punctuation">]</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    number<span class="token operator">=</span><span class="token number">10000</span>    x_train<span class="token operator">=</span>x_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>number<span class="token punctuation">]</span>    y_train<span class="token operator">=</span>y_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>number<span class="token punctuation">]</span>    x_train<span class="token operator">=</span>x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>    x_test<span class="token operator">=</span>x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>    x_train<span class="token operator">=</span>x_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    x_test<span class="token operator">=</span>x_test<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    y_train<span class="token operator">=</span>np_utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    y_test<span class="token operator">=</span>np_utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    x_train<span class="token operator">=</span>x_train    x_test<span class="token operator">=</span>x_test    x_train<span class="token operator">=</span>x_train<span class="token operator">/</span><span class="token number">255</span>    x_test<span class="token operator">=</span>x_test<span class="token operator">/</span><span class="token number">255</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token operator">=</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#载入数据</span>model<span class="token operator">=</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span>units<span class="token operator">=</span><span class="token number">633</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#维度28*28，激活函数为sigmoid</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">633</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">633</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">689</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出层一定要是10维，units=10;</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">,</span>optimizer<span class="token operator">=</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#config</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>result<span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTEST ACC:'</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>添加10层，发现结果还是11%的accuracy<br><img src="https://img-blog.csdnimg.cn/2020033020550831.png" alt="在这里插入图片描述"><br>首先先看你在train data的performer，如果它在train data上做得好，那么可能是过拟合，如果在train data上做得不好，怎么能让它做到举一反三呢。所以至少先让它在train data 上得到好的结果。<br><img src="https://img-blog.csdnimg.cn/20200330211229389.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200330211316773.png" alt="在这里插入图片描述"><br>由得到的结果发现train data acc 也是差的，就说明train没有train好，并不是overfiting过拟合。<br>接下来进行调参过程:<br>MSE均方误差不适合于分类问题，将loss function改为categorical_crossentropy，看看结果如何：<br><img src="https://img-blog.csdnimg.cn/20200330213935621.png" alt="在这里插入图片描述"><br>发现一换成交叉熵categorical_crossentropy，在train set上的结果就变得很好了。得到86.21%的正确率。</p><h4 id="activation-function"><a href="#activation-function" class="headerlink" title="activation function"></a>activation function</h4><p>把sigmoid都改为relu，发现在train的accuracy就爬起来了，train的acc已经将近100分了，test 上也可以得到95.45%<br><img src="https://img-blog.csdnimg.cn/20200330214539656.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode|剑指offter|面试题6：从尾到头打印链表</title>
      <link href="/posts/103.html"/>
      <url>/posts/103.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="面试题06-从尾到头打印链表"><a href="#面试题06-从尾到头打印链表" class="headerlink" title="面试题06. 从尾到头打印链表"></a>面试题06. 从尾到头打印链表</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入：<code>head = [1,3,2]</code><br>输出：<code>[2,3,1]</code></p></blockquote><p>我们很自然地可以想到把链表中链接节点的指针反转过来，改变链表的方向，然后就可以从头到尾输出了。但是这种方法会改变原来的链表结构，如果要求不修改链表的结构可以有以下方法：<br>解法一：<br>遍历链表的顺序是从头到尾，但是题目要求输出的顺序却是从尾到头，第一个遍历到的节点最后一个输出，而最后一个遍历到的节点第一个输出。是典型的”后进先出”，栈这种数据结构具有该特点，我们可以在从头到尾遍历的时候，把经过的每个节点放入栈中，遍历完后，再从栈的顶端开始逐个输出节点的值。</p><h4 id="leetcode解答："><a href="#leetcode解答：" class="headerlink" title="leetcode解答："></a>leetcode解答：</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>         stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s <span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环遍历，入栈</span>             head<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出栈</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>解法二：<br>递归在本质上就是一个栈结构，可以用递归来实现。当访问到每个节点的时候，先递归输出它后面的节点，再输出该节点，最后链表的输出结果就反过来了。</p><h4 id="leetcode解答：-1"><a href="#leetcode解答：-1" class="headerlink" title="leetcode解答："></a>leetcode解答：</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token function">reversePrint</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>解法三：改变链表的结构<br>直接翻转指针。<br><img src="https://img-blog.csdnimg.cn/20200328221130283.png" alt="在这里插入图片描述"><br>  初始状态，pre是NULL，head指向当前的头节点A，next指向A节点的下一个节点B。首先从A节点开始逆序，将A节点的next指针指向pre，因为pre的当前值是NULL，所以A节点就从链表中脱离出来了，然后移动head和next指针，使它们分别指向B节点和B的下一个节点C（因为当前的next已经指向B节点了，因此修改A节点的next指针不会导致链表丢失）。逆向节点A之后，链表的状态如图下图所示：<br>  <img src="https://img-blog.csdnimg.cn/20200328221523995.png" alt="在这里插入图片描述"><br>  经过一轮迭代：<br>  <img src="https://img-blog.csdnimg.cn/20200328221551100.png" alt="在这里插入图片描述"><br>再经过一轮迭代：<br><img src="https://img-blog.csdnimg.cn/20200328221644843.png" alt="在这里插入图片描述"><br>可以看出再经过一轮就可以完成链表的逆序排序，循环的终止条件为head为空NULL</p><p>链表的状态图 参考:<a href="https://blog.csdn.net/lycnjupt/article/details/47103433" target="_blank" rel="noopener">单链表的逆序</a><br>leetcode解答:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>pre<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            next<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span>next <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存当前节点的下一节点</span>            head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点指向前一个节点，反向改变指针。</span>            pre<span class="token operator">=</span>head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新前一个节点</span>            head<span class="token operator">=</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新当前节点</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//上一个while循环结束后，pre指向新的链表头</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode|剑指offter|面试题4：二维数组中的查找</title>
      <link href="/posts/1666.html"/>
      <url>/posts/1666.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="面试题04-二维数组中的查找"><a href="#面试题04-二维数组中的查找" class="headerlink" title="面试题04. 二维数组中的查找"></a>面试题04. 二维数组中的查找</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><p>现有矩阵 matrix 如下：</p><blockquote><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p></blockquote><p>给定 target = <code>5</code>，返回 <code>true</code>。<br>给定 target = <code>20</code>，返回<code>false</code>。</p><p>解法1：暴力破法</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token keyword">int</span> rows<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columns<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>columns<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>解法2：从给定矩阵的右上角开始查找<br>首先选取数组中右上角的数字，如果该数字等于要查找的数字，则结束查找过程；如果该数字大于要查找的数字，则提出该数字所在的列；如果该数字小于要查找的数字，则提出该数字所在的行。不断剔除一行或者一列，缩小查找范围，直到找到要查找的数字。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> rows<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columns<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span>columns<span class="token number">-1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右上角开始判断</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">&lt;</span>rows<span class="token operator">&amp;&amp;</span>column<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>            column<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>            row<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>解法3：还可以从给定矩阵的左下角开始查找</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//异常判断</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token keyword">int</span> rows<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columns<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row<span class="token operator">=</span>rows<span class="token number">-1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从左下角开始判断</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>column<span class="token operator">&lt;</span>columns<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>            row<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要查找的数字比该数字小，则剔除该行，上移</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>            column<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////要查找的数字比该数字大，则剔除该列，右移</span>            <span class="token keyword">else</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相等则返回true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode|剑指offter|面试题3：数组中重复的数字</title>
      <link href="/posts/7093.html"/>
      <url>/posts/7093.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="面试题03-数组中重复的数字"><a href="#面试题03-数组中重复的数字" class="headerlink" title="面试题03. 数组中重复的数字"></a>面试题03. 数组中重复的数字</h2><p>本题要求找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。<br>示例1：</p><h4 id="输入：-2-3-1-0-2-5-3"><a href="#输入：-2-3-1-0-2-5-3" class="headerlink" title="输入： [2,3,1,0,2,5,3]"></a>输入： [2,3,1,0,2,5,3]</h4><h4 id="输出：-2或3"><a href="#输出：-2或3" class="headerlink" title="输出： 2或3"></a>输出： 2或3</h4><p>限制：2 &lt;= n &lt;= 100000</p><h3 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h3><p>一个简单的方法是把输入的数组进行排序，遍历排序后的数组找到重复的数字。排序一个长度为n的数字的时间复杂度为O(nlogn),所以这种方法的时间复杂度为O(nlogn)。</p><h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><p>使用哈希表来解决这个问题。从头到尾顺序扫描数组中的每一个数，没扫描一个数字可以用O(1)的时间判断在哈希表中是否包含此数字，如果哈希表中没有此数字就将此数字加入到哈希表中，如果哈希表中已存在此数字就能找到一个重复的数字。算法的时间复杂度为O(n)，但是空间复杂度也为O(n)，以空间换区时间。</p><h3 id="解法三："><a href="#解法三：" class="headerlink" title="解法三："></a>解法三：</h3><p>数组中的数字为0到n-1的范围内。如果这个数组中没有重复的数字，则对应的i位置的数据也为i。可以重排此数组，扫描数组中的每一个数字，当扫描到下标为i的数字时，首先比较这个数字（用m表示）是不是等于i。如果是，接着扫描下一个数字。如果不是，再拿它和第m个数字比较，如果相等则找到重复的数据。否则就把第i个数字与第m个数字交换。重复这个比较、交换的过程，直到找到一个重复的数字。</p><p><strong>leetcode解答：</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>牛客网解答：</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Parameters:</span>    <span class="token comment" spellcheck="true">//        numbers:     an array of integers</span>    <span class="token comment" spellcheck="true">//        length:      the length of array numbers</span>    <span class="token comment" spellcheck="true">//        duplication: (Output) the duplicated number in the array number</span>    <span class="token comment" spellcheck="true">// Return value:       true if the input is valid, and there are some duplications in the array number</span>    <span class="token comment" spellcheck="true">//                     otherwise false</span>    <span class="token keyword">bool</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numbers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> duplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">||</span>length<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>length<span class="token number">-1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>numbers<span class="token punctuation">[</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token operator">*</span>duplication<span class="token operator">=</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                             <span class="token punctuation">}</span>                <span class="token keyword">int</span> a<span class="token operator">=</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交换</span>                numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>numbers<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>                numbers<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程练习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda3安装教程(详细)</title>
      <link href="/posts/bf8d.html"/>
      <url>/posts/bf8d.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Anaconda3下载"><a href="#Anaconda3下载" class="headerlink" title="Anaconda3下载"></a>Anaconda3下载</h2><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br>选择anaconda 3.5.2 对应的python版本是python3.6<br><img src="https://img-blog.csdnimg.cn/20200319185750950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="安装anaconda3"><a href="#安装anaconda3" class="headerlink" title="安装anaconda3"></a>安装anaconda3</h2><p><img src="https://img-blog.csdnimg.cn/20200319185859583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>点击next</p><p><img src="https://img-blog.csdnimg.cn/2020031918593948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>点击I Agree</p><p><img src="https://img-blog.csdnimg.cn/20200319190001173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>然后选择Install for All Users，点击Next<br><img src="https://img-blog.csdnimg.cn/2020031919012346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>选择安装位置，建议不要安装在C盘。<br><img src="https://img-blog.csdnimg.cn/20200319200626716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>默认第一项是没有选择的，这里我把它勾上，添加anaconda到系统环境变量中，然后点击Install<br><img src="https://img-blog.csdnimg.cn/20200319200952980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>等待安装完成。<br><img src="https://img-blog.csdnimg.cn/20200319202441221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>接下来有安装VScode的选项，这里选择跳过，点击Skip<br><img src="https://img-blog.csdnimg.cn/20200319202521557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>安装完成，点击Finished</p><h3 id="验证anaconda是否安装成功"><a href="#验证anaconda是否安装成功" class="headerlink" title="验证anaconda是否安装成功"></a>验证anaconda是否安装成功</h3><p>打开cmd命令行，输入conda -V，如果能看到conda版本号，说明anaconda已经安装好了。<br><img src="https://img-blog.csdnimg.cn/20200319202840535.png" alt=" "></p><h2 id="用conda创建python虚拟环境"><a href="#用conda创建python虚拟环境" class="headerlink" title="用conda创建python虚拟环境"></a>用conda创建python虚拟环境</h2><p>  　　使用conda create -n your_env_name python=X.X（2.7、3.6等)命令创建python版本为X.X、名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。</p><p><code>conda create -n learn python=3.6</code><br>我选择建立一个名为learn的python版本为3.6的虚拟环境</p><h3 id="activate激活虚拟环境"><a href="#activate激活虚拟环境" class="headerlink" title="activate激活虚拟环境"></a>activate激活虚拟环境</h3><p><img src="https://img-blog.csdnimg.cn/20200320102010525.png" alt=" "><br>在这里输入activate tensorflow<br>显示激活成功。<br>输入deactivate回到默认环境中</p><hr><p>如果想要删除创建的虚拟环境：<br>使用conda remove -n your_env_name(虚拟环境名称) –all命令<br>在虚拟环境中安装额外的包：<br>使用命令conda install -n your_env_name [package]即可安装package到your_env_name中<br>用pip安装tensorflow换成国内源快速安装：<br><code>pip install --index-url https://pypi.douban.com/simple tensorflow</code></p><h3 id="安装tensorflow和keras"><a href="#安装tensorflow和keras" class="headerlink" title="安装tensorflow和keras"></a>安装tensorflow和keras</h3><p>使用命令<code>conda install -n your_env_name tensorflow</code>安装，如果想要指定tensorflow的版本号，直接tensorflow==X.X.X</p><p><strong>想要在jupyter notebook中import tensorflow</strong><br>需要执行以下命令：<br><code>conda install ipython</code><br><code>conda install jupyter</code><br>最后输入<code>conda install keras</code>安装keras<br><img src="https://img-blog.csdnimg.cn/20200320102608665.png" alt=" "><br>检查以下tensorflow和keras是否安装成功<br><img src="https://img-blog.csdnimg.cn/20200320102827481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200320102847141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=" "><br>cmd命令行输入jupyter notebook，import tensorflow看是否报错<br><img src="https://img-blog.csdnimg.cn/2020032010311961.png" alt=" "><br>没有输出任何信息，证明已经安装好了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Anaconda在开始菜单找不到navigator和prompt的问题</title>
      <link href="/posts/7f55.html"/>
      <url>/posts/7f55.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>找到Anaconda的安装目录<br><img src="https://img-blog.csdnimg.cn/20200319150507509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用cmd命令打开终端<br>然后输入</p><pre><code>python .\Lib_nsis.py mkmenus</code></pre><p><img src="https://img-blog.csdnimg.cn/20200319150549275.png" alt="在这里插入图片描述"><br><strong>完美解决问题。</strong><br><img src="https://img-blog.csdnimg.cn/20200319150821586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319150842391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-李宏毅| 回归演示 | python</title>
      <link href="/posts/c315.html"/>
      <url>/posts/c315.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="回归的定义"><a href="#回归的定义" class="headerlink" title="回归的定义"></a>回归的定义</h2><p>Regression就是指找到一个函数$function$，通过输入特征x，输出一个数值$Scalar$</p><p>看了李宏毅老师的机器学习课程视频，其中的Regression demo部分，关于预测宝可梦的CP值的应用代码，在jupyter notebook中实现。<br>现在假设有10个x_data和y_data，x和y之间的关系是y_data=b+w*x_data。b，w都是参数，是需要学习出来的。现在我们来练习用梯度下降找到b和w。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Simhei'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 显示中文</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 解决保存图像是负号'-'显示为方块的问题</span>x_data<span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">338</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">333</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">328</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">606</span><span class="token punctuation">.</span><span class="token punctuation">]</span>y_data<span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">640</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">633</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">619</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">393</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">428</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1591</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># ydata =b + w * xdata</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bias</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#weight</span>Z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        w <span class="token operator">=</span> y<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">+</span> <span class="token punctuation">(</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">-</span> w<span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span><span class="token number">2</span>        Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>   Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span>len<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ydata = b + w * xdata</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">120</span> <span class="token comment" spellcheck="true"># initial b</span>w <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token comment" spellcheck="true">#intial w</span>lr <span class="token operator">=</span><span class="token number">0.0000001</span> iteration <span class="token operator">=</span> <span class="token number">100000</span> <span class="token comment" spellcheck="true"># Store initial values for plotting.</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>w_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#lr_b = 0 #客制化b的learning rate 的初始值</span><span class="token comment" spellcheck="true">#lr_w = 0 #客制化w的learning rate 的初始值</span><span class="token comment" spellcheck="true"># Iterations</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    b_grad <span class="token operator">=</span> <span class="token number">0.0</span>    w_grad <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b_grad <span class="token operator">=</span> b_grad <span class="token operator">-</span> <span class="token number">2.0</span><span class="token operator">*</span><span class="token punctuation">(</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">-</span> w<span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">1.0</span>        w_grad <span class="token operator">=</span> w_grad <span class="token operator">-</span> <span class="token number">2.0</span><span class="token operator">*</span><span class="token punctuation">(</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">-</span> w<span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># lr_b = lr_b + b_grad ** 2 #客制化b的learning rate</span>   <span class="token comment" spellcheck="true"># lr_w = lr_w + w_grad ** 2 #客制化w的learning rate</span>    <span class="token comment" spellcheck="true"># Update parameters.</span>    b <span class="token operator">=</span> b <span class="token operator">-</span> lr <span class="token operator">*</span> b_grad    w <span class="token operator">=</span> w <span class="token operator">-</span> lr <span class="token operator">*</span> w_grad    <span class="token comment" spellcheck="true"># Store parameters for plotting</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot the figure</span>plt<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">'jet'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">188.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.67</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> ms <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> markeredgewidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>b_history<span class="token punctuation">,</span> w_history<span class="token punctuation">,</span> <span class="token string">'o-'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>r<span class="token string">'$b$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>r<span class="token string">'$w$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"线性回归"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果图：<br><img src="https://img-blog.csdnimg.cn/20200312150150723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>横坐标是b，纵坐标是w，标记×位最优解，显然，在图中我们并没有运行得到最优解，最优解十分的遥远。那么我们就调大learning rate，lr = 0.000001（调大10倍），得到结果如下图。<br><img src="https://img-blog.csdnimg.cn/20200312150917344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>我们再调大learning rate，lr = 0.00001（调大10倍），得到结果如下图。<br><img src="https://img-blog.csdnimg.cn/20200312153648587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>结果发现learning rate太大了，结果很不好。<br>所以我们给b和w特制化两种learning rate<br>修改后代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Simhei'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 显示中文</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 解决保存图像是负号'-'显示为方块的问题</span>x_data<span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">338</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">333</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">328</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">606</span><span class="token punctuation">.</span><span class="token punctuation">]</span>y_data<span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">640</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">633</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">619</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">393</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">428</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1591</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># ydata =b + w * xdata</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bias</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#weight</span>Z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        w <span class="token operator">=</span> y<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">+</span> <span class="token punctuation">(</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">-</span> w<span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span><span class="token number">2</span>        Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>   Z<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span>len<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ydata = b + w * xdata</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">120</span> <span class="token comment" spellcheck="true"># initial b</span>w <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token comment" spellcheck="true">#intial w</span>lr <span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#learning rate设为1</span>iteration <span class="token operator">=</span> <span class="token number">100000</span> <span class="token comment" spellcheck="true"># Store initial values for plotting.</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>w_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span>lr_b <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#客制化b的learning rate 的初始值</span>lr_w <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#客制化w的learning rate 的初始值</span><span class="token comment" spellcheck="true"># Iterations</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    b_grad <span class="token operator">=</span> <span class="token number">0.0</span>    w_grad <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b_grad <span class="token operator">=</span> b_grad <span class="token operator">-</span> <span class="token number">2.0</span><span class="token operator">*</span><span class="token punctuation">(</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">-</span> w<span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">1.0</span>        w_grad <span class="token operator">=</span> w_grad <span class="token operator">-</span> <span class="token number">2.0</span><span class="token operator">*</span><span class="token punctuation">(</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">-</span> w<span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    lr_b <span class="token operator">=</span> lr_b <span class="token operator">+</span> b_grad <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#客制化b的learning rate</span>    lr_w <span class="token operator">=</span> lr_w <span class="token operator">+</span> w_grad <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#客制化w的learning rate</span>    <span class="token comment" spellcheck="true"># Update parameters.</span>    b <span class="token operator">=</span> b <span class="token operator">-</span> lr<span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lr_b <span class="token punctuation">)</span> <span class="token operator">*</span> b_grad    w <span class="token operator">=</span> w <span class="token operator">-</span> lr<span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lr_w <span class="token punctuation">)</span> <span class="token operator">*</span> w_grad    <span class="token comment" spellcheck="true"># Store parameters for plotting</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot the figure</span>plt<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">'jet'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">188.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.67</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> ms <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> markeredgewidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>b_history<span class="token punctuation">,</span> w_history<span class="token punctuation">,</span> <span class="token string">'o-'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>r<span class="token string">'$b$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>r<span class="token string">'$w$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"线性回归"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这样有了新的特制化两种learning rate就可以在10w次迭代之内到达最优点了。<br><img src="https://img-blog.csdnimg.cn/20200312154047356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logistic regression python 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSDN-markdown编辑器语法——字体、字号与颜色设置</title>
      <link href="/posts/36fc.html"/>
      <url>/posts/36fc.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a> <p>  <strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。但是它本身是不支持修改字体、字号与颜色等功能的！</p><p>  <strong>CSDN-markdown</strong>编辑器是其衍生版本，扩展了Markdown的功能（如表格、脚注、<strong>内嵌HTML</strong>等等）！对，就是<strong>内嵌HTML</strong>，接下来要讲的功能就需要使用<strong>内嵌HTML</strong>的方法来实现。</p><h1 id="字体字号与颜色"><a name="t0"></a><a name="t0"></a>字体、字号与颜色</h1><pre><code>&lt;font face="黑体"&gt;我是黑体字&lt;/font&gt;&lt;font face="微软雅黑"&gt;我是微软雅黑&lt;/font&gt;&lt;font face="STCAIYUN"&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=7 face="黑体"&gt;color=#0099ff size=72 face="黑体"&lt;/font&gt;&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</code></pre><p>Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。</p><h1 id="呈现效果"><a name="t1"></a><a name="t1"></a>呈现效果</h1><hr><p><font face="黑体">我是黑体字</font> <br><font face="微软雅黑">我是微软雅黑</font> <br><font face="STCAIYUN">我是华文彩云</font> <br><font color="#0099ff" size="7" face="黑体">color=#0099ff size=72 face=”黑体”</font> <br><font color="#00ffff" size="72">color=#00ffff 可以用十六位颜色值</font> <br><font color="gray" size="72">color=gray 也可以用已知颜色名</font></p><h1 id="颜色名列表"><a name="t2"></a><a name="t2"></a>颜色名列表</h1><hr><div class="table-box"><table><tbody><tr><th>颜色名</th><th>十六进制颜色值</th><th>颜色</th></tr><tr><td><font color="AliceBlue">AliceBlue</font></td><td><font color="#F0F8FF">#F0F8FF</font></td><td bgcolor="#F0F8FF">rgb(240, 248, 255)</td></tr><tr><td><font color="AntiqueWhite">AntiqueWhite</font></td><td><font color="#FAEBD7">#FAEBD7</font></td><td bgcolor="#FAEBD7">rgb(250, 235, 215)</td></tr><tr><td><font color="Aqua">Aqua</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr><tr><td><font color="Aquamarine">Aquamarine</font></td><td><font color="#7FFFD4">#7FFFD4</font></td><td bgcolor="#7FFFD4">rgb(127, 255, 212)</td></tr><tr><td><font color="Azure">Azure</font></td><td><font color="#F0FFFF">#F0FFFF</font></td><td bgcolor="#F0FFFF">rgb(240, 255, 255)</td></tr><tr><td><font color="Beige">Beige</font></td><td><font color="#F5F5DC">#F5F5DC</font></td><td bgcolor="#F5F5DC">rgb(245, 245, 220)</td></tr><tr><td><font color="Bisque">Bisque</font></td><td><font color="#FFE4C4">#FFE4C4</font></td><td bgcolor="#FFE4C4">rgb(255, 228, 196)</td></tr><tr><td><font color="Black">Black</font></td><td><font color="#000000">#000000</font></td><td bgcolor="#000000">rgb(0, 0, 0)</td></tr><tr><td><font color="BlanchedAlmond">BlanchedAlmond</font></td><td><font color="#FFEBCD">#FFEBCD</font></td><td bgcolor="#FFEBCD">rgb(255, 235, 205)</td></tr><tr><td><font color="Blue">Blue</font></td><td><font color="#0000FF">#0000FF</font></td><td bgcolor="#0000FF">rgb(0, 0, 255)</td></tr><tr><td><font color="BlueViolet">BlueViolet</font></td><td><font color="#8A2BE2">#8A2BE2</font></td><td bgcolor="#8A2BE2">rgb(138, 43, 226)</td></tr><tr><td><font color="Brown">Brown</font></td><td><font color="#A52A2A">#A52A2A</font></td><td bgcolor="#A52A2A">rgb(165, 42, 42)</td></tr><tr><td><font color="BurlyWood">BurlyWood</font></td><td><font color="#DEB887">#DEB887</font></td><td bgcolor="#DEB887">rgb(222, 184, 135)</td></tr><tr><td><font color="CadetBlue">CadetBlue</font></td><td><font color="#5F9EA0">#5F9EA0</font></td><td bgcolor="#5F9EA0">rgb(95, 158, 160)</td></tr><tr><td><font color="Chartreuse">Chartreuse</font></td><td><font color="#7FFF00">#7FFF00</font></td><td bgcolor="#7FFF00">rgb(127, 255, 0)</td></tr><tr><td><font color="Chocolate">Chocolate</font></td><td><font color="#D2691E">#D2691E</font></td><td bgcolor="#D2691E">rgb(210, 105, 30)</td></tr><tr><td><font color="Coral">Coral</font></td><td><font color="#FF7F50">#FF7F50</font></td><td bgcolor="#FF7F50">rgb(255, 127, 80)</td></tr><tr><td><font color="CornflowerBlue">CornflowerBlue</font></td><td><font color="#6495ED">#6495ED</font></td><td bgcolor="#6495ED">rgb(100, 149, 237)</td></tr><tr><td><font color="Cornsilk">Cornsilk</font></td><td><font color="#FFF8DC">#FFF8DC</font></td><td bgcolor="#FFF8DC">rgb(255, 248, 220)</td></tr><tr><td><font color="Crimson">Crimson</font></td><td><font color="#DC143C">#DC143C</font></td><td bgcolor="#DC143C">rgb(220, 20, 60)</td></tr><tr><td><font color="Cyan">Cyan</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr><tr><td><font color="DarkBlue">DarkBlue</font></td><td><font color="#00008B">#00008B</font></td><td bgcolor="#00008B">rgb(0, 0, 139)</td></tr><tr><td><font color="DarkCyan">DarkCyan</font></td><td><font color="#008B8B">#008B8B</font></td><td bgcolor="#008B8B">rgb(0, 139, 139)</td></tr><tr><td><font color="DarkGoldenRod">DarkGoldenRod</font></td><td><font color="#B8860B">#B8860B</font></td><td bgcolor="#B8860B">rgb(184, 134, 11)</td></tr><tr><td><font color="DarkGray">DarkGray</font></td><td><font color="#A9A9A9">#A9A9A9</font></td><td bgcolor="#A9A9A9">rgb(169, 169, 169)</td></tr><tr><td><font color="DarkGreen">DarkGreen</font></td><td><font color="#006400">#006400</font></td><td bgcolor="#006400">rgb(0, 100, 0)</td></tr><tr><td><font color="DarkKhaki">DarkKhaki</font></td><td><font color="#BDB76B">#BDB76B</font></td><td bgcolor="#BDB76B">rgb(189, 183, 107)</td></tr><tr><td><font color="DarkMagenta">DarkMagenta</font></td><td><font color="#8B008B">#8B008B</font></td><td bgcolor="#8B008B">rgb(139, 0, 139)</td></tr><tr><td><font color="DarkOliveGreen">DarkOliveGreen</font></td><td><font color="#556B2F">#556B2F</font></td><td bgcolor="#556B2F">rgb(85, 107, 47)</td></tr><tr><td><font color="Darkorange">Darkorange</font></td><td><font color="#FF8C00">#FF8C00</font></td><td bgcolor="#FF8C00">rgb(255, 140, 0)</td></tr><tr><td><font color="DarkOrchid">DarkOrchid</font></td><td><font color="#9932CC">#9932CC</font></td><td bgcolor="#9932CC">rgb(153, 50, 204)</td></tr><tr><td><font color="DarkRed">DarkRed</font></td><td><font color="#8B0000">#8B0000</font></td><td bgcolor="#8B0000">rgb(139, 0, 0)</td></tr><tr><td><font color="DarkSalmon">DarkSalmon</font></td><td><font color="#E9967A">#E9967A</font></td><td bgcolor="#E9967A">rgb(233, 150, 122)</td></tr><tr><td><font color="DarkSeaGreen">DarkSeaGreen</font></td><td><font color="#8FBC8F">#8FBC8F</font></td><td bgcolor="#8FBC8F">rgb(143, 188, 143)</td></tr><tr><td><font color="DarkSlateBlue">DarkSlateBlue</font></td><td><font color="#483D8B">#483D8B</font></td><td bgcolor="#483D8B">rgb(72, 61, 139)</td></tr><tr><td><font color="DarkSlateGray">DarkSlateGray</font></td><td><font color="#2F4F4F">#2F4F4F</font></td><td bgcolor="#2F4F4F">rgb(47, 79, 79)</td></tr><tr><td><font color="DarkTurquoise">DarkTurquoise</font></td><td><font color="#00CED1">#00CED1</font></td><td bgcolor="#00CED1">rgb(0, 206, 209)</td></tr><tr><td><font color="DarkViolet">DarkViolet</font></td><td><font color="#9400D3">#9400D3</font></td><td bgcolor="#9400D3">rgb(148, 0, 211)</td></tr><tr><td><font color="DeepPink">DeepPink</font></td><td><font color="#FF1493">#FF1493</font></td><td bgcolor="#FF1493">rgb(255, 20, 147)</td></tr><tr><td><font color="DeepSkyBlue">DeepSkyBlue</font></td><td><font color="#00BFFF">#00BFFF</font></td><td bgcolor="#00BFFF">rgb(0, 191, 255)</td></tr><tr><td><font color="DimGray">DimGray</font></td><td><font color="#696969">#696969</font></td><td bgcolor="#696969">rgb(105, 105, 105)</td></tr><tr><td><font color="DodgerBlue">DodgerBlue</font></td><td><font color="#1E90FF">#1E90FF</font></td><td bgcolor="#1E90FF">rgb(30, 144, 255)</td></tr><tr><td><font color="Feldspar">Feldspar</font></td><td><font color="#D19275">#D19275</font></td><td bgcolor="#D19275">rgb(209, 146, 117)</td></tr><tr><td><font color="FireBrick">FireBrick</font></td><td><font color="#B22222">#B22222</font></td><td bgcolor="#B22222">rgb(178, 34, 34)</td></tr><tr><td><font color="FloralWhite">FloralWhite</font></td><td><font color="#FFFAF0">#FFFAF0</font></td><td bgcolor="#FFFAF0">rgb(255, 250, 240)</td></tr><tr><td><font color="ForestGreen">ForestGreen</font></td><td><font color="#228B22">#228B22</font></td><td bgcolor="#228B22">rgb(34, 139, 34)</td></tr><tr><td><font color="Fuchsia">Fuchsia</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr><tr><td><font color="Gainsboro">Gainsboro</font></td><td><font color="#DCDCDC">#DCDCDC</font></td><td bgcolor="#DCDCDC">rgb(220, 220, 220)</td></tr><tr><td><font color="GhostWhite">GhostWhite</font></td><td><font color="#F8F8FF">#F8F8FF</font></td><td bgcolor="#F8F8FF">rgb(248, 248, 255)</td></tr><tr><td><font color="Gold">Gold</font></td><td><font color="#FFD700">#FFD700</font></td><td bgcolor="#FFD700">rgb(255, 215, 0)</td></tr><tr><td><font color="GoldenRod">GoldenRod</font></td><td><font color="#DAA520">#DAA520</font></td><td bgcolor="#DAA520">rgb(218, 165, 32)</td></tr><tr><td><font color="Gray">Gray</font></td><td><font color="#808080">#808080</font></td><td bgcolor="#808080">rgb(128, 128, 128)</td></tr><tr><td><font color="Green">Green</font></td><td><font color="#008000">#008000</font></td><td bgcolor="#008000">rgb(0, 128, 0)</td></tr><tr><td><font color="GreenYellow">GreenYellow</font></td><td><font color="#ADFF2F">#ADFF2F</font></td><td bgcolor="#ADFF2F">rgb(173, 255, 47)</td></tr><tr><td><font color="HoneyDew">HoneyDew</font></td><td><font color="#F0FFF0">#F0FFF0</font></td><td bgcolor="#F0FFF0">rgb(240, 255, 240)</td></tr><tr><td><font color="HotPink">HotPink</font></td><td><font color="#FF69B4">#FF69B4</font></td><td bgcolor="#FF69B4">rgb(255, 105, 180)</td></tr><tr><td><font color="IndianRed">IndianRed</font></td><td><font color="#CD5C5C">#CD5C5C</font></td><td bgcolor="#CD5C5C">rgb(205, 92, 92)</td></tr><tr><td><font color="Indigo">Indigo</font></td><td><font color="#4B0082">#4B0082</font></td><td bgcolor="#4B0082">rgb(75, 0, 130)</td></tr><tr><td><font color="Ivory">Ivory</font></td><td><font color="#FFFFF0">#FFFFF0</font></td><td bgcolor="#FFFFF0">rgb(255, 255, 240)</td></tr><tr><td><font color="Khaki">Khaki</font></td><td><font color="#F0E68C">#F0E68C</font></td><td bgcolor="#F0E68C">rgb(240, 230, 140)</td></tr><tr><td><font color="Lavender">Lavender</font></td><td><font color="#E6E6FA">#E6E6FA</font></td><td bgcolor="#E6E6FA">rgb(230, 230, 250)</td></tr><tr><td><font color="LavenderBlush">LavenderBlush</font></td><td><font color="#FFF0F5">#FFF0F5</font></td><td bgcolor="#FFF0F5">rgb(255, 240, 245)</td></tr><tr><td><font color="LawnGreen">LawnGreen</font></td><td><font color="#7CFC00">#7CFC00</font></td><td bgcolor="#7CFC00">rgb(124, 252, 0)</td></tr><tr><td><font color="LemonChiffon">LemonChiffon</font></td><td><font color="#FFFACD">#FFFACD</font></td><td bgcolor="#FFFACD">rgb(255, 250, 205)</td></tr><tr><td><font color="LightBlue">LightBlue</font></td><td><font color="#ADD8E6">#ADD8E6</font></td><td bgcolor="#ADD8E6">rgb(173, 216, 230)</td></tr><tr><td><font color="LightCoral">LightCoral</font></td><td><font color="#F08080">#F08080</font></td><td bgcolor="#F08080">rgb(240, 128, 128)</td></tr><tr><td><font color="LightCyan">LightCyan</font></td><td><font color="#E0FFFF">#E0FFFF</font></td><td bgcolor="#E0FFFF">rgb(224, 255, 255)</td></tr><tr><td><font color="LightGoldenRodYellow">LightGoldenRodYellow</font></td><td><font color="#FAFAD2">#FAFAD2</font></td><td bgcolor="#FAFAD2">rgb(250, 250, 210)</td></tr><tr><td><font color="LightGrey">LightGrey</font></td><td><font color="#D3D3D3">#D3D3D3</font></td><td bgcolor="#D3D3D3">rgb(211, 211, 211)</td></tr><tr><td><font color="LightGreen">LightGreen</font></td><td><font color="#90EE90">#90EE90</font></td><td bgcolor="#90EE90">rgb(144, 238, 144)</td></tr><tr><td><font color="LightPink">LightPink</font></td><td><font color="#FFB6C1">#FFB6C1</font></td><td bgcolor="#FFB6C1">rgb(255, 182, 193)</td></tr><tr><td><font color="LightSalmon">LightSalmon</font></td><td><font color="#FFA07A">#FFA07A</font></td><td bgcolor="#FFA07A">rgb(255, 160, 122)</td></tr><tr><td><font color="LightSeaGreen">LightSeaGreen</font></td><td><font color="#20B2AA">#20B2AA</font></td><td bgcolor="#20B2AA">rgb(32, 178, 170)</td></tr><tr><td><font color="LightSkyBlue">LightSkyBlue</font></td><td><font color="#87CEFA">#87CEFA</font></td><td bgcolor="#87CEFA">rgb(135, 206, 250)</td></tr><tr><td><font color="LightSlateBlue">LightSlateBlue</font></td><td><font color="#8470FF">#8470FF</font></td><td bgcolor="#8470FF">rgb(132, 112, 255)</td></tr><tr><td><font color="LightSlateGray">LightSlateGray</font></td><td><font color="#778899">#778899</font></td><td bgcolor="#778899">rgb(119, 136, 153)</td></tr><tr><td><font color="LightSteelBlue">LightSteelBlue</font></td><td><font color="#B0C4DE">#B0C4DE</font></td><td bgcolor="#B0C4DE">rgb(176, 196, 222)</td></tr><tr><td><font color="LightYellow">LightYellow</font></td><td><font color="#FFFFE0">#FFFFE0</font></td><td bgcolor="#FFFFE0">rgb(255, 255, 224)</td></tr><tr><td><font color="Lime">Lime</font></td><td><font color="#00FF00">#00FF00</font></td><td bgcolor="#00FF00">rgb(0, 255, 0)</td></tr><tr><td><font color="LimeGreen">LimeGreen</font></td><td><font color="#32CD32">#32CD32</font></td><td bgcolor="#32CD32">rgb(50, 205, 50)</td></tr><tr><td><font color="Linen">Linen</font></td><td><font color="#FAF0E6">#FAF0E6</font></td><td bgcolor="#FAF0E6">rgb(250, 240, 230)</td></tr><tr><td><font color="Magenta">Magenta</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr><tr><td><font color="Maroon">Maroon</font></td><td><font color="#800000">#800000</font></td><td bgcolor="#800000">rgb(128, 0, 0)</td></tr><tr><td><font color="MediumAquaMarine">MediumAquaMarine</font></td><td><font color="#66CDAA">#66CDAA</font></td><td bgcolor="#66CDAA">rgb(102, 205, 170)</td></tr><tr><td><font color="MediumBlue">MediumBlue</font></td><td><font color="#0000CD">#0000CD</font></td><td bgcolor="#0000CD">rgb(0, 0, 205)</td></tr><tr><td><font color="MediumOrchid">MediumOrchid</font></td><td><font color="#BA55D3">#BA55D3</font></td><td bgcolor="#BA55D3">rgb(186, 85, 211)</td></tr><tr><td><font color="MediumPurple">MediumPurple</font></td><td><font color="#9370D8">#9370D8</font></td><td bgcolor="#9370D8">rgb(147, 112, 216)</td></tr><tr><td><font color="MediumSeaGreen">MediumSeaGreen</font></td><td><font color="#3CB371">#3CB371</font></td><td bgcolor="#3CB371">rgb(60, 179, 113)</td></tr><tr><td><font color="MediumSlateBlue">MediumSlateBlue</font></td><td><font color="#7B68EE">#7B68EE</font></td><td bgcolor="#7B68EE">rgb(123, 104, 238)</td></tr><tr><td><font color="MediumSpringGreen">MediumSpringGreen</font></td><td><font color="#00FA9A">#00FA9A</font></td><td bgcolor="#00FA9A">rgb(0, 250, 154)</td></tr><tr><td><font color="MediumTurquoise">MediumTurquoise</font></td><td><font color="#48D1CC">#48D1CC</font></td><td bgcolor="#48D1CC">rgb(72, 209, 204)</td></tr><tr><td><font color="MediumVioletRed">MediumVioletRed</font></td><td><font color="#C71585">#C71585</font></td><td bgcolor="#C71585">rgb(199, 21, 133)</td></tr><tr><td><font color="MidnightBlue">MidnightBlue</font></td><td><font color="#191970">#191970</font></td><td bgcolor="#191970">rgb(25, 25, 112)</td></tr><tr><td><font color="MintCream">MintCream</font></td><td><font color="#F5FFFA">#F5FFFA</font></td><td bgcolor="#F5FFFA">rgb(245, 255, 250)</td></tr><tr><td><font color="MistyRose">MistyRose</font></td><td><font color="#FFE4E1">#FFE4E1</font></td><td bgcolor="#FFE4E1">rgb(255, 228, 225)</td></tr><tr><td><font color="Moccasin">Moccasin</font></td><td><font color="#FFE4B5">#FFE4B5</font></td><td bgcolor="#FFE4B5">rgb(255, 228, 181)</td></tr><tr><td><font color="NavajoWhite">NavajoWhite</font></td><td><font color="#FFDEAD">#FFDEAD</font></td><td bgcolor="#FFDEAD">rgb(255, 222, 173)</td></tr><tr><td><font color="Navy">Navy</font></td><td><font color="#000080">#000080</font></td><td bgcolor="#000080">rgb(0, 0, 128)</td></tr><tr><td><font color="OldLace">OldLace</font></td><td><font color="#FDF5E6">#FDF5E6</font></td><td bgcolor="#FDF5E6">rgb(253, 245, 230)</td></tr><tr><td><font color="Olive">Olive</font></td><td><font color="#808000">#808000</font></td><td bgcolor="#808000">rgb(128, 128, 0)</td></tr><tr><td><font color="OliveDrab">OliveDrab</font></td><td><font color="#6B8E23">#6B8E23</font></td><td bgcolor="#6B8E23">rgb(107, 142, 35)</td></tr><tr><td><font color="Orange">Orange</font></td><td><font color="#FFA500">#FFA500</font></td><td bgcolor="#FFA500">rgb(255, 165, 0)</td></tr><tr><td><font color="OrangeRed">OrangeRed</font></td><td><font color="#FF4500">#FF4500</font></td><td bgcolor="#FF4500">rgb(255, 69, 0)</td></tr><tr><td><font color="Orchid">Orchid</font></td><td><font color="#DA70D6">#DA70D6</font></td><td bgcolor="#DA70D6">rgb(218, 112, 214)</td></tr><tr><td><font color="PaleGoldenRod">PaleGoldenRod</font></td><td><font color="#EEE8AA">#EEE8AA</font></td><td bgcolor="#EEE8AA">rgb(238, 232, 170)</td></tr><tr><td><font color="PaleGreen">PaleGreen</font></td><td><font color="#98FB98">#98FB98</font></td><td bgcolor="#98FB98">rgb(152, 251, 152)</td></tr><tr><td><font color="PaleTurquoise">PaleTurquoise</font></td><td><font color="#AFEEEE">#AFEEEE</font></td><td bgcolor="#AFEEEE">rgb(175, 238, 238)</td></tr><tr><td><font color="PaleVioletRed">PaleVioletRed</font></td><td><font color="#D87093">#D87093</font></td><td bgcolor="#D87093">rgb(216, 112, 147)</td></tr><tr><td><font color="PapayaWhip">PapayaWhip</font></td><td><font color="#FFEFD5">#FFEFD5</font></td><td bgcolor="#FFEFD5">rgb(255, 239, 213)</td></tr><tr><td><font color="PeachPuff">PeachPuff</font></td><td><font color="#FFDAB9">#FFDAB9</font></td><td bgcolor="#FFDAB9">rgb(255, 218, 185)</td></tr><tr><td><font color="Peru">Peru</font></td><td><font color="#CD853F">#CD853F</font></td><td bgcolor="#CD853F">rgb(205, 133, 63)</td></tr><tr><td><font color="Pink">Pink</font></td><td><font color="#FFC0CB">#FFC0CB</font></td><td bgcolor="#FFC0CB">rgb(255, 192, 203)</td></tr><tr><td><font color="Plum">Plum</font></td><td><font color="#DDA0DD">#DDA0DD</font></td><td bgcolor="#DDA0DD">rgb(221, 160, 221)</td></tr><tr><td><font color="PowderBlue">PowderBlue</font></td><td><font color="#B0E0E6">#B0E0E6</font></td><td bgcolor="#B0E0E6">rgb(176, 224, 230)</td></tr><tr><td><font color="Purple">Purple</font></td><td><font color="#800080">#800080</font></td><td bgcolor="#800080">rgb(128, 0, 128)</td></tr><tr><td><font color="Red">Red</font></td><td><font color="#FF0000">#FF0000</font></td><td bgcolor="#FF0000">rgb(255, 0, 0)</td></tr><tr><td><font color="RosyBrown">RosyBrown</font></td><td><font color="#BC8F8F">#BC8F8F</font></td><td bgcolor="#BC8F8F">rgb(188, 143, 143)</td></tr><tr><td><font color="RoyalBlue">RoyalBlue</font></td><td><font color="#4169E1">#4169E1</font></td><td bgcolor="#4169E1">rgb(65, 105, 225)</td></tr><tr><td><font color="SaddleBrown">SaddleBrown</font></td><td><font color="#8B4513">#8B4513</font></td><td bgcolor="#8B4513">rgb(139, 69, 19)</td></tr><tr><td><font color="Salmon">Salmon</font></td><td><font color="#FA8072">#FA8072</font></td><td bgcolor="#FA8072">rgb(250, 128, 114)</td></tr><tr><td><font color="SandyBrown">SandyBrown</font></td><td><font color="#F4A460">#F4A460</font></td><td bgcolor="#F4A460">rgb(244, 164, 96)</td></tr><tr><td><font color="SeaGreen">SeaGreen</font></td><td><font color="#2E8B57">#2E8B57</font></td><td bgcolor="#2E8B57">rgb(46, 139, 87)</td></tr><tr><td><font color="SeaShell">SeaShell</font></td><td><font color="#FFF5EE">#FFF5EE</font></td><td bgcolor="#FFF5EE">rgb(255, 245, 238)</td></tr><tr><td><font color="Sienna">Sienna</font></td><td><font color="#A0522D">#A0522D</font></td><td bgcolor="#A0522D">rgb(160, 82, 45)</td></tr><tr><td><font color="Silver">Silver</font></td><td><font color="#C0C0C0">#C0C0C0</font></td><td bgcolor="#C0C0C0">rgb(192, 192, 192)</td></tr><tr><td><font color="SkyBlue">SkyBlue</font></td><td><font color="#87CEEB">#87CEEB</font></td><td bgcolor="#87CEEB">rgb(135, 206, 235)</td></tr><tr><td><font color="SlateBlue">SlateBlue</font></td><td><font color="#6A5ACD">#6A5ACD</font></td><td bgcolor="#6A5ACD">rgb(106, 90, 205)</td></tr><tr><td><font color="SlateGray">SlateGray</font></td><td><font color="#708090">#708090</font></td><td bgcolor="#708090">rgb(112, 128, 144)</td></tr><tr><td><font color="Snow">Snow</font></td><td><font color="#FFFAFA">#FFFAFA</font></td><td bgcolor="#FFFAFA">rgb(255, 250, 250)</td></tr><tr><td><font color="SpringGreen">SpringGreen</font></td><td><font color="#00FF7F">#00FF7F</font></td><td bgcolor="#00FF7F">rgb(0, 255, 127)</td></tr><tr><td><font color="SteelBlue">SteelBlue</font></td><td><font color="#4682B4">#4682B4</font></td><td bgcolor="#4682B4">rgb(70, 130, 180)</td></tr><tr><td><font color="Tan">Tan</font></td><td><font color="#D2B48C">#D2B48C</font></td><td bgcolor="#D2B48C">rgb(210, 180, 140)</td></tr><tr><td><font color="Teal">Teal</font></td><td><font color="#008080">#008080</font></td><td bgcolor="#008080">rgb(0, 128, 128)</td></tr><tr><td><font color="Thistle">Thistle</font></td><td><font color="#D8BFD8">#D8BFD8</font></td><td bgcolor="#D8BFD8">rgb(216, 191, 216)</td></tr><tr><td><font color="Tomato">Tomato</font></td><td><font color="#FF6347">#FF6347</font></td><td bgcolor="#FF6347">rgb(255, 99, 71)</td></tr><tr><td><font color="Turquoise">Turquoise</font></td><td><font color="#40E0D0">#40E0D0</font></td><td bgcolor="#40E0D0">rgb(64, 224, 208)</td></tr><tr><td><font color="Violet">Violet</font></td><td><font color="#EE82EE">#EE82EE</font></td><td bgcolor="#EE82EE">rgb(238, 130, 238)</td></tr><tr><td><font color="VioletRed">VioletRed</font></td><td><font color="#D02090">#D02090</font></td><td bgcolor="#D02090">rgb(208, 32, 144)</td></tr><tr><td><font color="Wheat">Wheat</font></td><td><font color="#F5DEB3">#F5DEB3</font></td><td bgcolor="#F5DEB3">rgb(245, 222, 179)</td></tr><tr><td><font color="White">White</font></td><td><font color="#FFFFFF">#FFFFFF</font></td><td bgcolor="#FFFFFF">rgb(255, 255, 255)</td></tr><tr><td><font color="WhiteSmoke">WhiteSmoke</font></td><td><font color="#F5F5F5">#F5F5F5</font></td><td bgcolor="#F5F5F5">rgb(245, 245, 245)</td></tr><tr><td><font color="Yellow">Yellow</font></td><td><font color="#FFFF00">#FFFF00</font></td><td bgcolor="#FFFF00">rgb(255, 255, 0)</td></tr><tr><td><font color="YellowGreen">YellowGreen</font></td><td><font color="#9ACD32">#9ACD32</font></td><td bgcolor="#9ACD32">rgb(154, 205, 50)</td></tr></tbody></table></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csdn markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于FOLPD模型的PID控制器参数的整定</title>
      <link href="/posts/e76e.html"/>
      <url>/posts/e76e.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><blockquote><p>在PID控制器的诸多经典参数整算法中，绝大多数的算法都是在带有时间延迟的一阶模型（FOPDT）的基础上提出的，模型的一般形式为：<img src="https://img-blog.csdnimg.cn/20200311140213707.png#pic_center" alt="  "><br>主要是因为大部分过程控制的受控对象模型的响应曲线和一阶模型的响应较为类似，可以直接进行拟合。<br>一般的过程控制对象的阶跃响应曲线形状如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200311142355557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt=""></p></blockquote><p><strong>可根据读图、最优降阶方法0/1，最小二乘参数识别的方法求出k,L,T<br>下面给出一个编写的matlab函数用来求k，L，T</strong></p><pre class=" language-c"><code class="language-c">function <span class="token punctuation">[</span>K<span class="token punctuation">,</span>L<span class="token punctuation">,</span>T<span class="token punctuation">,</span>G1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getfopdt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>G<span class="token punctuation">)</span><span class="token keyword">switch</span> key<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">step</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>   fun<span class="token operator">=</span>@<span class="token punctuation">(</span>x<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">></span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   x<span class="token operator">=</span><span class="token function">lsqcurvefit</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> K<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> L<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> T<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Kc<span class="token punctuation">,</span>Pm<span class="token punctuation">,</span>wc<span class="token punctuation">,</span>wcp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">margin</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>   ikey<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> L<span class="token operator">=</span><span class="token number">1.6</span><span class="token operator">*</span>pi<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>wc<span class="token punctuation">)</span><span class="token punctuation">;</span> K<span class="token operator">=</span><span class="token function">dcgain</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span> T<span class="token operator">=</span><span class="token number">0.5</span><span class="token operator">*</span>Kc<span class="token operator">*</span>K<span class="token operator">*</span>L<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token function">isfinite</span><span class="token punctuation">(</span>Kc<span class="token punctuation">)</span><span class="token punctuation">,</span> x0<span class="token operator">=</span><span class="token punctuation">[</span>L<span class="token punctuation">;</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> ikey<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token operator">=</span>wc<span class="token operator">*</span><span class="token function">x0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token operator">=</span>wc<span class="token operator">*</span><span class="token function">x0</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         FF<span class="token operator">=</span><span class="token punctuation">[</span>K<span class="token operator">*</span>Kc<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">-</span>v<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>v<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">sin</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+</span>v<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   J<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span>K<span class="token operator">*</span>Kc<span class="token operator">*</span>wc<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">-</span>K<span class="token operator">*</span>Kc<span class="token operator">*</span>wc<span class="token operator">*</span>v<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>K<span class="token operator">*</span>Kc<span class="token operator">*</span>wc<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>wc<span class="token operator">*</span>v<span class="token punctuation">;</span>      wc<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">-</span>wc<span class="token operator">*</span>v<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> wc<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x1<span class="token operator">=</span>x0<span class="token operator">-</span><span class="token function">inv</span><span class="token punctuation">(</span>J<span class="token punctuation">)</span><span class="token operator">*</span>FF<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token function">norm</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x0<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1e-8</span><span class="token punctuation">,</span> ikey<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token punctuation">,</span> x0<span class="token operator">=</span>x1<span class="token punctuation">;</span> end<span class="token punctuation">,</span> end      L<span class="token operator">=</span><span class="token function">x0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> T<span class="token operator">=</span><span class="token function">x0</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   end<span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span>d1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">tfderv</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>num<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>den<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">[</span>n2<span class="token punctuation">,</span>d2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">tfderv</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> K1<span class="token operator">=</span><span class="token function">dcgain</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>   K2<span class="token operator">=</span><span class="token function">dcgain</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span> K<span class="token operator">=</span><span class="token function">dcgain</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span> Tar<span class="token operator">=</span><span class="token operator">-</span>K1<span class="token operator">/</span>K<span class="token punctuation">;</span>   T<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>K2<span class="token operator">/</span>K<span class="token operator">-</span>Tar<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> L<span class="token operator">=</span>Tar<span class="token operator">-</span>T<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span>   Gr<span class="token operator">=</span><span class="token function">opt_app</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   L<span class="token operator">=</span>Gr<span class="token punctuation">.</span>ioDelay<span class="token punctuation">;</span>   T<span class="token operator">=</span>Gr<span class="token punctuation">.</span>den<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>Gr<span class="token punctuation">.</span>den<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> K<span class="token operator">=</span>Gr<span class="token punctuation">.</span>num<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token operator">/</span>Gr<span class="token punctuation">.</span>den<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endG1<span class="token operator">=</span><span class="token function">tf</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span><span class="token punctuation">[</span>T <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'iodelay'</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>function <span class="token punctuation">[</span>e<span class="token punctuation">,</span>f<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">tfderv</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token function">conv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> na<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> nb<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token operator">=</span><span class="token function">conv</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nb<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span>end<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>e2<span class="token operator">=</span><span class="token function">conv</span><span class="token punctuation">(</span><span class="token punctuation">(</span>na<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">:</span>end<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> maxL<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>maxL<span class="token operator">-</span><span class="token function">length</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">)</span> e1<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>maxL<span class="token operator">-</span><span class="token function">length</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span> e2<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>其中输入参数的key变量表示采用的各种方法，可以取值为1,2,3,4.对于已知的阶跃响应数据，通过响应曲线识别一阶模型，key=1，G为受控对象模型。函数返回值为一阶近似模型参数k，L，T和近似的传递函数模型G1.<br>输入变量key=2时表示采用的是基于频率响应的近似方法，<br>输入变量key=3时表示采用的是基于传递函数的辨识方法，<br>输入变量key=4时表示采用的是最优降阶方法。</p><h3 id="Ziegler-Nichols经验公式"><a href="#Ziegler-Nichols经验公式" class="headerlink" title="Ziegler-Nichols经验公式"></a>Ziegler-Nichols经验公式</h3><p>有了这些参数，如何来设计PID控制器呢，我们可以采用经验公式来设计PID控制器。由k，L，T可以计算出一个中间变量a，a=KL/T<br><img src="https://img-blog.csdnimg.cn/20200311145317620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>这样就可以根据上表设计出P、PI、PID控制器。设计方法非常简单直观，根据此算法编写一个matlab函数帮助计算</p><pre class=" language-c"><code class="language-c">function <span class="token punctuation">[</span>Gc<span class="token punctuation">,</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ziegler</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>vars<span class="token punctuation">)</span><span class="token keyword">switch</span> <span class="token function">length</span><span class="token punctuation">(</span>vars<span class="token punctuation">)</span>   <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">,</span>      K<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Tc<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> N<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token number">0.5</span><span class="token operator">*</span>K<span class="token punctuation">;</span> Ti<span class="token operator">=</span>inf<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      elseif key<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token number">0.4</span><span class="token operator">*</span>K<span class="token punctuation">;</span> Ti<span class="token operator">=</span><span class="token number">0.8</span><span class="token operator">*</span>Tc<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      elseif key<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token number">0.6</span><span class="token operator">*</span>K<span class="token punctuation">;</span> Ti<span class="token operator">=</span><span class="token number">0.5</span><span class="token operator">*</span>Tc<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0.12</span><span class="token operator">*</span>Tc<span class="token punctuation">;</span> end   <span class="token keyword">case</span> <span class="token number">4</span>      K<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> L<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> T<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> N<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token operator">=</span>K<span class="token operator">*</span>L<span class="token operator">/</span>T<span class="token punctuation">;</span>      <span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>a<span class="token punctuation">;</span> Ti<span class="token operator">=</span>inf<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      elseif key<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token number">0.9</span><span class="token operator">/</span>a<span class="token punctuation">;</span> Ti<span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span>L<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      elseif key<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token number">1.2</span><span class="token operator">/</span>a<span class="token punctuation">;</span> Ti<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>L<span class="token punctuation">;</span> Td<span class="token operator">=</span>L<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> end   <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">,</span>      K<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Tc<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rb<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> N<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pb<span class="token operator">=</span>pi<span class="token operator">*</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">;</span> Kp<span class="token operator">=</span>K<span class="token operator">*</span>rb<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">,</span> Ti<span class="token operator">=</span><span class="token operator">-</span>Tc<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>pi<span class="token operator">*</span><span class="token function">tan</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      elseif key<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">,</span> Ti<span class="token operator">=</span>Tc<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">sin</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>pi<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Td<span class="token operator">=</span>Ti<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>end<span class="token punctuation">,</span> endGc<span class="token operator">=</span><span class="token function">pidstd</span><span class="token punctuation">(</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的key=1,2,3分别对应于P、PI、PID控制器，用户可以选择控制器类型。vars=[K,L,T,N]。</p><h3 id="Chien-Hrones-Reswick参数整定算法"><a href="#Chien-Hrones-Reswick参数整定算法" class="headerlink" title="Chien-Hrones-Reswick参数整定算法"></a>Chien-Hrones-Reswick参数整定算法</h3><p>在实际应用中，传统的Ziegler-Nichols算法有各种各样的变形，其中的Chien-Hrones-Reswick（CHR）就是其中的一种改进。其允许带有较大的阻尼，以确保没有超调量的快速响应。分为有0%超调量和20%超调量。在CHR算法中直接使用了时间常数。<br><img src="https://img-blog.csdnimg.cn/20200311151653145.png" alt="  "><br>按此算法编写的matlab函数：</p><pre class=" language-c"><code class="language-c"> function <span class="token punctuation">[</span>Gc<span class="token punctuation">,</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">chrpid</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>vars<span class="token punctuation">)</span>K<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> L<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> T<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> N<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ov<span class="token operator">=</span><span class="token function">vars</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">=</span>K<span class="token operator">*</span>L<span class="token operator">/</span>T<span class="token punctuation">;</span> KK<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.35</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token number">1.4</span><span class="token punctuation">,</span><span class="token number">0.47</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token function">KK</span><span class="token punctuation">(</span>ov<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>a<span class="token punctuation">;</span> Ti<span class="token operator">=</span>inf<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>elseif key<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token function">KK</span><span class="token punctuation">(</span>ov<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>a<span class="token punctuation">;</span> Ti<span class="token operator">=</span><span class="token function">KK</span><span class="token punctuation">(</span>ov<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span>T<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">,</span> Kp<span class="token operator">=</span><span class="token function">KK</span><span class="token punctuation">(</span>ov<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">/</span>a<span class="token punctuation">;</span> Ti<span class="token operator">=</span><span class="token function">KK</span><span class="token punctuation">(</span>ov<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span>T<span class="token punctuation">;</span> Td<span class="token operator">=</span><span class="token function">KK</span><span class="token punctuation">(</span>ov<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">*</span>L<span class="token punctuation">;</span> endGc<span class="token operator">=</span><span class="token function">pidstd</span><span class="token punctuation">(</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数的调用格式为 [Gc,Kp,Ti,Td]=chrpid(key,vars)，其返回的变量和函数ziegler（）是完全一致的。key=1,2,3分别对应于P、PI、PID控制器，变量vars可以表示为vars=[k,L,T,N,Os]，Os=0对应于没有超调量的控制，Os=1对应于有20%超调量的控制。<br>假设对象模型为一个六阶的传递函数G（s）=1/(s+1)^6<br>可以用下门面的matlab语句设计出Ziegler-Nichols PID控制器与两种准则下的CHR控制器。</p><pre class=" language-c"><code class="language-c">s<span class="token operator">=</span><span class="token function">tf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>G<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>L<span class="token punctuation">,</span>T<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getfopdt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span> N<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">[</span>Gc1<span class="token punctuation">,</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ziegler</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>L<span class="token punctuation">,</span>T<span class="token punctuation">,</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>Gc2<span class="token punctuation">,</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">chrpid</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>L<span class="token punctuation">,</span>T<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>Gc3<span class="token punctuation">,</span>Kp<span class="token punctuation">,</span>Ti<span class="token punctuation">,</span>Td<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">chrpid</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>L<span class="token punctuation">,</span>T<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>绘制出不同控制器下的闭环系统的阶跃响应曲线：</p><pre class=" language-c"><code class="language-c"><span class="token function">step</span><span class="token punctuation">(</span><span class="token function">feedback</span><span class="token punctuation">(</span>G<span class="token operator">*</span>Gc1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token function">feedback</span><span class="token punctuation">(</span>G<span class="token operator">*</span>Gc2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'--'</span><span class="token punctuation">,</span><span class="token function">feedback</span><span class="token punctuation">(</span>G<span class="token operator">*</span>Gc3<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200311155153501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>从曲线的结果可以看出，虽然没有超调量的设定点控制器响应速度较慢，但控制的效果还比较理想，优于经典的 Ziegler-Nichols算法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 控制 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PID控制的理解与参数整定</title>
      <link href="/posts/20ab.html"/>
      <url>/posts/20ab.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="PID控制器的一般结构"><a href="#PID控制器的一般结构" class="headerlink" title="PID控制器的一般结构"></a>PID控制器的一般结构</h3><blockquote><p>当控制器为比例控制器（P）时，可以减少因扰动而引起的稳态误差，但不能将稳态误差减少到0，增加一项正比于误差的积分项（I）时，可以消除系统的稳态误差，但会影响系统的动态性能，可再加入一个微分项（D）来提高系统的动态性能。由比例，积分，微分三项构成的控制器就是经典的PID控制器。<br><img src="https://img-blog.csdnimg.cn/20200311112849195.png" alt="  "><br>由于理论上的控制器有的时候产生的信号过大，可能破坏硬件系统，所以在控制器的输出端通常要加一个驱动饱和来保护这样一个信号，使得它不至于过大。<br>PID控制器的一般形式<br><img src="https://img-blog.csdnimg.cn/20200311113052968.png" alt="  "><br>PID控制器是由e信号驱动的，而e信号是跟踪误差，由e信号的当前时刻的值，e信号的积分以及e信号的导数，由这样三个信号的加权和共同构造出来一个控制信号u(t)。<br>e信号的积分的物理含义：表示e信号以往值的和，利用这一项可以表示e信号过去的信息。e信号的导数可以认为其预测着e信号的将来信息。<br><img src="https://img-blog.csdnimg.cn/2020031111524454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p></blockquote><hr><p><img src="https://img-blog.csdnimg.cn/20200311115800499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p><hr><p>==PID控制的原理可以用人对炉温的手动控制来理解==</p><h3 id="1．比例控制"><a href="#1．比例控制" class="headerlink" title="1．比例控制"></a>1．比例控制</h3><p>   有经验的操作人员手动控制电加热炉的炉温，可以获得非常好的控制品质，PID控制与人工控制的控制策略有很多相似的地方。<br>   下面介绍操作人员怎样用比例控制的思想来手动控制电加热炉的炉温。假设用热电偶检测炉温，用数字仪表显示温度值。在控制过程中，操作人员用眼睛读取炉温，并与炉温给定值比较，得到温度的误差值。然后用手操作电位器，调节加热的电流，使炉温保持在给定值附近。<br>   操作人员知道炉温稳定在给定值时电位器的大致位置（我们将它称为位置L），并根据当时的温度误差值调整控制加热电流的电位器的转角。炉温小于给定值时，误差为正，在位置L的基础上顺时针增大电位器的转角，以增大加热的电流。炉温大于给定值时，误差为负，在位置L的基础上反时针减小电位器的转角，并令转角与位置L的差值与误差成正比。上述控制策略就是比例控制，即PID控制器输出中的比例部分与误差成正比。<br>   闭环中存在着各种各样的延迟作用。例如调节电位器转角后，到温度上升到新的转角对应的稳态值时有较大的时间延迟。由于延迟因素的存在，调节电位器转角后不能马上看到调节的效果，因此闭环控制系统调节困难的主要原因是系统中的延迟作用。<br>   比例控制的比例系数如果太小，即调节后的电位器转角与位置L的差值太小，调节的力度不够，使系统输出量变化缓慢，调节所需的总时间过长。比例系数如果过大，即调节后电位器转角与位置L的差值过大，调节力度太强，将造成调节过头，甚至使温度忽高忽低，来回震荡。<br>   增大比例系数使系统反应灵敏，调节速度加快，并且可以减小稳态误差。但是比例系数过大会使超调量增大，振荡次数增加，调节时间加长，动态性能变坏，比例系数太大甚至会使闭环系统不稳定。<br>   单纯的比例控制很难保证调节得恰到好处，完全消除误差。</p><h3 id="2．积分控制"><a href="#2．积分控制" class="headerlink" title="2．积分控制"></a>2．积分控制</h3><p>   PID控制器中的积分对应于图1中误差曲线 与坐标轴包围的面积（图中的灰色部分）。PID控制程序是周期性执行的，执行的周期称为采样周期。计算机的程序用图1中各矩形面积之和来近似精确的积分，图中的TS就是采样周期。<br><img src="https://img-blog.csdnimg.cn/20200311115641859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br> 　　　　　图1  积分运算示意图<br>　　每次PID运算时，在原来的积分值的基础上，增加一个与当前的误差值ev（n）成正比的微小部分。误差为负值时，积分的增量为负。<br>   　　手动调节温度时，积分控制相当于根据当时的误差值，周期性地微调电位器的角度，每次调节的角度增量值与当时的误差值成正比。温度低于设定值时误差为正，积分项增大，使加热电流逐渐增大，反之积分项减小。因此只要误差不为零，控制器的输出就会因为积分作用而不断变化。积分调节的“大方向”是正确的，积分项有减小误差的作用。一直要到系统处于稳定状态，这时误差恒为零，比例部分和微分部分均为零，积分部分才不再变化，并且刚好等于稳态时需要的控制器的输出值，对应于上述温度控制系统中电位器转角的位置L。因此积分部分的作用是消除稳态误差，提高控制精度，积分作用一般是必须的。<br> 　　PID控制器输出中的积分部分与误差的积分成正比。因为积分时间TI在积分项的分母中，TI越小，积分项变化的速度越快，积分作用越强。</p><h3 id="3．PI控制"><a href="#3．PI控制" class="headerlink" title="3．PI控制"></a>3．PI控制</h3><p>   控制器输出中的积分项与当前的误差值和过去历次误差值的累加值成正比，因此积分作用本身具有严重的滞后特性，对系统的稳定性不利。如果积分项的系数设置得不好，其负面作用很难通过积分作用本身迅速地修正。而比例项没有延迟，只要误差一出现，比例部分就会立即起作用。因此积分作用很少单独使用，它一般与比例和微分联合使用，组成PI或PID控制器。<br>   PI和PID控制器既克服了单纯的比例调节有稳态误差的缺点，又避免了单纯的积分调节响应慢、动态性能不好的缺点，因此被广泛使用。<br>   如果控制器有积分作用（例如采用PI或PID控制），积分能消除阶跃输入的稳态误差，这时可以将比例系数调得小一些。<br>   如果积分作用太强（即积分时间太小），相当于每次微调电位器的角度值过大，其累积的作用会使系统输出的动态性能变差，超调量增大，甚至使系统不稳定。积分作用太弱（即积分时间太大），则消除稳态误差的速度太慢，积分时间的值应取得适中。</p><h3 id="4．微分作用"><a href="#4．微分作用" class="headerlink" title="4．微分作用"></a>4．微分作用</h3><p>   误差的微分就是误差的变化速率，误差变化越快，其微分绝对值越大。误差增大时，其微分为正；误差减小时，其微分为负。控制器输出量的微分部分与误差的微分成正比，反映了被控量变化的趋势。<br>   有经验的操作人员在温度上升过快，但是尚未达到设定值时，根据温度变化的趋势，预感到温度将会超过设定值，出现超调。于是调节电位器的转角，提前减小加热的电流。这相当于士兵射击远方的移动目标时，考虑到子弹运动的时间，需要一定的提前量一样。</p><p>图2   阶跃响应曲线</p><p>   图2中的c (∞)为被控量c (t)的稳态值或被控量的期望值，误差e(t) = c (∞) - c (t)。在图2中启动过程的上升阶段，当 时，被控量尚未超过其稳态值。但是因为误差e(t)不断减小，误差的微分和控制器输出的微分部分为负值，减小了控制器的输出量，相当于提前给出了制动作用，以阻碍被控量的上升，所以可以减少超调量。因此微分控制具有超前和预测的特性，在超调尚未出现之前，就能提前给出控制作用。<br>   闭环控制系统的振荡甚至不稳定的根本原因在于有较大的滞后因素。因为微分项能预测误差变化的趋势，这种“超前”的作用可以抵消滞后因素的影响。适当的微分控制作用可以使超调量减小，增加系统的稳定性。<br>   对于有较大的滞后特性的被控对象，如果PI控制的效果不理想，可以考虑增加微分控制，以改善系统在调节过程中的动态特性。如果将微分时间设置为0，微分部分将不起作用。<br>   微分时间与微分作用的强弱成正比，微分时间越大，微分作用越强。如果微分时间太大，在误差快速变化时，响应曲线上可能会出现“毛刺”。<br>   微分控制的缺点是对干扰噪声敏感，使系统抑制干扰的能力降低。为此可在微分部分增加惯性滤波环节。</p><h3 id="5．采样周期"><a href="#5．采样周期" class="headerlink" title="5．采样周期"></a>5．采样周期</h3><p>   PID控制程序是周期性执行的，执行的周期称为采样周期。采样周期越小，采样值越能反映模拟量的变化情况。但是太小会增加CPU的运算工作量，相邻两次采样的差值几乎没有什么变化，将使PID控制器输出的微分部分接近为零，所以也不宜将采样周期取得过小。<br>   应保证在被控量迅速变化时（例如启动过程中的上升阶段），能有足够多的采样点数，不致因为采样点数过少而丢失被采集的模拟量中的重要信息。</p><h3 id="6．PID参数的调整方法"><a href="#6．PID参数的调整方法" class="headerlink" title="6．PID参数的调整方法"></a>6．PID参数的调整方法</h3><p>   在整定PID控制器参数时，可以根据控制器的参数与系统动态性能和稳态性能之间的定性关系，用实验的方法来调节控制器的参数。有经验的调试人员一般可以较快地得到较为满意的调试结果。在调试中最重要的问题是在系统性能不能令人满意时，知道应该调节哪一个参数，该参数应该增大还是减小。<br>   为了减少需要整定的参数，首先可以采用PI控制器。为了保证系统的安全，在调试开始时应设置比较保守的参数，例如比例系数不要太大，积分时间不要太小，以避免出现系统不稳定或超调量过大的异常情况。给出一个阶跃给定信号，根据被控量的输出波形可以获得系统性能的信息，例如超调量和调节时间。应根据PID参数与系统性能的关系，反复调节PID的参数。<br>   如果阶跃响应的超调量太大，经过多次振荡才能稳定或者根本不稳定，应减小比例系数、增大积分时间。如果阶跃响应没有超调量，但是被控量上升过于缓慢，过渡过程时间太长，应按相反的方向调整参数。<br>   如果消除误差的速度较慢，可以适当减小积分时间，增强积分作用。<br>   反复调节比例系数和积分时间，如果超调量仍然较大，可以加入微分控制，微分时间从0逐渐增大，反复调节控制器的比例、积分和微分部分的参数。<br>   总之，PID参数的调试是一个综合的、各参数互相影响的过程，实际调试过程中的多次尝试是非常重要的，也是必须的。</p><hr><h2 id="一种通俗易懂的讲解"><a href="#一种通俗易懂的讲解" class="headerlink" title="一种通俗易懂的讲解"></a>一种通俗易懂的讲解</h2><p>控制模型：你控制一个人让他以PID控制的方式走110步后停下。<br>（1）P比例控制，就是让他走110步，他按照一定的步伐走到一百零几步（如108步）或100多步（如112步）就停了。<br>说明：<br>P比例控制是一种最简单的控制方式。其控制器的输出与输入误差信号成比例关系。当仅有比例控制时系统输出存在稳态误差（Steady-state error）。<br>（2）PI积分控制，就是他按照一定的步伐走到112步然后回头接着走，走到108步位置时，然后又回头向110步位置走。在110步位置处来回晃几次，最后停在110步的位置。<br>说明：<br>在积分I控制中，控制器的输出与输入误差信号的积分成正比关系。对一个自动控制系统，如果在进入稳态后存在稳态误差，则称这个控制系统是有稳态误差的或简称有差系统（System with Steady-state Error）。为了消除稳态误差，在控制器中必须引入“积分项”。积分项对误差取决于时间的积分，随着时间的增加，积分项会增大。这样，即便误差很小，积分项也会随着时间的增加而加大，它推动控制器的输出增大使稳态误差进一步减小，直到等于零。因此，比例+积分（PI）控制器，可以使系统在进入稳态后无稳态误差。<br>（3）PD微分控制，就是他按照一定的步伐走到一百零几步后，再慢慢地向110步的位置靠近，如果最后能精确停在110步的位置，就是无静差控制；如果停在110步附近（如109步或111步位置），就是有静差控制。<br>说明：<br>在微分控制D中，控制器的输出与输入误差信号的微分（即误差的变化率）成正比关系。<br>自动控制系统在克服误差的调节过程中可能会出现振荡甚至失稳，其原因是由于存在有较大惯性组件（环节）或有滞后（delay）组件，具有抑制误差的作用，其变化总是落后于误差的变化。解决的办法是使抑制误差作用的变化“超前”，即在误差接近零时，抑制误差的作用就应该是零。这就是说，在控制器中仅引入“比例P”项往往是不够的，比例项的作用仅是放大误差的幅值，而目前需要增加的是“微分项”，它能预测误差变化的趋势。这样，具有比例+微分的控制器，就能够提前使抑制误差的控制作用等于零，甚至为负值，从而避免了被控量的严重超调。所以对有较大惯性或滞后的被控对象，比例P+微分D（PD）控制器能改善系统在调节过程中的动态特性。</p><p>PID常用口诀:<br>参数整定找最佳，从小到大顺序查，<br>先是比例后积分，最后再把微分加，<br>曲线振荡很频繁，比例度盘要放大，<br>曲线漂浮绕大湾，比例度盘往小扳，<br>曲线偏离回复慢，积分时间往下降，<br>曲线波动周期长，积分时间再加长，<br>曲线振荡频率快，先把微分降下来，<br>动差大来波动慢，微分时间应加长，<br>理想曲线两个波，前高后低四比一，<br>一看二调多分析，调节质量不会低</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 控制 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux中chmod与chown两个命令详解</title>
      <link href="/posts/e464.html"/>
      <url>/posts/e464.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>如果创建了一个目录或文件，需要改变它的安全性设置，在linux系统中有chmod和chown命令来完成这项任务。但两个命令的用途是不同的，chmod命令用来改变文件和目录的权限，而chown命令用来改变文件的属主和属组。</p><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>命令格式：chmod options mode file<br>options：<br>-v：显示权限变更的详细资料<br>-R：将权限的改变递归作用到文件和子目录。</p><p>文件和目录的权限分为3组，文件属主的权限，属组成员的权限，其他用户的权限。</p><p>[ ugoa …]  [[+ - =]   [rwxXstugo]…]<br>第一组字符定义了权限作用的对象：</p><ul><li>u代表用户</li><li>g代表组</li><li>o代表其他</li><li>a代表以上所有</li></ul><p>第二个符号：</p><ul><li>表示增加权限 　　  - 表示取消权限　　= 表示唯一设定权限。</li></ul><p>第三个符号代表作用到设置上的权限：</p><ul><li>r 表示可读取</li><li>w 表示可写入</li><li>x 表示可执行</li><li>X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行，赋予执行权限。 </li><li>s：运行时重新设置UID或GID。</li><li>t：保留文件或目录。</li><li>u：将权限设置为跟属主一样。</li><li>g：将权限设置为跟属组一样。</li><li>o：将权限设置为跟其他用户一样。<br>最常用的比如：chmod -R 777 Downloads/*<br>设置文件夹下所有文件可读可写。</li></ul><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>命令格式：chown options owner[.group] file<br>只有root有使用权限，改变文件的所属关系。<br>注意：只有root用户能够改变文件的属主。任何属主都可以改变文件的属组，但前提是属主必须是原属组和目标属组的成员。<br>options：<br>-v：显示指令执行过程<br>-R：将权限的改变递归作用到文件和子目录。<br>-h：改变该文件的所有符号链接的所属关系。<br>-f：不显示错误信息</p><p>owner：新的文件拥有者的属主ID<br>group：新的文件的属组</p><p>比如：chown -R wry:web /tmp/wry命令是将/tmp/wry这个目录的属主改为wry，属组为web。</p><p>权限：r- -　可读，八进制值4<br>　　：-w-　可写，八进制值2<br>　　：- -x　可执行，八进制值1</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基本的bash shell命令（一）</title>
      <link href="/posts/87b0.html"/>
      <url>/posts/87b0.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="linux文件系统"><a href="#linux文件系统" class="headerlink" title="linux文件系统"></a>linux文件系统</h2><p>不同于windows使用驱动器盘符，linux将文件存储在单个目录结构中，该目录被称为虚拟目录。Linux虚拟目录结构只包含一个称为根（ root）目录的基础目录。根目录下的目录和文件会按照访问它们的目录路径一一列出。<br>通常系统文件存储在根驱动器中，而用户文件则存储在另一驱动器中。<br><img src="https://img-blog.csdnimg.cn/20200226095654707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br> 　　　　　　　　　　　　==<strong>常见的linux目录</strong>==<br>|     /     | 虚拟目录的根目录                                          |<br>| :——-: | ——————————————————— |<br>|   /bin    | 二进制目录，存放许多用户级的GNU工具                       |<br>|   /boot   | 启动目录，存放启动文件                                    |<br>|   /dev    | 设备目录， Linux在这里创建设备节点                        |<br>| <strong>/etc</strong>  | 系统配置文件目录                                          |<br>| <strong>/home</strong> | 主目录， Linux在这里创建用户目录                          |<br>|   /lib    | 库目录，存放系统和应用程序的库文件                        |<br>|  /media   | 媒体目录，可移动媒体设备的常用挂载点                      |<br>| <strong>/mnt</strong>  | 挂载目录，另一个可移动媒体设备的常用挂载点                |<br>|   /opt    | 可选目录，常用于存放第三方软件包和数据文件                |<br>|   /proc   | 进程目录，存放现有硬件及当前进程的相关信息                |<br>| <strong>/root</strong> | root用户的主目录                                          |<br>|   /sbin   | 系统二进制目录，存放许多GNU管理员级工具                   |<br>|   /run    | 运行目录，存放系统运作时的运行时数据                      |<br>|   /srv    | 服务目录，存放本地服务的相关文件                          |<br>|   /sys    | 系统目录，存放系统硬件信息的相关文件                      |<br>|   /tmp    | 临时目录，可以在该目录中创建和删除临时工作文件            |<br>|   /usr    | 用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里 |<br>|   /var    | 可变目录，用以存放经常变化的文件，比如日志文件            |</p><h2 id="查看文件内容命令"><a href="#查看文件内容命令" class="headerlink" title="查看文件内容命令"></a>查看文件内容命令</h2><h3 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h3><p>file命令：file 文件名<br>　　查看二进制可执行程序。 file命令能够确定该程序编译时所面向的平台以及需要何种类型的库。<img src="https://img-blog.csdnimg.cn/20200222203129530.png" alt="  "></p><h3 id="查看整个文件"><a href="#查看整个文件" class="headerlink" title="查看整个文件"></a>查看整个文件</h3><p>cat命令<br>|cat -n|给所有的行加上行号  |<br>|–  |–|<br>| cat -b | 给有文本的行加上行号 |<br>|cat -T  |不让制表符出现，用^I字符组合去替换文中的所有制表符。 |</p><ol><li>tail命令：默认显示文件末尾10行的内容<br>可以向tail命令中加入-n参数来修改所显示的行数。  tail -n 2 log-file 显示文件的最后两行<blockquote><p>tail -f 允许在其他进程使用该文件时查看文件的内容。tail命令会保持活动状态，并不断显示添加到文件中的内容。可以实时监测系统日志。</p></blockquote></li></ol><p>2.head命令：默认显示文件前10行的文本<br>类似于tail命令，head -n 显示文件的前n行。同样也支持-f参数。</p><p>当程序运行在系统上时，称之为进程，要监测这些进程，需要用ps命令。ps命令提供进程的一次性查看，即列出的是当前正在运行的进程的快照。<br>  ps命令标识进程的五种状态码</p><ul><li>D不可中断：uninterruptible sleep (usually IO）</li><li>R运行：runnable</li><li>S中断：sleeping<ul><li>T停止：traced or stopped</li><li>Z僵死：a defunct (”zombie”) process <h2 id="监测程序"><a href="#监测程序" class="headerlink" title="监测程序"></a>监测程序</h2><h4 id="ps命令常用参数："><a href="#ps命令常用参数：" class="headerlink" title="ps命令常用参数："></a>ps命令常用参数：</h4><table><thead><tr><th align="center">参数</th><th>功能</th></tr></thead><tbody><tr><td align="center">a</td><td>显示所有进程</td></tr><tr><td align="center">-a</td><td>显示同一终端下的所行程序</td></tr><tr><td align="center">-A或-e</td><td>显示所有进程</td></tr><tr><td align="center">c</td><td>显示进程的其实名称</td></tr><tr><td align="center">e</td><td>显示环境变量</td></tr><tr><td align="center">f</td><td>显示程序间的关系</td></tr><tr><td align="center">-H</td><td>显示树状结构</td></tr><tr><td align="center">r</td><td>显示当前终端的进程</td></tr><tr><td align="center">u</td><td>指定用户的所有进程</td></tr><tr><td align="center">-au</td><td>显示较详细的咨询</td></tr><tr><td align="center">-aux</td><td>显示所有包含其他使用者的行程</td></tr><tr><td align="center">T</td><td>显示当前终端的所有程序</td></tr></tbody></table></li></ul></li></ul><p>命令：ps -ef 显示所有进程信息，连通命令行。扩展参数组合-e参数指定显示所有运行在系统上的进程； -f参数则扩展了输出<br>命令：ps -ef|grep  ps与grep常用组合用法，查找特定进程</p><blockquote><p>命令：ps -l<img src="https://img-blog.csdnimg.cn/20200223105138912.png" alt="  "></p></blockquote><p>1) F：代表这个程序的旗标（ flag), 4 代表使用者为 super user。<br>2) S：代表这个程序的状态（ STAT），关于各 STAT 的意义将在下文中介绍 。<br>3) UID：程序被该 UID 所拥有 。<br>4) PID：这个程序的进程 id。<br>5) PPID ：其父进程的进程 id。<br>6) C：使用的 CPU 资源百分比 。<br>7) PRI：Priority （优先执行序）的缩写 。<br>8) NI：Nice 值。<br>9) ADDR：kernel function，指出该程序在内存的那个部分。 如果是个 running 的程序，一般就是”-“ 。<br>10) sz： 使用掉的内存大小 。<br>11) WCHAN： 目前这个程序是否正在运作当中，若为-表示正在运作 。<br>12) TTY： 登入者的终端机位置。<br>13) TIME：使用掉的 CPU 时间 。<br>14) CMD： 所下达的指令内容 。</p><p><strong>==top命令：实时显示系统重各个进程的资源占用状况==</strong><br><img src="https://img-blog.csdnimg.cn/20200223110145166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p><p>第 1 行分别显示：系统当前时间、系统运行时间、当前用户登录数和系统负载 。 系统负载（ load average ），这里有 3 个数值，分别是系统最近 lmin 、 5min 、 15min 的平均负载。 一般对于单个处理器来说，负载在0-1之间是正常的。<br>第 2 行分别显示： total （进程总数）、running （正在运行的进程数）、 sleeping （睡眠的进程数）、stopped （停止的进程数）和 zombie （僵尸进程数） 。<br>第 3 行分别显示： %us（用户空间占用 CPU 百分比）、%sy（内核空间占用 CPU 百分比）、%ni（用户进程空间内改变过优先级的进程占用 CPU 百分比）、 %id （空闲 CPU 百分比）、%wa （等待输入输出（I/O）的 CPU 时间百分比）、 %hi ( cpu 处理硬件中断的时间）、%si ( cpu 处理软中断的时间）、%st （用于有虚拟 cpu 的情况） 。通常 id% 值可以反映一个系统 cpu 的闲忙程度 。<br>第 4 行则显示内存 MEM 的数据： total （物理内存总量）、 used （使用的物理内存总量 ）、free （空闲内存总量）、 buffers （用作内核缓存的内存量） 。<br>第 5 行则显示交换器 SWAP 的数据： total（交换区总量）、used（使用的交换区总量）、 free （空闲交换区总量） 、 cached （缓冲的交换区总量） 。<br>第 6 行则显示 PID （进程号）、USER （运行用户）、PR （优先级）、NI （任务 nice 值）、VIRT （虚拟内存用量）VIRT=SWAP+RES,RES（物理内存用量）、 SHR（共享内存用量）、 S（进程状态）、 %CPU(CPU 占用比）、 %MEM （物理内存占用比）、 TIME+ （累计 CPU 占用时间）、 COMMAND 命令名／命令行。</p><p><strong>df -h</strong> 查看所有已挂载磁盘的使用情况<br><img src="https://img-blog.csdnimg.cn/20200223161455522.png" alt="zxc"></p><blockquote><p>du命令：显示当前目录下所有的文件、目录和子目录的磁盘使用情况。<br>du -c：显示所有已列出文件总的大小。<br>du -h：按用户易读的格式输出大小，即用K替代千字节，用M替代兆字节，用G替代吉字节<br>du -s：显示每个输出参数的总计</p></blockquote><h3 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h3><p>sort -n 将数字当做数字而不是字符，按值排序</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>stm32mp1开发板入门pangu</title>
      <link href="/posts/29d1.html"/>
      <url>/posts/29d1.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="pangu开发板介绍"><a href="#pangu开发板介绍" class="headerlink" title="pangu开发板介绍"></a>pangu开发板介绍</h2><p><strong>pangu开发板</strong>主芯片基于ST公司STM32MP1系列微处理器（ARM dual Cortex-A7 650Mhz + Cortex-M4）<br> <img src="https://img-blog.csdnimg.cn/20200222114447932.png" alt="  "><br> <img src="https://img-blog.csdnimg.cn/20200222114459216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p><h2 id="开发软件安装，STM32CubeMX"><a href="#开发软件安装，STM32CubeMX" class="headerlink" title="开发软件安装，STM32CubeMX"></a>开发软件安装，STM32CubeMX</h2><p>STM32CubeMX 是 ST 意法半导体近几年来大力推荐的 STM32 芯片图形化配置工具， 允许用户使用图形化向导生成 C 初始化代码，可以大大减轻开发工作，时间和费用。stm32mp1中使用协处理器M4需要安装stm32cubemx：<br>stm32cubemx运行环境搭建，包含两个部分，首先是安装java运行环境（版本必须为v1.7以上），然后是安装stm32cubemx开发软件。<br>简单使用：<br>新建工程第一步，选择mcu型号<br> <img src="https://img-blog.csdnimg.cn/20200222114600172.png#pic_center" alt="  "><br>由于pangu开发板选用的是stm32mp157AAA3芯片，故选择stm32mp157AAAX<br> <img src="https://img-blog.csdnimg.cn/20200222114620944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p><p>接下来配置时钟源，如果选择使用外部高速时钟（HSE），则需要在System Core中配置RCC；</p><p>如果使用默认内部时钟（HSI），这一步可以略过；这里使用外部时钟，HSE，LSE<br>pangu开发板上的外部时钟<br><img src="https://img-blog.csdnimg.cn/20200222114636918.png" alt="  "><br>下拉框中选择crystal/Ceramic Resonator晶体/陶瓷晶振<br><img src="https://img-blog.csdnimg.cn/20200222114645123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>设置开发板上D17灯对应的PH6引脚为输出<br> <img src="https://img-blog.csdnimg.cn/20200222114656882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>生成工程设置<br> <img src="https://img-blog.csdnimg.cn/20200222114702610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br>然后点击Generate code就可生成MDK工程代码。<br>时钟树配置，配置主要是外部晶振大小，分频系数，倍频系统以及选择器。<br> <img src="https://img-blog.csdnimg.cn/20200222114710174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "><br><img src="https://img-blog.csdnimg.cn/20200222114716478.png#pic_center" alt="  "></p><p>最后用MDK打开生成的MDK-ARM工程文件，build编译。0error。<br><img src="https://img-blog.csdnimg.cn/20200222114746322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70#pic_center" alt="  "><br>之前使用的STM32F407开发板用的是标准外设库（STD库），  HAL库是硬件抽象层，更加标准化了。所有的函数名和函数体进行了重新定义，重新编写。更加通用。方便移植。近两年新出的STM32芯片，ST只提供HAL库，可用STM32Cube程序生成开发工具+HAL库<br>stm32cube目前几乎支持STM32全系列，我们需要到ST官网下载对应的STM32Cube包<br><img src="https://img-blog.csdnimg.cn/2020022211481192.png" alt="  "><br>包中大致有（1）Drivers文件夹，Drivers 文件夹包含BSP， CMSIS 和 STM32MP1xx_HAL_Driver 三个子文件夹。BSP是板级支持包，提供直接与硬件打交道的API。<br>CMSIS 文件夹是符合 CMSIS 标准的软件抽象层组件相关文件。主要包括 DSP库(DSP_LIB 文件夹)， Cortex-M 内核及其设备文件（Include 文件夹）， 微控制器专用头文件/启动代码/专用系统文件等(Device 文件夹)。<br>STM32MP1xx_HAL_Driver文件夹中包含所有的 STM32MP1xx系列 HAL 库头文件和源文件，也就是所有底层硬件抽象层 API 声明和定义。 它的作用是屏蔽了复杂的硬件寄存器操作，统一了外设的接口函数。 该文件夹包含 Src 和 Inc 两个子文件夹，其中 Src 子文件夹存放的是.c 源文件， Inc 子文件夹存放的是与之对应的.h 头文件。每个.c 源文件对应一个.h 头文件。<br>Middlewares文件夹下有Third_Party文件夹（是第三方中间件）里面有FreeRTOS实时系统支持包和OpenAMP（？）<br>Projects文件夹存放的是一些可以直接编译的实例工程，每个文件夹对应一个ST官方的Demo板，暂时只有SW4STM32的工程，没有MDK的。</p><p>  一般来说，stm32mp1处理器可以在M4上做电机控制，A7上做人机交互界面。</p><h2 id="应用开发环境搭建"><a href="#应用开发环境搭建" class="headerlink" title="应用开发环境搭建"></a>应用开发环境搭建</h2><p><em>linux开发需要在ubuntu下进行，主要是交叉编译器的安装。</em></p><blockquote><p>linux进行C语言开发用的是GCC编译器进行代码编译，但ubuntu自带的GCC编译器是针对X86架构的。我们现在要编译的是ARM架构的代码，需要一个在X86架构的PC机上运行，可以编译ARM架构代码的GCC编译器，这个编译器就叫做交叉编译器。（就是在一个架构上编译另外一个架构的代码）</p></blockquote><p>pangu开发板的开发环境基于Ubuntu16.04 64bit，在虚拟机上安装ubuntu16.04操作系统</p><ul><li>PanGu开发板的应用开发，需要先安装应用开发工具包(SDK)。PanGu开发板提供了两种SDK工具包：i2som-image-qt-openstlinux-eglfs-pangu-x86_64-toolchain-2.6-snapshot.sh和i2som-image-weston-openstlinux-weston-pangu-x86_64-toolchain-2.6-snapshot.sh。</li></ul><p>由于板载的flash预装的是weston系统，在此我选择在ubuntu系统中安装weston系统镜像的应用开发工具链。<br>下面开始安装i2som-image-weston-openstlinux-weston-pangu-x86_64-toolchain-2.6-snapshot.sh工具包</p><ul><li><p>首先运行chmod a+x命令，给所有人加上可执行权限，用ls –lh命令查询文件的大小、权限等详细信息，权限都为rwx（读取、写入、执行）<br><img src="https://img-blog.csdnimg.cn/20200222115039272.png" alt="  "></p></li><li><p>接着在路径下运行安装命令：./i2som-image-weston-openstlinux-weston-pangu-x86_64-toolchain-2.6-snapshot.sh<br><img src="https://img-blog.csdnimg.cn/20200222115050732.png" alt="  "></p></li><li><p>安装路径输入 /opt/st/pangu-i2som-image-weston/2.6-snapshot<br><img src="https://img-blog.csdnimg.cn/20200222115058493.png" alt="  "></p></li><li><p>接着会让你输入管理员密码，之后就等待安装了。<br>当出现SDK has been successfully时证明安装完成了。</p></li><li><p>然后运行如下命令：<br>==. /opt/st/pangu-i2som-image-weston/2.6-snapshot/environment-setup-cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi==<br><img src="https://img-blog.csdnimg.cn/20200222115117851.png" alt="  "></p></li><li><p>通过$CC –version验证开发工具是否正确安装，如图显示了版本信息表示工具链安装完成。</p></li></ul><p>编写测试文件test.c内容如下<br> <img src="https://img-blog.csdnimg.cn/20200222115130646.png" alt="  "><br>编译test应用<br> <img src="https://img-blog.csdnimg.cn/2020022211513545.png" alt="  "><br>然后将输出的 复制到pangu开发板后直接运行</p><p>通过MobaXtern配置ssh登录pangu开发板，可通过sftp服务进行文件的复制拷贝。<br><img src="https://img-blog.csdnimg.cn/2020022211514457.png#pic_center" alt="  "> 上图是pangu开发板的home目录<br>现在将编译输出的test从虚拟机的ubuntu系统复制到home目录下<br><img src="https://img-blog.csdnimg.cn/20200222115156304.png" alt="  "><br> 可以看到此时多了个test文件。<br> <img src="https://img-blog.csdnimg.cn/20200222115206362.png" alt="  "><br>直接运行发现permission denied<br>通过chmod a+x命令修改下权限，紧接着再输入./test<br>输出是hello，I am wangrongyao!</p><blockquote><p>pangu开发板的Micro usb接口可以作为从设备，默认是作为usb以太网设备，可以实现将开发板的usb otg接口作为从设备模式，模拟成为一个网口，通过PC的usb接口连接到开发板。使用Micro USB线连接开发板J5和PC USB Host接口。PanGu开发板上usb0为网络设备，默认IP地址为192.168.7.2<br><img src="https://img-blog.csdnimg.cn/20200222115720532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70" alt="  "></p></blockquote><p>PC通过usb连接开发板后，PC上会出现一个usb虚拟的网络设备，自行手动配置ip地址为192.168.7.10，之后就可以通过ssh登录pangu开发板了。<br><img src="https://img-blog.csdnimg.cn/20200222115727727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NDE1MzYy,size_16,color_FFFFFF,t_70#pic_center" alt="  "></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP Congestion性能测试分析</title>
      <link href="/posts/ab61.html"/>
      <url>/posts/ab61.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-实验简介"><a href="#1-实验简介" class="headerlink" title="1.实验简介"></a>1.实验简介</h2><p>  最近在学习《现代计算机网络》，课程布置了一个对tcp拥塞控制性能进行测试的实验，本篇博客就本次实验做一个完整的实验报告及总结。</p><a id="more"></a><h2 id="一-实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）"><a href="#一-实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）" class="headerlink" title="一.实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）"></a>一.实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）</h2><ul><li>操作系统：Windows10</li><li>虚拟机操作系统：SEEDUbuntu 12.04</li><li>虚拟机工具：VirtualBox 5.2.16</li><li>网络虚拟软件：GNS3 2.0.3</li><li>网络性能测试工具：iperf</li></ul><h2 id="二-实验目的"><a href="#二-实验目的" class="headerlink" title="二.实验目的"></a>二.实验目的</h2><ol><li>掌握基础ip网络配置；</li><li>选择 TCP 的三种支持的三种拥塞控制算法 cubic、reno、westwood，通过改变 Seed-Router 的延迟和丢包，来测试三种 TCP 拥塞控制算法在不同情况下（延迟、丢包）的性能。</li><li>深入理解不同TCP拥塞控制算法思路及原理。</li></ol><h2 id="三-实验步骤"><a href="#三-实验步骤" class="headerlink" title="三.实验步骤"></a>三.实验步骤</h2><p>　　本次实验中主要实现SeedUbuntu内核中Cubic、Reno、Westwood三种TCP拥塞控制算法的性能测试分析与比较。实验中采用三台虚拟机SEED-Client、SEED-Router、SEED-Server构建处于两个不同子网网段的可相互通信网络拓扑结构，其中保证SEED-Client和SEED-Serve采用同一TCP拥塞控制算法，通过设置SEED-Router的转发参数（丢包率、延迟、重复包率、损坏包率）模拟不同的网络状态。</p><p>1.导入SEED虚拟机镜像文件，命名为SEED-Client，再复制两个，命名为SEED-Router、SEED-Server（注意勾选重新初始化网卡的MAC地址）。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213193756.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195510.png" alt=""></p><p>2.在GNS3中新建一个项目，将三台虚拟机按如图方式连接起来</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195551.png" alt=""></p><p>3.然后在GNS3中给每台虚拟机配置三个网卡，eth0、eth1、eth2，其中eth0不要作为连接使用，而是将其配置为网络地址转换NAT，用于虚拟机访问外部网络。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195600.png" alt=""></p><p>4.按照下表配置三台主机的ip地址和路由</p><table><thead><tr><th></th><th>SEED-Client</th><th>SEED-Router</th><th>SEED-Server</th></tr></thead><tbody><tr><td>eth0</td><td>/</td><td>/</td><td>/</td></tr><tr><td>eth1</td><td>192.168.1.2/24</td><td>192.168.1.1/24</td><td>192.168.2.2/24</td></tr><tr><td>eth2</td><td>/</td><td>192.168.2.1/24</td><td>/</td></tr></tbody></table><p>5.在SEED-Client端增加默认路由</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195608.png" alt=""></p><p>用ip route命令查看</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195634.png" alt=""></p><p>Ping <a href="http://www.baidu.com测试能否通过eth0联网" target="_blank" rel="noopener">www.baidu.com测试能否通过eth0联网</a></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195701.png" alt=""></p><p>6.在SEED-Router端启动路由转发功能</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195713.png" alt=""></p><p>7.在SEED-Server增加默认路由</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200213195742.png" alt=""></p><p>用ip route命令查看</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214142955.png" alt=""></p><p>测试能否联网，访问外部网络。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143027.png" alt=""></p><p>　　经过上述一系列操作步骤，实现SEED-Client与SEED-Server之间能够相互ping通，并且保证三台虚拟机可以通过eth0网卡访问外部网络。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143110.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143120.png" alt=""></p><p>8.然后分别在SEED-Client和SEED-Server上通过sudo apt-get install iperf命令安装iperf软件</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143223.png" alt=""></p><p>现在实验所需的环境配置完成。</p><h2 id="linux下的拥塞控制算法"><a href="#linux下的拥塞控制算法" class="headerlink" title="linux下的拥塞控制算法"></a>linux下的拥塞控制算法</h2><p>(1)观察Linux内核内已经编译的TCP拥塞控制算法:使用命令行sysctl net.ipv4.tcp_available_congestion_control,可以看到已经直接编译到内核的拥塞控制算法Cubic及Reno</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143339.png" alt=""></p><p>修改当前的拥塞控制算法</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143442.png" alt=""></p><p>使用命令ls  /lib/modules/3.5.0-37-generic/kernel/net/ipv4/ 查看Linux支持的拥塞控制算法：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143604.png" alt=""></p><p>从SEED-Client虚拟机发包测试</p><p>下面以SEED-Client和SEED-Server都设置拥塞算法为cubic</p><p>先在SEED-Server端运行iperf -c命令，让iperf的服务器端运行守护在5001端口：</p><p>​    在SEED-Client端运行下表的命令，让iperf的客户端运行，同时利用Linux内核的tcp probe模块监控特定连接中参数变化：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>modprobe tcp_probe   port=5001</td><td>对端口为5001（源或目的）的tcp连接进行监控</td></tr><tr><td>cat /proc/net/tcpprobe &gt; data.txt   &amp;</td><td>tcpprobe捕捉的信息是持续性的，可以放到后台读</td></tr><tr><td>pid=$!</td><td>保存上一个读命令的pid，用于结束读tcpprobe接口</td></tr><tr><td>iperf -c otherhost –t time</td><td>使用iperf建立一个tcp流</td></tr><tr><td>kill $pid</td><td>杀死进程</td></tr></tbody></table><p>　　修改不同的拥塞控制算法，重复执行上述命令，得到XXX.txt文件保存了TCP的拥塞窗口的变化情况，作为实验数据，方便后续的分析。</p><p>　　下面依次得到cubic、reno和westwood算法在正常情况、不同延迟时间、不同丢包率情况下的测试结果。</p><h3 id="1-CUBIC算法"><a href="#1-CUBIC算法" class="headerlink" title="1.CUBIC算法"></a>1.CUBIC算法</h3><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143920.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143932.png" alt=""></p><p>设置cubic算法的loss为2.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143943.png" alt=""></p><p>设置cubic算法的loss为0.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214143957.png" alt=""></p><p>设置cubic算法的延迟为30ms加减10ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214144047.png" alt=""></p><p>设置延迟为100ms加减30ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214144057.png" alt=""></p><p>设置延迟为10ms加减3ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214144105.png" alt=""></p><h3 id="2-Reno算法"><a href="#2-Reno算法" class="headerlink" title="2.Reno算法"></a>2.Reno算法</h3><p>正常情况：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214150418.png" alt=""></p><p>设置reno算法的loss为2.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214150439.png" alt=""></p><p>设置reno算法的loss为0.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214150448.png" alt=""></p><p>设置reno算法的延迟为30ms加减10ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214150458.png" alt=""></p><p>设置reno延迟为100ms加减30ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214150529.png" alt=""></p><p>设置reno延迟为10ms加减3ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214150544.png" alt=""></p><h3 id="3-Westwood算法"><a href="#3-Westwood算法" class="headerlink" title="3.Westwood算法"></a>3.Westwood算法</h3><p>Client:</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152822.png" alt=""></p><p>Server:</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152840.png" alt=""></p><p>正常情况：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152902.png" alt=""></p><p>设置westwood算法的loss为2.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152917.png" alt=""></p><p>设置westwood算法的loss为0.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152930.png" alt=""></p><p>设置westwood算法的延迟为30ms加减10ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152941.png" alt=""></p><p>设置westwood延迟为100ms加减30ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214152953.png" alt=""></p><p>设置westwood延迟为10ms加减3ms</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214153008.png" alt=""></p><p>Server：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214153019.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214153032.png" alt=""></p><p>在实验过程中遇到加了delay情况下，生成的.txt文件没有数据，注意此时需要先用modprobe -r命令将tcp_probe模块移除，再重新加载，加载使用额外的参数full=1。</p><p>tcpprobe模块的卸载与加载，modprobe –r tcp_probe </p><p># modprobe tcp_probe full=1 port=5001   // full选项表示每次收到数据包都捕捉信息</p><p>==模拟丢包==</p><p>在 SEED_Route 这台虚拟机连接 SEED_Server 网卡上增加丢包和延迟来改变网络环境。在 SEED_Route 终端中键入命令:</p><p>tc qdisc add dev eth2 root netem loss 2.5%</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154535.png" alt=""></p><p>模拟丢包</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154615.png" alt=""></p><p>将add改为del删除相关配置。</p><p>增加延迟：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154630.png" alt=""></p><p>cwnd拥塞窗口</p><p>重复上述步骤，获得新的数据，命名为data_cubic_delay.txt</p><p>改变拥塞控制算法：</p><p>Client：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154854.png" alt=""></p><p>Server：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154906.png" alt=""></p><p>设置丢包和延迟</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154913.png" alt=""></p><p>运行新的拥塞控制算法：linux支持的拥塞控制算法westwood.ko</p><p>首先加载这些内核模块：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214154930.png" alt=""></p><p>然后在每种拥塞控制算法下重复第获取数据命令，得到三种算法下正常、丢包、延迟共9种情况下的数据进行分析。</p><p>查看已经配置的网络条件：#tc qdisc show dev eth2</p><h3 id="将实验数据文件通过虚拟机共享目录导出"><a href="#将实验数据文件通过虚拟机共享目录导出" class="headerlink" title="将实验数据文件通过虚拟机共享目录导出"></a><strong>将实验数据文件通过虚拟机共享目录导出</strong></h3><p>1、挂载这个目录到linux本地目录</p><p>首先在虚拟机中创建共享文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214155658.png" alt=""></p><p>改为可读可写</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214155710.png" alt=""></p><p>运行命令加载</p><p>sudo mount -t vboxsf -o uid=1000,gid=1000 share /home/share</p><p>share为VirtualBox共享目录的名字</p><p>/home/share为刚刚创建的目标目录。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214155723.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214155733.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214155744.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214155808.png" alt=""></p><p>这样就把数据从虚拟机复制到物理机上来了。便于后续的数据分析。</p><h2 id="四-实验结果和分析"><a href="#四-实验结果和分析" class="headerlink" title="四.实验结果和分析"></a>四.实验结果和分析</h2><p>当对资源的需求超过了资源的可用部分，网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降，这便是拥塞。TCP作为一个成熟可靠的通信协议，拥有许多具有较优性能的拥塞控制协议，可做到从全局角度，了解网络能够承受的现有网络负载，防止过多的数据注入网络中，保证网络中的路由器或链路不会过载。</p><p>本次实验主要以Linux内核中TCP拥塞控制算法模块Cubic、Reno、Westwood为例通过测试比较采用不同TCP拥塞控制算法在不同网络状态下的网络的吞吐量等性能，并深入分析Cubic、Reno、Westwood三种TCP拥塞控制算法的基本原理，进一步分析现有TCP拥塞控制算法的优缺点和较佳适用的网络环境。</p><p>实验中测试了Linux内核中的TCP拥塞控制算法中基于丢包反馈协议的Cubic、Reno和基于路径延迟反馈协议的Westwood算法，其中Cubic是针对Reno等传统TCP拥塞控制算法进行改进以适应现今高带宽、传输延时大的网络链路，提高TCP带宽利用率。</p><p>TCP作为面向连接全双工可靠服务协议，实现拥塞控制算法主要包括四个阶段有：慢开始、拥塞避免、快速重传以及快速恢复。</p><p>（1）慢开始：在新加入网络时，主机发送数据不是立即将大量数据字节注入网络，而是由小到大逐渐增大发送窗口。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值，在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值，这样，每经过一个传输轮次RTT，拥塞窗口 cwnd 就加倍，即拥塞控制窗口呈指数增长。为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。 当 cwnd &lt; ssthresh 时，使用上述的慢开始算法。 当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法。</p><p>（2）拥塞避免：当发送窗口达到慢开始阈值ssthresh时，为避免拥塞窗口增长过快导致网络拥塞，现采用拥塞控制算法，使发送窗口线性缓慢增加，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214163055.png" alt=""></p><p>　　　　　　　　　图4.1 采用慢开始及拥塞避免策略</p><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认ACK），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2），然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p>慢开始和拥塞控制算法常常作为一个整体使用，而快速重传和快速恢复则是为了减少因为拥塞导致的数据包丢失带来的重传时间，从而避免传递没有用的数据包到网络。</p><p>(3)快速重传：快重传机制要求接收方每收到一个失序的TCP报文段后就立即发出重复确认(为了使发送方及早知道没有到达对方)而不要等待自己发送数据时才进行确认，发送方只要连续收到3个重复确认就应当立即重传未被确认的报文段。</p><p>(4)快速恢复：当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法，而是认定网络现在可能没有出现拥塞，不执行慢开始算法，而是执行拥塞避免算法。</p><p>根据得到的数据进行绘图：</p><p><strong>采用Cubic算法实验结果图：</strong></p><p>正常情况下：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214163241.png" alt=""></p><p>丢包率为2.5%的情况： </p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214163250.png" alt=""></p><p>丢包率为0.5%:</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214164119.png" alt=""></p><p>设置延迟为30ms±10ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214164129.png" alt=""></p><p>设置延迟为100ms±30ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214164141.png" alt=""></p><p>设置延迟为10ms±3ms：  </p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214164219.png" alt=""></p><p><strong>采用Reno算法实验结果图：</strong></p><p>正常情况下：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214164431.png" alt=""></p><p>丢包率为2.5%的情况：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214164445.png" alt=""></p><p>丢包率为0.5%:</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165104.png" alt=""></p><p>设置延迟为30ms±10ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165116.png" alt=""></p><p>设置延迟为100ms±30ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165129.png" alt=""></p><p>设置延迟为10ms±3ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165137.png" alt=""></p><p><strong>采用Westwood算法实验结果图：</strong></p><p>正常情况下：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165419.png" alt=""></p><p>丢包率为2.5%的情况：   </p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165443.png" alt=""></p><p>丢包率为0.5%:</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165451.png" alt=""></p><p>设置延迟为30ms±10ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165459.png" alt=""></p><p>设置延迟为100ms±30ms：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165517.png" alt=""></p><p>设置延迟为10ms±3ms：  </p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165524.png" alt=""></p><p>对上述绘制的图像作如下分析：</p><p>　　通过对比正常情况下的Cubic和Reno图，可以发现cubic在稳定状态下的拥塞窗口cwnd的总体增长趋势更平缓。在发送端检测到链路中出现丢包时，cubic和reno都会立刻减小cwnd以缓解拥塞现象，之后cwnd开始进入恢复阶段。通过对比可以明显观察到cubic相比于reno，拥塞窗口增长的更为平缓，而reno的拥塞窗口呈现指数趋势增长。在丢包率为0.5%时，reno算法的吞吐量和cubic算法相比有着一定的优势，而当丢包率为2.5%时，cubic比reno此时有更高的带宽利用率。</p><p>　　通过对比正常情况下的reno和westwood图，可以看出慢启动阶段westwood的拥塞窗口增加的较为迅速，而在拥塞避免阶段其增长趋势有所放缓。在高丢包率链路中由于频繁的丢包reno需要降低自己的发送端cwnd，不断将当前的cwnd置为一般，而且对比发现高延时环境下reno的拥塞窗口增长比低延时来的慢一些。</p><p>　　对上述三种拥塞控制算法进行性能分析，主要关注性能指标是发送端的cwnd，ssthresh以及整个连接过程中的吞吐量。下表是不同丢包率和延时时间下的吞吐率：</p><table><thead><tr><th>拥塞控制算法</th><th>正常情况   （Mbit/s）</th><th>loss   为0.5%</th><th>loss   为2.5%</th><th>delay为   30ms±10ms</th><th>delay为   100ms±30ms</th><th>delay为   10ms±3ms</th></tr></thead><tbody><tr><td>cubic</td><td>31.7</td><td>20.9</td><td>14.6</td><td>15.5</td><td>12.3</td><td>23</td></tr><tr><td>reno</td><td>41</td><td>21.5</td><td>13.9</td><td>17.1</td><td>7.99</td><td>21.4</td></tr><tr><td>westwood</td><td>39.1</td><td>22.3</td><td>16.8</td><td>16.9</td><td>3.98</td><td>21.6</td></tr></tbody></table><p>绘制如图所示柱状图：</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165656.png" alt=""></p><p>　　分析上图可知，当网络存在随机丢包时，采用Westwood基于时延反馈的拥塞控制机制效果最佳，采用适用于高带宽的基于丢包反馈的Cubic拥塞控制机制和采用Reno拥塞控制算法的效果较差，这是由于存在丢包后，Cubic算法和Reno算法受丢包事件驱动，采用拥塞控制，使得发送窗口乘性回退，最终反映为网络的吞吐量的下降，而Westwood则是通过测量估计可用带宽动态调整慢开始阈值，可实现更快的快速恢复。</p><p><img src="https://cdn.jsdelivr.net/gh/honor-ry/honor-imgs/images/20200214165707.png" alt=""></p><p>　　分析上图：当网络存在7-13ms的随机延迟时，cubic算法表现出最佳的吞吐率。Cubic算法的有点在于只要没有出现丢包，就不会主动降低自己的发送速度，可以最大程度的利用网络剩余带宽，提高吞吐量。可以在在高带宽、低丢包率的网络中可以发挥较好的性能。而Westwood由于检测到了连接超时，会认为网络拥塞，发送窗口乘性减少回退，大大降低了网络利用率，但由于其可实现更快的快恢复阶段，因此性能相比于Reno要好一点。</p><p>　　综合上述分析，对cubic、reno、westwood三种拥塞控制算法有了较深的了解。其中Cubic、Reno算法是基于丢包反馈协议的（将丢包视为出现拥塞，采取缓慢探测的方式，逐渐增大拥塞窗口，当出现丢包时，将拥塞窗口减小），Westwood算法是基于延迟反馈协议的（将时延增加视为出现拥塞，延时增加时增大拥塞窗口，延时减小时减小拥塞窗口）。</p><p>　　Cubic算法适用于高带宽，低丢包率的网络，能够有效利用带宽。</p><p>　　Reno算法适用于低延时，低带宽的网络。</p><p>　　Westwood算法是在tcp-reno算法的基础上针对高带宽大延时提出的，尤其在无线网络中相较reno有更快的恢复速度，对可用带宽的利用率很高。通过测量估算出网络的可用带宽，对拥塞窗口cwnd进行适当调整，实现更快速的恢复。与Reno相比吞吐量成倍提高。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown测试</title>
      <link href="/posts/ff42.html"/>
      <url>/posts/ff42.html</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p><a id="more"></a><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><pre><code>这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题</code></pre><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p><h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>示例：</p><p>这是去往 <a href="http://Shen-Yu.github.com" target="_blank" rel="noopener">本人博客</a> 的链接。</p><p><img src="https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90" alt=""></p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p><p>示例：</p><pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><p>示例：</p><p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p><h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p><p>[TOC]</p><h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p><p>标签： 数学 英语 Markdown</p><p>或者</p><p>Tags： 数学 英语 Markdown</p><h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p><p><del>这是一段错误的文本。</del></p><h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p><p>这是一个注脚[^footnote]的样例。</p><p>这是第二个注脚[^footnote2]的样例。</p><h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i=1}^n a_i=0$$</p><p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p><p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>非代码示例：</p><pre><code>$ sudo apt-get install vim-gnome</code></pre><p>Python 示例：</p><pre class=" language-python"><code class="language-python">@requires_authorization<span class="token keyword">def</span> <span class="token function">somefunc</span><span class="token punctuation">(</span>param1<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''A docstring'''</span>    <span class="token keyword">if</span> param1 <span class="token operator">></span> param2<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># interesting</span>        <span class="token keyword">print</span> <span class="token string">'Greater'</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>param2 <span class="token operator">-</span> param1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> None<span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token triple-quoted-string string">'''interpreter... prompt'''</span></code></pre><p>JavaScript 示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*** nth element in the fibonacci series.* @param n >= 0* @return the nth element, >= 0.*/</span><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> tmp<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-flow"><code class="language-flow">st=>start: Start:>https://www.zybuluo.comio=>inputoutput: verificationop=>operation: Your Operationcond=>condition: Yes or No?sub=>subroutine: Your Subroutinee=>endst->io->op->condcond(yes)->econd(no)->sub->io</code></pre><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><pre class=" language-seq"><code class="language-seq">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</code></pre><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><pre class=" language-seq"><code class="language-seq">Title: Here is a titleA->B: Normal lineB-->C: Dashed lineC->>D: Open arrowD-->>A: Dashed open arrow</code></pre><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><pre class=" language-gantt"><code class="language-gantt">    title 项目开发流程    section 项目确定        需求分析       :a1, 2016-06-22, 3d        可行性报告     :after a1, 5d        概念验证       : 5d    section 项目实施        概要设计      :2016-07-05  , 5d        详细设计      :2016-07-08, 10d        编码          :2016-07-15, 10d        测试          :2016-07-22, 5d    section 发布验收        发布: 2d        验收: 3d</code></pre><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><pre class=" language-graphLR"><code class="language-graphLR">    A[Hard edge] -->|Link text| B(Round edge)    B --> C{Decision}    C -->|One| D[Result one]    C -->|Two| E[Result two]</code></pre><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><pre class=" language-sequence"><code class="language-sequence">    Alice->John: Hello John, how are you?    loop every minute        John-->Alice: Great!    end</code></pre><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan="2"&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table>    <tbody><tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></tbody></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><pre><code>&lt;i class="icon-weibo"&gt;&lt;/i&gt;</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><pre><code>&lt;i class="icon-renren"&gt;&lt;/i&gt;</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><pre><code>- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)    - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)- [ ] **七月旅行准备**    - [ ] 准备邮轮上需要携带的物品    - [ ] 浏览日本免税店的物品    - [x] 购买蓝宝石公主号七月一日的船票</code></pre><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li><li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul><li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul><li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li><li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li><li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul><p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p><p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SYN flood攻击及SYN cookie原理分析</title>
      <link href="/posts/77c3.html"/>
      <url>/posts/77c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-实验简介"><a href="#1-实验简介" class="headerlink" title="1.实验简介"></a>1.实验简介</h2><p>　　最近在学习《计算机网络》，课程布置了一个网络攻击的作业 SYN Flooding Attack ，本篇博客就本次实验做一个完整的实验报告及总结。</p><h2 id="所用平台seed简介"><a href="#所用平台seed简介" class="headerlink" title="所用平台seed简介"></a>所用平台seed简介</h2><ol><li>SEED：计算机安全教育的教学实验平台</li><li><a href="http://www.cis.syr.edu/~wedu/seed/" target="_blank" rel="noopener">http://www.cis.syr.edu/~wedu/seed/</a></li><li>纽约雪城大学 杜文亮 (Du, Wenliang)教授设计和实现，从2002年开始得到NSF 1.2M$的资助</li></ol><a id="more"></a><h2 id="一-实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）"><a href="#一-实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）" class="headerlink" title="一.实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）"></a>一.实验环境（详细说明实验运行的操作系统，网络平台，机器的配置）</h2><p>操作系统：Windows10<br>虚拟机操作系统：SEEDUbuntu 12.04<br>虚拟机工具：VirtualBox 5.2.16<br>网络虚拟软件：GNS3 2.0.3</p><h2 id="二-实验目的"><a href="#二-实验目的" class="headerlink" title="二.实验目的"></a>二.实验目的</h2><ol><li>掌握基础ip网络配置；</li><li>掌握GNS3和使用WireShark对流量进行抓包分析；</li><li>实现SYN flood攻击，理解其表现形式和产生的影响；</li><li>深入观察理解linux内核tcp SYN cookie机制，理解其在SYN flood攻击中的作用。</li></ol><h2 id="三-实验步骤"><a href="#三-实验步骤" class="headerlink" title="三.实验步骤"></a>三.实验步骤</h2><ol><li>导入SEED虚拟机镜像文件，命名为SEED ubuntu，复制一个，命名为SEED ubuntu target（注意勾选重新初始化网卡的MAC地址）。<br><img src="https://i.loli.net/2020/02/10/o9mBiqw6ElF3b81.png" alt="01.png"><br><img src="https://i.loli.net/2020/02/10/RK6YpAUMm5XtTbn.png" alt="02.png"><br><img src="https://i.loli.net/2020/02/10/DPbZmHJYWUvT9fn.png" alt="03.png"><br><img src="https://i.loli.net/2020/02/10/cVIMzFqChb9SkoZ.png" alt="04.png"></li></ol><ol start="2"><li><p>利用GNS3配置如图所示网络<br><img src="https://i.loli.net/2020/02/10/F51tw4KbjaiXe8P.png" alt="01.png"></p></li><li><p>配置两台主机的ip地址和路由，一个为192.168.1.1，另一个为192.168.1.2.默认的路由为192.168.1.0<br><img src="https://i.loli.net/2020/02/10/K45RJ9dq3bizWCk.png" alt="02.png"><br><img src="https://i.loli.net/2020/02/10/EJKW9D8gPFOQdHZ.png" alt="03.png"></p></li><li><p>测试连通性<br><img src="https://i.loli.net/2020/02/10/3ifuPty94hvkweM.png" alt="04.png"><br><img src="https://i.loli.net/2020/02/10/MxYHlJRseKuWLVm.png" alt="05.png"></p></li><li><p>在SEED Ubuntu target上启动telnet服务<br><img src="https://i.loli.net/2020/02/10/Bl7wKHhRAsLgEcz.png" alt="06.png"></p></li><li><p>在SEED Ubuntu主机上输入攻击命令<br><img src="https://i.loli.net/2020/02/10/9R5nGNSlUiQd6Tu.png" alt="07.png"></p></li><li><p>在seed Ubuntu target上用wireshark观察攻击报文<br><img src="https://i.loli.net/2020/02/10/chOIQatpP7qYSg3.png" alt="08.png"></p></li><li><p>用netstat –n –tcp命令观察建立的连接，显示的状态为established<br><img src="https://i.loli.net/2020/02/10/qfnNbBGc1kPp7TZ.png" alt="09.png"></p></li><li><p>此时seed ubuntu可以通过telnet登录seed Ubuntu target<br><img src="https://i.loli.net/2020/02/10/cLSAQYJipUw8szO.png" alt="10.png"></p></li><li><p>进一步观察linux内核tcp syn cookie机制<br>通过echo 0 &gt; /proc/sys/net/ipv4/tcp_syncookies命令关闭syn cookies<br>通过sysctl -w net.ipv4.tcp_max_syn_backlog = 5指定所能接受SYN同步包的最大客户端数量为5<br><img src="https://i.loli.net/2020/02/10/R3IEKrmyftcobM9.png" alt="11.png"></p></li><li><p>再次从SEED Ubuntu 上用netwox的syn flood攻击SEED Ubuntu target<br><img src="https://i.loli.net/2020/02/10/embRT7JGZnAvrSO.png" alt="12.png"></p></li><li><p>此时发现不能用telnet登录seed ubuntu target<br><img src="https://i.loli.net/2020/02/10/6JCzFa8oDY5OgGZ.png" alt="13.png"></p></li><li><p>再次打开SEED Ubuntu target内核tcp syn cookie参数(将tcp_syncookies设置为1)，同时从SEED Ubuntu 上用telnet连接主机 SEED Ubuntu target<br><img src="https://i.loli.net/2020/02/10/1EuwVbAZGXHiYSj.png" alt="14.png"></p></li></ol><p>发现可以通过telnet建立连接<br><img src="https://i.loli.net/2020/02/10/ZmfCsdTySpWU298.png" alt="15.png"></p><ol start="14"><li>用netstat –n –tcp查看tcp网络的连接情况。<br><img src="https://i.loli.net/2020/02/10/VNpCqYZdyztFT7o.png" alt="16.png"></li></ol><p>　　在seed ubuntu target查看连接情况<br><img src="https://i.loli.net/2020/02/10/BUdzThlMxGbpZQD.png" alt="17.png"></p><h2 id="四-实验结果分析"><a href="#四-实验结果分析" class="headerlink" title="四.实验结果分析"></a>四.实验结果分析</h2><h3 id="1-SYN-Flood攻击原理"><a href="#1-SYN-Flood攻击原理" class="headerlink" title="1. SYN Flood攻击原理"></a>1. SYN Flood攻击原理</h3><p>　　SYN Flood 攻击是一种典型的拒绝服务型(Denial of Service,DoS)攻击。所谓拒绝服务型攻击就是通过对网络带宽进行消耗性攻击，使受害主机或网络不能够良好的提供服务，从而间接达到攻击的目的。SYN Flood攻击就是利用了“三次握手”的漏洞。假设一个用户向服务器发送了SYN报文后突然死机或掉线，那么服务器在发出 SYN+ACK 应答报文后是无法收到客户端的 ACK 报文的(第三次握手无法完成)，一般把服务器收到 SYN 包而还未收到 ACK 包时的连接状态成为半开连接。这时服务器端一般会重试(再次发送 SYN+ACK 给客户端)并等待一段时间后丢弃这个未完成的连接，这段时间的长度我们称为 SYN Timeout，一般来说这个时间是分钟的数量级(大约为30秒-2分钟)。如果有一个恶意的攻击者大量模拟这种情况，服务器端将为了维护一个非常大的半连接列表而消耗非常多的资源—-数以万计的半连接，即使是简单的保存并遍历也会消耗非常多的 CPU 时间和内存，何况还要不断对这个列表中的 IP 进行 SYN+ACK 的重试。服务器端将忙于处理攻击者伪造的 TCP 连接请求而无暇理睬客户的正常请求，此时从正常客户的角度看来，服务器失去响应，这种情况就称作服务器端受到了SYN Flood攻击(SYN 洪范攻击)。</p><h3 id="2-SYN-Cookies原理"><a href="#2-SYN-Cookies原理" class="headerlink" title="2. SYN Cookies原理"></a>2. SYN Cookies原理</h3><p>　　SYN cookie就是用一个cookie来响应 TCP SYN请求的TCP实现，根据上面的描述，在正常的TCP实现中，当服务器接收到一个SYN数据包，它返回一个SYN+ACK包来应答，然后进入TCP_SYN_RECV(半开放连接)状态来等待最后返回的ACK包。服务器用一个数据空间来描述所有未决的连接，然而这个数据空间的大小是有限的，所以攻击者将塞满这个空间。SYN Cookie是对TCP服务器端的三次握手协议作一些修改，专门用来防范SYN Flood 攻击的一种手段。它的原理是，在TCP服务器收到 TCP SYN包并返回 TCP SYN+ACK 包时，不分配一个专门的数据区，而是根据这个SYN包计算出一个cookie值,并将这个cookie作为将要返回的 SYN+ACK 包的初始序列号。在收到 TCP ACK包时，TCP服务器再根据报头信息获取cookie值，并通过这个cookie值检查这个TCP ACK包的合法性。如果合法，再分配专门的数据区进行处理未来的TCP连接。 由此可见，cookie的实现要求cookie 必须与每次TCP连接紧密对应，攻击者无法伪造cookie，同时cookie中包含连接的状态信息。</p><h3 id="3-实验结果"><a href="#3-实验结果" class="headerlink" title="3. 实验结果"></a>3. 实验结果</h3><p>　　当打开SEED Ubuntu target内核的tcp syn cookie参数时，在target机器遭受syn flood 攻击后，源主机(SEED Ubuntu)可以用telnet登录target主机，即可以建立正常的TCP连接。<br>当内核关闭tcp syn cookie参数时，target主机在遭受flood攻击后，源主机(SEED Ubuntu)telnet不能正常登录target主机，无法建立正常的TCP连接。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
